{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TasksAI - Intelligent Task Management Platform\n\n## Overview\nTasksAI is a full-stack task management application designed to enhance productivity through AI-powered assistance. It facilitates project and task organization, multi-workspace collaboration, real-time AI chat, and intelligent task suggestions. The platform aims to streamline task management, providing users with smart tools for efficient workflow and project oversight.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework**: React 18 (TypeScript)\n- **Routing**: Wouter\n- **State Management**: TanStack Query\n- **UI Framework**: shadcn/ui (built on Radix UI)\n- **Styling**: Tailwind CSS\n- **Build Tool**: Vite\n\n### Backend\n- **Runtime**: Node.js (TypeScript)\n- **Framework**: Express.js (REST API)\n- **Database**: PostgreSQL with Drizzle ORM (Neon serverless)\n- **Authentication**: Replit Auth (OpenID Connect)\n- **Session Management**: Express sessions (PostgreSQL store)\n- **AI Integration**: OpenAI API\n\n### Core Features\n- **Authentication**: Replit Auth with PostgreSQL-backed sessions and user profile management.\n- **Workspace Management**: Multi-tenancy with role-based access and data isolation.\n- **Task Management**: Hierarchical structure (Projects > Tasks > Categories), status tracking (Todo, In Progress, Completed), priority system, due dates, and granular time slots.\n- **AI Integration**: Real-time AI chat, task suggestions, project insights, and context-aware assistance.\n- **File Management**: Document storage with project-specific vaults and quick note-taking.\n- **Financial Management**: Comprehensive system for project budgets, inflows, and outflows with predefined categories and real-time tracking.\n- **Activity Tracking**: Middleware for logging user activities to provide rich AI context.\n- **Notifications**: Email alerts for task assignments, completions, comments, and status changes, including @mention functionality.\n- **Collaboration**: Task comments with nested conversations and @mentions for targeted notifications.\n- **Views**: Kanban, Team, Day, Week, Month, Project, and Category views with consistent drag-and-drop functionality.\n- **Search**: Global search across tasks, projects, members, and categories.\n- **UI/UX Decisions**: Professional, minimalist design with subtle gradients, animations, and color-coded metrics. Features include customizable default views, \"See more\" expansions, and consistent navigation.\n\n## External Dependencies\n\n- **Database & ORM**: `@neondatabase/serverless`, `drizzle-orm`\n- **AI**: `openai`\n- **State Management**: `@tanstack/react-query`\n- **Session Management**: `express-session`\n- **UI Components**: `@radix-ui/*`, `tailwindcss`, `class-variance-authority`, `lucide-react`\n- **File Uploads**: `multer`\n- **Email**: `nodemailer` (for SMTP)\n- **Markdown Rendering**: `react-markdown`, `remark-gfm`","size_bytes":2922},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/activityMiddleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\nimport { InsertActivityLog } from \"@shared/schema\";\n\n// Extended Request interface with activity logging\nexport interface ActivityRequest extends Request {\n  logActivity?: (data: Partial<InsertActivityLog>) => Promise<void>;\n}\n\n// Activity mapping for different HTTP methods and routes\nconst getActivityAction = (method: string, path: string): string => {\n  const normalizedPath = path.toLowerCase();\n  \n  // Task-related activities\n  if (normalizedPath.includes('/tasks')) {\n    switch (method) {\n      case 'POST': return 'created';\n      case 'PATCH': return 'updated';\n      case 'DELETE': return 'deleted';\n      case 'GET': return normalizedPath.includes('/due-today') ? 'viewed_due_tasks' : 'viewed';\n      default: return 'accessed';\n    }\n  }\n  \n  // Project-related activities\n  if (normalizedPath.includes('/projects')) {\n    switch (method) {\n      case 'POST': return 'created';\n      case 'PATCH': return 'updated';\n      case 'DELETE': return 'deleted';\n      case 'GET': return 'viewed';\n      default: return 'accessed';\n    }\n  }\n  \n  // Workspace-related activities\n  if (normalizedPath.includes('/workspaces')) {\n    switch (method) {\n      case 'POST': return 'created';\n      case 'PATCH': return 'updated';\n      case 'DELETE': return 'deleted';\n      case 'GET': return 'viewed';\n      default: return 'accessed';\n    }\n  }\n  \n  // Chat activities\n  if (normalizedPath.includes('/chat')) {\n    switch (method) {\n      case 'POST': return 'chatted';\n      case 'GET': return 'viewed_chat';\n      default: return 'accessed_chat';\n    }\n  }\n  \n  // File activities\n  if (normalizedPath.includes('/files')) {\n    switch (method) {\n      case 'POST': return 'uploaded';\n      case 'DELETE': return 'deleted';\n      case 'GET': return 'downloaded';\n      default: return 'accessed';\n    }\n  }\n  \n  // Comment activities\n  if (normalizedPath.includes('/comments')) {\n    switch (method) {\n      case 'POST': return 'commented';\n      case 'PATCH': return 'updated_comment';\n      case 'DELETE': return 'deleted_comment';\n      case 'GET': return 'viewed_comments';\n      default: return 'accessed';\n    }\n  }\n  \n  // Member activities\n  if (normalizedPath.includes('/members')) {\n    switch (method) {\n      case 'POST': return 'invited_member';\n      case 'DELETE': return 'removed_member';\n      case 'GET': return 'viewed_members';\n      default: return 'accessed';\n    }\n  }\n  \n  // Category activities\n  if (normalizedPath.includes('/categories')) {\n    switch (method) {\n      case 'POST': return 'created';\n      case 'PATCH': return 'updated';\n      case 'DELETE': return 'deleted';\n      case 'GET': return 'viewed';\n      default: return 'accessed';\n    }\n  }\n  \n  // Financial activities\n  if (normalizedPath.includes('/inflows') || normalizedPath.includes('/outflows') || \n      normalizedPath.includes('/budgets') || normalizedPath.includes('/components')) {\n    switch (method) {\n      case 'POST': return 'created';\n      case 'PATCH': return 'updated';\n      case 'DELETE': return 'deleted';\n      case 'GET': return 'viewed';\n      default: return 'accessed';\n    }\n  }\n  \n  // Notification activities\n  if (normalizedPath.includes('/notifications')) {\n    switch (method) {\n      case 'PATCH': return 'marked_read';\n      case 'GET': return 'viewed_notifications';\n      default: return 'accessed';\n    }\n  }\n  \n  // Brain dump activities\n  if (normalizedPath.includes('/brain-dump')) {\n    switch (method) {\n      case 'POST': return 'created_note';\n      case 'PATCH': return 'updated_note';\n      case 'DELETE': return 'deleted_note';\n      case 'GET': return 'viewed_notes';\n      default: return 'accessed';\n    }\n  }\n  \n  // Default activity mapping\n  switch (method) {\n    case 'POST': return 'created';\n    case 'PATCH': return 'updated';\n    case 'DELETE': return 'deleted';\n    case 'GET': return 'viewed';\n    default: return 'accessed';\n  }\n};\n\n// Extract entity type from path\nconst getEntityType = (path: string): string => {\n  const normalizedPath = path.toLowerCase();\n  \n  if (normalizedPath.includes('/tasks')) return 'task';\n  if (normalizedPath.includes('/projects')) return 'project';\n  if (normalizedPath.includes('/workspaces')) return 'workspace';\n  if (normalizedPath.includes('/chat')) return 'chat';\n  if (normalizedPath.includes('/files')) return 'file';\n  if (normalizedPath.includes('/comments')) return 'comment';\n  if (normalizedPath.includes('/members')) return 'member';\n  if (normalizedPath.includes('/categories')) return 'category';\n  if (normalizedPath.includes('/inflows')) return 'inflow';\n  if (normalizedPath.includes('/outflows')) return 'outflow';\n  if (normalizedPath.includes('/budgets')) return 'budget';\n  if (normalizedPath.includes('/components')) return 'component';\n  if (normalizedPath.includes('/notifications')) return 'notification';\n  if (normalizedPath.includes('/brain-dump')) return 'brain_dump';\n  \n  return 'unknown';\n};\n\n// Extract workspace ID from path\nconst extractWorkspaceId = (path: string): number | null => {\n  const match = path.match(/\\/workspaces\\/(\\d+)/);\n  return match ? parseInt(match[1], 10) : null;\n};\n\n// Extract entity ID from path (for specific resources)\nconst extractEntityId = (path: string): number | null => {\n  // Look for ID at the end of path segments\n  const segments = path.split('/');\n  for (let i = segments.length - 1; i >= 0; i--) {\n    const segment = segments[i];\n    if (/^\\d+$/.test(segment)) {\n      return parseInt(segment, 10);\n    }\n  }\n  return null;\n};\n\n// Extract entity name from request body or response\nconst extractEntityName = (req: Request, res: Response): string | null => {\n  // Try to get name from request body\n  if (req.body) {\n    const body = req.body;\n    if (body.name) return body.name;\n    if (body.title) return body.title;\n    if (body.message) return body.message.substring(0, 50) + (body.message.length > 50 ? '...' : '');\n    if (body.fileName) return body.fileName;\n  }\n  \n  return null;\n};\n\n// Activity logging middleware\nexport const activityLogger = (req: ActivityRequest, res: Response, next: NextFunction) => {\n  // Skip logging for certain routes\n  const skipRoutes = [\n    '/api/auth',\n    '/api/workspaces/notifications/unread-count',\n    '/health',\n    '/favicon.ico'\n  ];\n  \n  const shouldSkip = skipRoutes.some(route => req.path.startsWith(route));\n  if (shouldSkip || req.method === 'OPTIONS') {\n    return next();\n  }\n  \n  // Add activity logging function to request\n  req.logActivity = async (data: Partial<InsertActivityLog>) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) return; // Skip if user not authenticated\n      \n      const workspaceId = data.workspaceId || extractWorkspaceId(req.path);\n      const action = data.action || getActivityAction(req.method, req.path);\n      const entityType = data.entityType || getEntityType(req.path);\n      const entityId = data.entityId || extractEntityId(req.path);\n      const entityName = data.entityName || extractEntityName(req, res);\n      \n      const activityData: InsertActivityLog = {\n        userId,\n        workspaceId,\n        action,\n        entityType,\n        entityId,\n        entityName,\n        details: data.details || {\n          method: req.method,\n          path: req.path,\n          userAgent: req.get('User-Agent'),\n          ip: req.ip || req.connection.remoteAddress,\n          timestamp: new Date().toISOString()\n        },\n        metadata: data.metadata || {\n          requestId: req.get('X-Request-ID'),\n          referer: req.get('Referer')\n        }\n      };\n      \n      await storage.logActivity(activityData);\n    } catch (error) {\n      console.error('Failed to log activity:', error);\n      // Don't throw error to avoid breaking the request\n    }\n  };\n  \n  // Automatically log the activity after response is sent\n  res.on('finish', async () => {\n    // Only log successful requests (2xx status codes)\n    if (res.statusCode >= 200 && res.statusCode < 300 && req.user?.id) {\n      try {\n        await req.logActivity!({});\n      } catch (error) {\n        console.error('Failed to auto-log activity:', error);\n      }\n    }\n  });\n  \n  next();\n};\n\n// Helper function to manually log activities in route handlers\nexport const logActivity = async (\n  userId: string,\n  action: string,\n  entityType: string,\n  options: {\n    workspaceId?: number;\n    entityId?: number;\n    entityName?: string;\n    details?: any;\n    metadata?: any;\n  } = {}\n) => {\n  try {\n    const activityData: InsertActivityLog = {\n      userId,\n      action,\n      entityType,\n      workspaceId: options.workspaceId || null,\n      entityId: options.entityId || null,\n      entityName: options.entityName || null,\n      details: options.details || {},\n      metadata: options.metadata || {}\n    };\n    \n    await storage.logActivity(activityData);\n  } catch (error) {\n    console.error('Failed to manually log activity:', error);\n  }\n};\n\n// Activity context builder for AI\nexport const buildActivityContext = async (userId: string, workspaceId?: number): Promise<string> => {\n  try {\n    // Get recent user activities (last 24 hours)\n    const recentActivities = await storage.getRecentUserActivities(userId, 24);\n    \n    // Get workspace activities if workspace ID provided\n    const workspaceActivities = workspaceId \n      ? await storage.getWorkspaceActivities(workspaceId, 20)\n      : [];\n    \n    // Build context string\n    const context = [];\n    \n    if (recentActivities.length > 0) {\n      context.push(\"## Recent User Activities (Last 24 Hours)\");\n      recentActivities.forEach(activity => {\n        const timeAgo = getTimeAgo(activity.createdAt!);\n        const entityInfo = activity.entityName ? ` \"${activity.entityName}\"` : '';\n        context.push(\n          `- ${timeAgo}: ${activity.action} ${activity.entityType}${entityInfo}`\n        );\n      });\n      context.push(\"\");\n    }\n    \n    if (workspaceActivities.length > 0) {\n      context.push(\"## Recent Workspace Activities\");\n      workspaceActivities.forEach(activity => {\n        const timeAgo = getTimeAgo(activity.createdAt!);\n        const entityInfo = activity.entityName ? ` \"${activity.entityName}\"` : '';\n        context.push(\n          `- ${timeAgo}: User ${activity.userId} ${activity.action} ${activity.entityType}${entityInfo}`\n        );\n      });\n      context.push(\"\");\n    }\n    \n    return context.join('\\n');\n  } catch (error) {\n    console.error('Failed to build activity context:', error);\n    return '';\n  }\n};\n\n// Helper function to format time ago\nconst getTimeAgo = (date: Date): string => {\n  const now = new Date();\n  const diffMs = now.getTime() - new Date(date).getTime();\n  const diffMins = Math.floor(diffMs / (1000 * 60));\n  const diffHours = Math.floor(diffMins / 60);\n  \n  if (diffMins < 1) return 'Just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  if (diffHours < 24) return `${diffHours}h ago`;\n  \n  const diffDays = Math.floor(diffHours / 24);\n  return `${diffDays}d ago`;\n};","size_bytes":11047},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/email.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Create reusable transporter object using SMTP transport\nconst createTransporter = () => {\n  if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {\n    throw new Error('SMTP configuration missing. Please set SMTP_HOST, SMTP_USER, and SMTP_PASS environment variables.');\n  }\n\n  const config = {\n    host: process.env.SMTP_HOST,\n    port: parseInt(process.env.SMTP_PORT || '587'),\n    secure: process.env.SMTP_PORT === '465', // true for 465, false for other ports\n    auth: {\n      user: process.env.SMTP_USER,\n      pass: process.env.SMTP_PASS,\n    },\n    tls: {\n      // Don't fail on invalid certs\n      rejectUnauthorized: false\n    }\n  };\n  \n  // Removed debug logging for production\n  \n  return nodemailer.createTransport(config);\n};\n\nexport interface InvitationEmailData {\n  toEmail: string;\n  workspaceName: string;\n  inviterName: string;\n  invitationLink?: string;\n}\n\nexport async function sendWorkspaceInvitation(data: InvitationEmailData): Promise<boolean> {\n  try {\n    const transporter = createTransporter();\n    const fromEmail = process.env.SMTP_FROM_EMAIL || process.env.SMTP_USER;\n    \n    const mailOptions = {\n      from: `\"TasksAI Platform\" <${fromEmail}>`,\n      to: data.toEmail,\n      subject: `You've been invited to join ${data.workspaceName} workspace`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #333; text-align: center;\">You've been invited to TasksAI!</h2>\n          \n          <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <p style=\"font-size: 16px; color: #555; margin: 0 0 15px 0;\">\n              Hi there! 👋\n            </p>\n            \n            <p style=\"font-size: 16px; color: #555; margin: 0 0 15px 0;\">\n              <strong>${data.inviterName}</strong> has invited you to join the \n              <strong>${data.workspaceName}</strong> workspace on TasksAI.\n            </p>\n            \n            <p style=\"font-size: 16px; color: #555; margin: 0 0 20px 0;\">\n              TasksAI is an intelligent task management platform that helps teams organize projects, \n              manage tasks, and collaborate effectively with AI-powered assistance.\n            </p>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${data.invitationLink || '#'}\" \n                 style=\"background-color: #007bff; color: white; padding: 12px 30px; \n                        text-decoration: none; border-radius: 5px; font-weight: bold; \n                        display: inline-block;\">\n                Accept Invitation\n              </a>\n            </div>\n            \n            <p style=\"font-size: 14px; color: #666; margin: 20px 0 0 0;\">\n              If the button doesn't work, you can copy and paste this link into your browser:\n              <br>\n              <a href=\"${data.invitationLink || '#'}\" style=\"color: #007bff; word-break: break-all;\">\n                ${data.invitationLink || 'Please contact your workspace administrator'}\n              </a>\n            </p>\n          </div>\n          \n          <div style=\"border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px;\">\n            <p style=\"font-size: 12px; color: #999; text-align: center; margin: 0;\">\n              This invitation was sent by TasksAI on behalf of ${data.inviterName}.\n              <br>\n              If you didn't expect this invitation, you can safely ignore this email.\n            </p>\n          </div>\n        </div>\n      `,\n      text: `\nYou've been invited to join ${data.workspaceName} workspace on TasksAI!\n\n${data.inviterName} has invited you to join their workspace on TasksAI, an intelligent task management platform.\n\nTo accept this invitation, visit: ${data.invitationLink || 'Please contact your workspace administrator'}\n\nIf you didn't expect this invitation, you can safely ignore this email.\n      `.trim(),\n    };\n\n    await transporter.sendMail(mailOptions);\n    console.log(`Invitation email sent successfully to ${data.toEmail}`);\n    return true;\n  } catch (error) {\n    console.error('Error sending invitation email:', error);\n    return false;\n  }\n}\n\nexport async function testEmailConnection(): Promise<boolean> {\n  try {\n    const transporter = createTransporter();\n    await transporter.verify();\n    console.log('SMTP connection verified successfully');\n    return true;\n  } catch (error) {\n    console.error('SMTP connection failed:', error);\n    return false;\n  }\n}\n\nexport interface TaskNotificationEmailData {\n  toEmail: string;\n  recipientName: string;\n  taskTitle: string;\n  taskDescription: string;\n  notificationType: 'task_assigned' | 'task_completed' | 'comment_added' | 'task_status_changed';\n  assignerName?: string;\n  commenterName?: string;\n  commentText?: string;\n  workspaceName?: string;\n  statusChange?: {\n    from: string;\n    to: string;\n  };\n}\n\nexport async function sendTaskNotification(data: TaskNotificationEmailData): Promise<boolean> {\n  try {\n    const transporter = createTransporter();\n    let subject = '';\n    let htmlContent = '';\n    \n    switch (data.notificationType) {\n      case 'task_assigned':\n        subject = `New Task Assigned: ${data.taskTitle}`;\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;\">\n              <h1 style=\"margin: 0; font-size: 24px;\">New Task Assigned</h1>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;\">\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                Hello ${data.recipientName},\n              </p>\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                You have been assigned a new task by ${data.assignerName || 'a team member'}:\n              </p>\n              <div style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; margin: 20px 0;\">\n                <h3 style=\"margin: 0 0 10px 0; color: #333;\">${data.taskTitle}</h3>\n                <p style=\"margin: 0; color: #666; font-size: 14px;\">${data.taskDescription || 'No description provided'}</p>\n              </div>\n              <p style=\"font-size: 14px; color: #666; margin-top: 30px;\">\n                Access your TasksAI dashboard to view task details and manage your assignments.\n              </p>\n            </div>\n          </div>\n        `;\n        break;\n        \n      case 'task_completed':\n        subject = `Task Completed: ${data.taskTitle}`;\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;\">\n              <h1 style=\"margin: 0; font-size: 24px;\">Task Completed</h1>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;\">\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                Hello ${data.recipientName},\n              </p>\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                A task has been completed by ${data.assignerName || 'a team member'}:\n              </p>\n              <div style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #56ab2f; margin: 20px 0;\">\n                <h3 style=\"margin: 0 0 10px 0; color: #333;\">${data.taskTitle}</h3>\n                <p style=\"margin: 0; color: #666; font-size: 14px;\">${data.taskDescription || 'No description provided'}</p>\n              </div>\n              <p style=\"font-size: 14px; color: #666; margin-top: 30px;\">\n                Check your TasksAI dashboard to view the completed task and project progress.\n              </p>\n            </div>\n          </div>\n        `;\n        break;\n        \n      case 'comment_added':\n        subject = `New Comment on Task: ${data.taskTitle}`;\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #ff7b7b 0%, #667eea 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;\">\n              <h1 style=\"margin: 0; font-size: 24px;\">New Comment Added</h1>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;\">\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                Hello ${data.recipientName},\n              </p>\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                ${data.commenterName || 'Someone'} added a comment to a task:\n              </p>\n              <div style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #ff7b7b; margin: 20px 0;\">\n                <h3 style=\"margin: 0 0 10px 0; color: #333;\">${data.taskTitle}</h3>\n                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 6px; margin-top: 15px;\">\n                  <p style=\"margin: 0; color: #333; font-style: italic;\">\"${data.commentText || 'No comment text'}\"</p>\n                  <p style=\"margin: 10px 0 0 0; color: #666; font-size: 12px;\">— ${data.commenterName}</p>\n                </div>\n              </div>\n              <p style=\"font-size: 14px; color: #666; margin-top: 30px;\">\n                Visit TasksAI to view the full conversation and add your response.\n              </p>\n            </div>\n          </div>\n        `;\n        break;\n        \n      case 'task_status_changed':\n        const statusLabels = {\n          'todo': 'To Do',\n          'in_progress': 'In Progress',\n          'review': 'Review',\n          'completed': 'Completed'\n        };\n        \n        const fromStatus = statusLabels[data.statusChange?.from as keyof typeof statusLabels] || data.statusChange?.from || 'Unknown';\n        const toStatus = statusLabels[data.statusChange?.to as keyof typeof statusLabels] || data.statusChange?.to || 'Unknown';\n        \n        subject = `Task Status Update: ${data.taskTitle}`;\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;\">\n              <h1 style=\"margin: 0; font-size: 24px;\">Task Status Changed</h1>\n            </div>\n            <div style=\"background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;\">\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                Hello ${data.recipientName},\n              </p>\n              <p style=\"font-size: 16px; color: #333; margin-bottom: 20px;\">\n                ${data.assignerName || 'Someone'} has updated the status of a task you're involved with.\n              </p>\n              <div style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #4facfe; margin: 20px 0;\">\n                <h3 style=\"margin: 0 0 10px 0; color: #333;\">${data.taskTitle}</h3>\n                ${data.taskDescription ? `<p style=\"margin: 0 0 15px 0; color: #666;\">${data.taskDescription}</p>` : ''}\n                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 6px; display: flex; align-items: center; justify-content: center;\">\n                  <span style=\"padding: 8px 16px; background: #e9ecef; border-radius: 20px; font-size: 14px; color: #666;\">\n                    ${fromStatus}\n                  </span>\n                  <span style=\"margin: 0 15px; color: #4facfe; font-size: 18px;\">→</span>\n                  <span style=\"padding: 8px 16px; background: #4facfe; color: white; border-radius: 20px; font-size: 14px;\">\n                    ${toStatus}\n                  </span>\n                </div>\n              </div>\n              <p style=\"font-size: 14px; color: #666; margin-top: 30px;\">\n                Stay updated on task progress in your ${data.workspaceName || 'workspace'}.\n              </p>\n            </div>\n          </div>\n        `;\n        break;\n    }\n\n    const mailOptions = {\n      from: process.env.SMTP_FROM_EMAIL,\n      to: data.toEmail,\n      subject: subject,\n      html: htmlContent,\n    };\n\n    await transporter.sendMail(mailOptions);\n    console.log(`Task notification email sent to ${data.toEmail}`);\n    return true;\n  } catch (error) {\n    console.error('Failed to send task notification email:', error);\n    return false;\n  }\n}","size_bytes":13111},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { activityLogger } from \"./activityMiddleware\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add activity logging middleware after basic middleware but before routes\napp.use(activityLogger);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2078},"server/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { buildActivityContext } from \"./activityMiddleware\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) : null;\n\nexport interface AITaskSuggestion {\n  title: string;\n  description: string;\n  priority: number;\n  estimatedHours: number;\n  category: string;\n}\n\nexport interface AIInsight {\n  type: 'productivity' | 'budget' | 'timeline' | 'risk';\n  title: string;\n  description: string;\n  recommendation: string;\n  confidence: number;\n}\n\nexport interface PersonalizedInsight {\n  summary: string;\n  fullContent: string;\n  isLengthy: boolean;\n}\n\nexport async function processAIQuery(\n  query: string,\n  context: {\n    workspaceId: number;\n    userId: string;\n    user?: {\n      id: string;\n      name: string;\n      email?: string;\n    };\n    recentTasks?: any[];\n    userTasks?: any[];\n    projects?: any[];\n    categories?: any[];\n    recentActivity?: string;\n  }\n): Promise<string> {\n  if (!openai) {\n    throw new Error(\"AI features are not available. Please configure your OpenAI API key.\");\n  }\n\n  try {\n    // Build comprehensive activity context\n    const activityContext = await buildActivityContext(context.userId, context.workspaceId);\n    \n    // Force current date to June 28, 2025 since that's today\n    const todayDateString = '2025-06-28';\n    const currentDate = 'Saturday, June 28, 2025';\n\n    const systemPrompt = `You are an AI assistant for a task management platform. You help users manage their projects, tasks, and productivity. \n\nIMPORTANT: Today's date is ${currentDate} (${todayDateString}). Use this exact date when referencing \"today\" or current date.\n\nCurrent User Context:\n- User: ${context.user?.name || 'User'} (${context.user?.email || 'Unknown'})\n- Workspace: ${context.workspaceId}\n\n${context.user?.name ? `${context.user.name}'s` : 'User'} Personal Tasks:\n${JSON.stringify(context.userTasks?.slice(0, 8)?.map(t => ({ \n  id: t.id, \n  title: t.title, \n  status: t.status, \n  priority: t.priority,\n  dueDate: t.dueDate,\n  project: t.project?.name,\n  category: t.category?.name \n})) || [], null, 2)}\n\nWorkspace Overview:\n- All workspace tasks: ${context.recentTasks?.length || 0} total\n- Projects: ${JSON.stringify(context.projects?.map(p => ({ id: p.id, name: p.name, status: p.status })) || [])}\n- Categories: ${JSON.stringify(context.categories?.map(c => ({ id: c.id, name: c.name })) || [])}\n\n${activityContext}\n\nIMPORTANT: When users ask about \"my tasks\", \"recent tasks\", or \"what I'm working on\", focus on ${context.user?.name || 'the user'}'s personally assigned tasks listed above. Use the workspace context only when they specifically ask about team or workspace-wide information.\n\nProvide helpful, actionable responses. You can:\n- Answer questions about their personal tasks and assignments\n- Suggest task organization strategies based on their workload\n- Provide insights about their priorities and deadlines\n- Help with personal productivity planning\n- Reference their recent work patterns and activities\n- Suggest improvements based on their activity history\n\nKeep responses concise, practical, and personalized to ${context.user?.name || 'the user'}.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: query }\n      ],\n      max_tokens: 500,\n      temperature: 0.7,\n    });\n\n    return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response to that query.\";\n  } catch (error) {\n    console.error(\"Error processing AI query:\", error);\n    throw new Error(\"Failed to process AI query\");\n  }\n}\n\nexport async function generateTaskSuggestions(\n  context: {\n    projectName?: string;\n    existingTasks?: any[];\n    budget?: number;\n    timeline?: string;\n  }\n): Promise<AITaskSuggestion[]> {\n  if (!openai) {\n    return [];\n  }\n\n  try {\n    const prompt = `Based on the following project context, suggest 3-5 relevant tasks:\n    \nProject: ${context.projectName || 'Unnamed Project'}\nBudget: ${context.budget ? `$${context.budget}` : 'Not specified'}\nTimeline: ${context.timeline || 'Not specified'}\nExisting tasks: ${JSON.stringify(context.existingTasks?.slice(0, 3) || [])}\n\nProvide task suggestions in JSON format with the following structure:\n{\n  \"tasks\": [\n    {\n      \"title\": \"Task title\",\n      \"description\": \"Brief description\",\n      \"priority\": 0-3,\n      \"estimatedHours\": number,\n      \"category\": \"suggested category name\"\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      max_tokens: 800,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"tasks\": []}');\n    return result.tasks || [];\n  } catch (error) {\n    console.error(\"Error generating task suggestions:\", error);\n    return [];\n  }\n}\n\nexport async function generatePersonalizedInsights(\n  context: {\n    workspaceId: number;\n    userId: string;\n    user?: {\n      id: string;\n      name: string;\n      email?: string;\n    };\n    userTasks?: any[];\n    projects?: any[];\n    categories?: any[];\n  }\n): Promise<PersonalizedInsight> {\n  if (!openai) {\n    throw new Error(\"AI features are not available. Please configure your OpenAI API key.\");\n  }\n\n  try {\n    // Build comprehensive activity context\n    const activityContext = await buildActivityContext(context.userId, context.workspaceId);\n    \n    // Force current date to June 30, 2025 since that's today\n    const todayDateString = '2025-06-30';\n    const currentDate = 'Monday, June 30, 2025';\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a personalized productivity assistant. Based on the user's recent activity and current tasks, provide comprehensive insights that combine:\n\n1. **Task Performance Analysis**: Review completed vs pending tasks, deadline management\n2. **Productivity Patterns**: Identify trends in work habits and completion rates  \n3. **Potential Bottlenecks**: Spot upcoming challenges or resource conflicts\n4. **Strategic Recommendations**: Actionable advice for improving efficiency\n5. **Motivational Insights**: Encouraging observations about progress and achievements\n\nToday is ${currentDate} (${todayDateString}).\n\nFormat your response as a JSON object with:\n- \"summary\": A detailed 3-4 sentence overview (300-400 characters) that provides substantial context\n- \"fullContent\": Comprehensive analysis formatted in clean markdown with proper headings, bullet points, and structure\n- \"isLengthy\": boolean indicating if fullContent is over 500 characters\n\nFor fullContent, use this markdown structure:\n# Productivity Analysis\n\n## Current Status\n- Brief overview of current task state\n\n## Key Insights\n- Productivity patterns observed\n- Performance trends\n\n## Recommendations\n- Specific actionable steps\n- Priority suggestions\n\n## Motivation\n- Positive reinforcement\n- Achievement highlights\n\nWrite in a professional yet encouraging tone. Focus on actionable insights based on actual user data.`\n        },\n        {\n          role: \"user\",\n          content: `Analyze my productivity and provide personalized insights based on:\n\n**User Info:**\n- Name: ${context.user?.name || 'User'}\n- Email: ${context.user?.email || 'N/A'}\n\n**Current Tasks:**\n${JSON.stringify(context.userTasks || [], null, 2)}\n\n**Available Projects:**\n${JSON.stringify(context.projects || [], null, 2)}\n\n**Available Categories:**\n${JSON.stringify(context.categories || [], null, 2)}\n\n**Recent Activity Context:**\n${activityContext}\n\nPlease provide insights that help me understand my productivity patterns, upcoming challenges, and actionable recommendations for improvement.`\n        }\n      ],\n      temperature: 0.7,\n    });\n\n    const responseContent = response.choices[0].message.content || '{}';\n    \n    // Clean up the response if it contains markdown code blocks\n    const cleanedContent = responseContent\n      .replace(/```json\\s*/g, '')\n      .replace(/```\\s*/g, '')\n      .trim();\n    \n    let result;\n    try {\n      result = JSON.parse(cleanedContent);\n    } catch (parseError) {\n      console.error('Failed to parse AI response:', parseError);\n      console.error('Raw response:', responseContent);\n      result = {};\n    }\n    \n    return {\n      summary: result.summary || \"Unable to generate insights at this time.\",\n      fullContent: result.fullContent || \"No detailed analysis available.\",\n      isLengthy: result.isLengthy || false\n    };\n  } catch (error) {\n    console.error('AI personalized insights error:', error);\n    return {\n      summary: \"Unable to generate insights at this time.\",\n      fullContent: \"Unable to generate insights at this time.\",\n      isLengthy: false\n    };\n  }\n}\n\nexport async function generateProjectInsights(\n  projectData: {\n    name: string;\n    tasks: any[];\n    budget?: number;\n    spent?: number;\n    timeline?: string;\n  }\n): Promise<AIInsight[]> {\n  if (!openai) {\n    return [];\n  }\n\n  try {\n    const prompt = `Analyze this project data and provide insights:\n\nProject: ${projectData.name}\nBudget: ${projectData.budget ? `$${projectData.budget}` : 'Not specified'}\nSpent: ${projectData.spent ? `$${projectData.spent}` : '$0'}\nTasks: ${JSON.stringify(projectData.tasks.map(t => ({\n  title: t.title,\n  status: t.status,\n  priority: t.priority,\n  dueDate: t.dueDate\n})))}\n\nProvide insights in JSON format:\n{\n  \"insights\": [\n    {\n      \"type\": \"productivity|budget|timeline|risk\",\n      \"title\": \"Insight title\",\n      \"description\": \"Description\",\n      \"recommendation\": \"Actionable recommendation\",\n      \"confidence\": 0.0-1.0\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"insights\": []}');\n    return result.insights || [];\n  } catch (error) {\n    console.error(\"Error generating project insights:\", error);\n    return [];\n  }\n}\n\nexport async function optimizeTaskScheduling(\n  tasks: any[],\n  constraints: {\n    workingHours?: number;\n    availableDays?: number;\n    priorities?: string[];\n  }\n): Promise<{\n  schedule: Array<{\n    taskId: number;\n    suggestedTimeSlot: string;\n    reasoning: string;\n  }>;\n  recommendations: string[];\n}> {\n  if (!openai) {\n    return { schedule: [], recommendations: [] };\n  }\n\n  try {\n    const prompt = `Optimize the scheduling for these tasks:\n\nTasks: ${JSON.stringify(tasks.map(t => ({\n  id: t.id,\n  title: t.title,\n  priority: t.priority,\n  estimatedHours: t.estimatedHours,\n  dueDate: t.dueDate\n})))}\n\nConstraints:\n- Working hours per day: ${constraints.workingHours || 8}\n- Available days: ${constraints.availableDays || 5}\n- Priority order: ${constraints.priorities?.join(', ') || 'High, Medium, Low'}\n\nProvide optimized schedule in JSON format:\n{\n  \"schedule\": [\n    {\n      \"taskId\": number,\n      \"suggestedTimeSlot\": \"6:00-9:00\" or \"9:00-12:00\" etc,\n      \"reasoning\": \"explanation\"\n    }\n  ],\n  \"recommendations\": [\"general scheduling advice\"]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1200,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"schedule\": [], \"recommendations\": []}');\n    return result;\n  } catch (error) {\n    console.error(\"Error optimizing task scheduling:\", error);\n    return { schedule: [], recommendations: [] };\n  }\n}\n","size_bytes":11948},"server/recurrence-utils.ts":{"content":"import { addDays, addWeeks, addMonths, addYears, format, parseISO, isBefore } from \"date-fns\";\n\nexport interface RecurrenceConfig {\n  type: 'daily' | 'weekly' | 'monthly' | 'yearly' | 'custom';\n  interval: number;\n  endType: 'never' | 'after_count' | 'on_date';\n  endCount?: number;\n  endDate?: string;\n  weeklyDays?: number[]; // 0-6 for Sun-Sat\n  monthlyOption?: 'date' | 'day'; // specific date or relative day\n}\n\nexport interface TaskRecurrenceData {\n  title: string;\n  description?: string;\n  projectId?: number;\n  categoryId?: number;\n  assignedMemberId?: number;\n  priority: number;\n  status: string;\n  timeSlot?: string;\n  workspaceId: number;\n}\n\nexport function generateRecurringTasks(\n  baseTask: TaskRecurrenceData,\n  startDate: Date,\n  config: RecurrenceConfig,\n  maxInstances: number = 50\n): Array<TaskRecurrenceData & { dueDate: string }> {\n  const tasks: Array<TaskRecurrenceData & { dueDate: string }> = [];\n  let currentDate = new Date(startDate);\n  let instanceCount = 0;\n\n  // Generate first task (original)\n  tasks.push({\n    ...baseTask,\n    dueDate: format(currentDate, 'yyyy-MM-dd'),\n  });\n  instanceCount++;\n\n  // Check end conditions\n  const shouldContinue = (date: Date, count: number): boolean => {\n    if (count >= maxInstances) return false;\n    \n    switch (config.endType) {\n      case 'never':\n        return true;\n      case 'after_count':\n        return config.endCount ? count < config.endCount : false;\n      case 'on_date':\n        return config.endDate ? isBefore(date, parseISO(config.endDate)) : false;\n      default:\n        return false;\n    }\n  };\n\n  // Generate recurring instances\n  while (shouldContinue(currentDate, instanceCount)) {\n    currentDate = calculateNextDate(currentDate, config);\n    \n    if (!shouldContinue(currentDate, instanceCount + 1)) break;\n\n    // For weekly recurrence with specific days\n    if (config.type === 'weekly' && config.weeklyDays && config.weeklyDays.length > 0) {\n      const weeklyTasks = generateWeeklyTasks(baseTask, currentDate, config.weeklyDays, config.interval);\n      tasks.push(...weeklyTasks.filter(task => shouldContinue(parseISO(task.dueDate), instanceCount + 1)));\n      instanceCount += weeklyTasks.length;\n    } else {\n      tasks.push({\n        ...baseTask,\n        dueDate: format(currentDate, 'yyyy-MM-dd'),\n      });\n      instanceCount++;\n    }\n  }\n\n  return tasks.slice(0, maxInstances);\n}\n\nfunction calculateNextDate(currentDate: Date, config: RecurrenceConfig): Date {\n  switch (config.type) {\n    case 'daily':\n      return addDays(currentDate, config.interval);\n    case 'weekly':\n      return addWeeks(currentDate, config.interval);\n    case 'monthly':\n      return addMonths(currentDate, config.interval);\n    case 'yearly':\n      return addYears(currentDate, config.interval);\n    case 'custom':\n      return addDays(currentDate, config.interval);\n    default:\n      return addDays(currentDate, 1);\n  }\n}\n\nfunction generateWeeklyTasks(\n  baseTask: TaskRecurrenceData,\n  weekStart: Date,\n  weeklyDays: number[],\n  interval: number\n): Array<TaskRecurrenceData & { dueDate: string }> {\n  const tasks: Array<TaskRecurrenceData & { dueDate: string }> = [];\n  \n  // Find the start of the week (Sunday = 0)\n  const startOfWeek = new Date(weekStart);\n  startOfWeek.setDate(weekStart.getDate() - weekStart.getDay());\n  \n  // Generate tasks for each selected day of the week\n  weeklyDays.forEach(dayOfWeek => {\n    const taskDate = new Date(startOfWeek);\n    taskDate.setDate(startOfWeek.getDate() + dayOfWeek);\n    \n    tasks.push({\n      ...baseTask,\n      dueDate: format(taskDate, 'yyyy-MM-dd'),\n    });\n  });\n  \n  return tasks;\n}\n\nexport function createRecurrenceFromFormData(formData: any): RecurrenceConfig | null {\n  if (!formData.hasRecurrence) return null;\n  \n  return {\n    type: formData.recurrenceType || 'daily',\n    interval: formData.recurrenceInterval || 1,\n    endType: formData.recurrenceEndType || 'never',\n    endCount: formData.recurrenceEndCount,\n    endDate: formData.recurrenceEndDate,\n    weeklyDays: formData.weeklyDays,\n    monthlyOption: formData.monthlyOption,\n  };\n}","size_bytes":4097},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// REPLIT_DOMAINS is optional for development\nconst replitDomains = process.env.REPLIT_DOMAINS || 'localhost';\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  try {\n    console.log('Upserting user with claims:', claims);\n    \n    const user = await storage.upsertUser({\n      id: claims[\"sub\"],\n      email: claims[\"email\"],\n      firstName: claims[\"first_name\"],\n      lastName: claims[\"last_name\"],\n      profileImageUrl: claims[\"profile_image_url\"],\n    });\n    \n    console.log('User upserted successfully:', user.email);\n    \n    // Ensure user has personal workspace and default project\n    console.log('Setting up user workspace for:', user.id);\n    await storage.ensureUserSetup(user.id);\n    console.log('User workspace setup completed');\n    \n    // Check for pending invitations and auto-accept them\n    if (user.email) {\n      console.log('Checking pending invitations for:', user.email);\n      const pendingInvitations = await storage.getPendingInvitations(user.email);\n      console.log(`Found ${pendingInvitations.length} pending invitations`);\n      \n      for (const invitation of pendingInvitations) {\n        try {\n          await storage.acceptInvitation(invitation.id, user.id);\n          console.log(`Auto-accepted invitation ${invitation.id} for user ${user.email}`);\n        } catch (error) {\n          console.error(`Failed to auto-accept invitation ${invitation.id}:`, error);\n        }\n      }\n    }\n    \n    console.log('User setup completed successfully');\n    return user;\n  } catch (error) {\n    console.error('Error in upsertUser:', error);\n    console.error('Claims data:', claims);\n    throw error;\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    try {\n      console.log('Starting OAuth verification for user:', tokens.claims()?.email);\n      const user = {};\n      updateUserSession(user, tokens);\n      \n      console.log('Attempting to upsert user with claims:', tokens.claims());\n      await upsertUser(tokens.claims());\n      \n      console.log('User verification completed successfully');\n      verified(null, user);\n    } catch (error) {\n      console.error('OAuth verification failed:', error);\n      console.error('Error stack:', error.stack);\n      verified(error, null);\n    }\n  };\n\n  for (const domain of replitDomains.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Store invitation token in session if provided\n    const invitationToken = req.query.invitation;\n    if (invitationToken) {\n      req.session.pendingInvitation = invitationToken;\n    }\n    \n    // Use the first configured domain for authentication\n    const domain = replitDomains.split(\",\")[0];\n    passport.authenticate(`replitauth:${domain}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", async (req, res, next) => {\n    try {\n      console.log('OAuth callback received, query params:', req.query);\n      const domain = replitDomains.split(\",\")[0];\n      console.log('Using domain for auth:', domain);\n      \n      passport.authenticate(`replitauth:${domain}`, {\n        failureRedirect: \"/api/login\",\n        failureFlash: false\n      })(req, res, async (err: any) => {\n        console.log('Passport authenticate callback triggered');\n        console.log('Error:', err);\n        console.log('User:', req.user ? 'User object exists' : 'No user');\n        \n        try {\n          if (err) {\n            console.error('Passport authentication error:', err);\n            console.error('Error type:', typeof err);\n            console.error('Error constructor:', err.constructor?.name);\n            return res.status(500).json({ \n              error: 'Authentication failed', \n              details: err.message || String(err),\n              type: err.constructor?.name,\n              stack: err.stack \n            });\n          }\n          \n          if (!req.user) {\n            console.error('No user found after authentication - redirecting to login');\n            return res.redirect(\"/api/login?error=no_user\");\n          }\n          \n          console.log('User authenticated successfully:', req.user.claims?.email || 'No email in claims');\n          \n          // Check for pending invitation after successful login\n          const pendingInvitation = req.session.pendingInvitation;\n          if (pendingInvitation && req.user?.claims?.sub) {\n            try {\n              console.log('Processing auto-accept for invitation:', pendingInvitation);\n              \n              // Get invitation by ID directly\n              const invitation = await storage.getInvitationById(parseInt(pendingInvitation));\n              \n              if (invitation && invitation.email === req.user.claims.email && invitation.status === 'pending') {\n                console.log('Auto-accepting invitation for workspace:', invitation.workspaceId);\n                await storage.acceptInvitation(invitation.id, req.user.claims.sub);\n                \n                // Clear the pending invitation\n                delete req.session.pendingInvitation;\n                \n                // Get workspace name for better UX\n                const workspace = await storage.getWorkspaceById(invitation.workspaceId);\n                console.log('Redirecting to workspace:', workspace?.name);\n                \n                // Redirect to the workspace with invitation success params\n                return res.redirect(`/?workspace=${invitation.workspaceId}&invited=true&workspaceName=${encodeURIComponent(workspace?.name || 'workspace')}`);\n              } else {\n                console.log('Invitation not found or already processed:', invitation);\n              }\n            } catch (invitationError) {\n              console.error('Auto-accept invitation failed:', invitationError);\n              // Continue with normal login flow\n            }\n          }\n          \n          // Default redirect\n          console.log('Redirecting to dashboard');\n          res.redirect(\"/\");\n        } catch (callbackError) {\n          console.error('Error in callback handler:', callbackError);\n          console.error('Callback error stack:', callbackError.stack);\n          return res.status(500).json({ \n            error: 'Callback processing failed', \n            details: callbackError.message,\n            stack: callbackError.stack \n          });\n        }\n      });\n    } catch (outerError) {\n      console.error('Outer callback error:', outerError);\n      console.error('Outer error stack:', outerError.stack);\n      return res.status(500).json({ \n        error: 'Authentication system error', \n        details: outerError.message,\n        stack: outerError.stack \n      });\n    }\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user?.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":9927},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { processAIQuery, generateTaskSuggestions, generateProjectInsights } from \"./openai\";\nimport { buildActivityContext } from \"./activityMiddleware\";\nimport { sendWorkspaceInvitation, sendTaskNotification } from \"./email\";\nimport { generateRecurringTasks, createRecurrenceFromFormData } from \"./recurrence-utils\";\nimport { parseISO } from \"date-fns\";\nimport { \n  insertWorkspaceSchema,\n  insertWorkspaceMemberSchema,\n  insertWorkspaceInvitationSchema,\n  insertProjectSchema,\n  insertCategorySchema,\n  insertTaskSchema,\n  insertProjectPageSchema,\n  insertBrainDumpItemSchema,\n  insertChatConversationSchema,\n  insertNotificationSchema,\n  insertTaskCommentSchema,\n  insertProjectComponentSchema,\n  insertProjectBudgetSchema,\n  insertProjectExpenseSchema,\n  insertProjectRevenueSchema,\n  insertOutflowTypeSchema,\n  insertInflowTypeSchema,\n  insertTaskRecurrenceSchema,\n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  }\n});\n\n// Helper function for creating task notifications with email alerts\nasync function getProjectInvolvedUsers(projectId: number, workspaceId: number): Promise<any[]> {\n  try {\n    // Get all tasks in the project to find users who have tasks assigned\n    const projectTasks = await storage.getProjectTasks(projectId);\n    const involvedUserIds = new Set<string>();\n    \n    // Add users who have tasks assigned in this project\n    projectTasks.forEach(task => {\n      if (task.assignedMemberId) {\n        // We need to get the userId from the member ID\n        // This will be resolved in the calling function\n        involvedUserIds.add(task.assignedMemberId.toString());\n      }\n    });\n    \n    // Get workspace members to resolve member IDs to user IDs\n    const workspaceMembers = await storage.getWorkspaceMembers(workspaceId);\n    const workspace = await storage.getWorkspaceById(workspaceId);\n    const involvedUsers = [];\n    \n    for (const member of workspaceMembers) {\n      // Include if user has tasks in this project OR is workspace owner\n      const isProjectInvolved = involvedUserIds.has(member.id.toString());\n      const isWorkspaceOwner = workspace && member.userId === workspace.ownerId;\n      \n      if ((isProjectInvolved || isWorkspaceOwner) && member.userId) {\n        const user = await storage.getUser(member.userId);\n        if (user) {\n          involvedUsers.push({ member, user });\n        }\n      }\n    }\n    \n    return involvedUsers;\n  } catch (error) {\n    console.error('Failed to get project involved users:', error);\n    return [];\n  }\n}\n\nasync function createTaskNotification(data: {\n  type: 'task_assigned' | 'task_completed' | 'comment_added' | 'task_status_changed';\n  userId: string;\n  workspaceId: number;\n  taskId: number;\n  title: string;\n  message: string;\n  assignedUser: any;\n  task: any;\n  commenterName?: string;\n  commentText?: string;\n  statusChange?: {\n    from: string;\n    to: string;\n  };\n}) {\n  try {\n    // Create notification in database\n    await storage.createNotification({\n      workspaceId: data.workspaceId,\n      userId: data.userId,\n      type: data.type,\n      title: data.title,\n      message: data.message,\n      taskId: data.taskId,\n      isRead: false,\n      emailSent: true,\n    });\n\n    // Get workspace name for context\n    const workspace = await storage.getWorkspaceById(data.workspaceId);\n\n    // Send email notification\n    await sendTaskNotification({\n      toEmail: data.assignedUser.email,\n      recipientName: data.assignedUser.firstName || data.assignedUser.email.split('@')[0],\n      taskTitle: data.task.title,\n      taskDescription: data.task.description || '',\n      notificationType: data.type,\n      assignerName: data.commenterName,\n      commenterName: data.commenterName,\n      commentText: data.commentText,\n      workspaceName: workspace?.name,\n      statusChange: data.statusChange,\n    });\n  } catch (error) {\n    console.error('Failed to create task notification:', error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Test email route (no auth required for testing)\n  app.get('/api/test-email', async (req: any, res) => {\n    try {\n      const { testEmailConnection } = await import(\"./email\");\n      const isConnected = await testEmailConnection();\n      res.json({ \n        connected: isConnected,\n        message: isConnected ? \"Email configuration is working\" : \"Email configuration failed\"\n      });\n    } catch (error) {\n      res.status(500).json({ \n        connected: false, \n        message: \"Email service not configured\",\n        error: error.message\n      });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Ensure user setup (personal workspace and default project) for existing users\n      if (user) {\n        await storage.ensureUserSetup(userId);\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Workspace routes\n  app.get('/api/workspaces', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const workspaces = await storage.getUserWorkspaces(userId);\n      res.json(workspaces);\n    } catch (error) {\n      console.error(\"Error fetching workspaces:\", error);\n      res.status(500).json({ message: \"Failed to fetch workspaces\" });\n    }\n  });\n\n  app.post('/api/workspaces', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, type } = req.body;\n      \n      console.log(\"Creating workspace for user:\", userId);\n      console.log(\"Request body:\", req.body);\n      \n      // Basic validation\n      if (!name || !name.trim()) {\n        return res.status(400).json({ message: \"Workspace name is required\" });\n      }\n      \n      if (!type || !['personal', 'team'].includes(type)) {\n        return res.status(400).json({ message: \"Valid workspace type is required\" });\n      }\n      \n      const workspaceData = {\n        name: name.trim(),\n        type: type,\n        ownerId: userId,\n      };\n      \n      console.log(\"Creating workspace with data:\", workspaceData);\n      \n      const workspace = await storage.createWorkspace(workspaceData);\n      console.log(\"Created workspace:\", workspace);\n      \n      // Add owner as admin member\n      const memberData = {\n        workspaceId: workspace.id,\n        userId: userId,\n        memberType: 'user',\n        name: req.user.claims.first_name && req.user.claims.last_name \n          ? `${req.user.claims.first_name} ${req.user.claims.last_name}`\n          : req.user.claims.email || 'User',\n        role: 'admin',\n      };\n      \n      console.log(\"Adding workspace member with data:\", memberData);\n      \n      await storage.addWorkspaceMember(memberData);\n      \n      // Seed default outflow and inflow types for the new workspace\n      await storage.seedDefaultTypesForWorkspace(workspace.id);\n      \n      console.log(\"Successfully created workspace and added member\");\n      \n      res.json(workspace);\n    } catch (error: any) {\n      console.error(\"Error creating workspace:\", error);\n      res.status(500).json({ \n        message: error.message || \"Failed to create workspace\" \n      });\n    }\n  });\n\n  app.get('/api/workspaces/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const workspace = await storage.getWorkspaceById(workspaceId);\n      \n      if (!workspace) {\n        return res.status(404).json({ message: \"Workspace not found\" });\n      }\n      \n      res.json(workspace);\n    } catch (error) {\n      console.error(\"Error fetching workspace:\", error);\n      res.status(500).json({ message: \"Failed to fetch workspace\" });\n    }\n  });\n\n  // Workspace members routes\n  app.get('/api/workspaces/:id/members', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const members = await storage.getWorkspaceMembers(workspaceId);\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching workspace members:\", error);\n      res.status(500).json({ message: \"Failed to fetch workspace members\" });\n    }\n  });\n\n  // Helper function to check if user is workspace owner\n  async function isWorkspaceOwner(workspaceId: number, userId: string): Promise<boolean> {\n    const workspace = await storage.getWorkspaceById(workspaceId);\n    return workspace?.ownerId === userId;\n  }\n\n  app.post('/api/workspaces/:id/members', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const { memberType, email, name, alias, systemPrompt } = req.body;\n      const userId = req.user.claims.sub;\n      \n      // Check if user is workspace owner\n      const isOwner = await isWorkspaceOwner(workspaceId, userId);\n      if (!isOwner) {\n        return res.status(403).json({ message: \"Only workspace owners can add members\" });\n      }\n      \n      if (memberType === 'agent') {\n        // For AI agents, create directly as workspace member\n        const memberData = {\n          workspaceId,\n          memberType: 'agent',\n          name: name || 'AI Agent',\n          alias,\n          systemPrompt,\n          role: 'agent',\n          userId: null,\n        };\n        \n        const member = await storage.addWorkspaceMember(memberData);\n        res.json(member);\n      } else {\n        // For users, create invitation (not direct member)\n        const invitationData = {\n          workspaceId,\n          email,\n          invitedBy: userId,\n        };\n        \n        const invitation = await storage.createWorkspaceInvitation(invitationData);\n        \n        // Get workspace and inviter info for email\n        const workspace = await storage.getWorkspaceById(workspaceId);\n        const inviter = await storage.getUser(userId);\n        \n        if (workspace && inviter) {\n          // Send invitation email\n          const emailSent = await sendWorkspaceInvitation({\n            toEmail: email,\n            workspaceName: workspace.name,\n            inviterName: inviter.firstName && inviter.lastName \n              ? `${inviter.firstName} ${inviter.lastName}`\n              : inviter.email || 'Team Member',\n            invitationLink: `${process.env.SITE_URL || `https://${req.hostname}`}/accept-invitation?token=${invitation.id}`,\n          });\n          \n          res.json({ \n            invitation, \n            message: emailSent \n              ? \"Invitation sent successfully\" \n              : \"Invitation created but email delivery failed\"\n          });\n        } else {\n          res.json({ invitation, message: \"Invitation created successfully\" });\n        }\n      }\n    } catch (error) {\n      console.error(\"Error adding workspace member/invitation:\", error);\n      res.status(500).json({ message: \"Failed to add workspace member\" });\n    }\n  });\n\n  // Remove workspace member\n  app.delete('/api/workspaces/:workspaceId/members/:memberId', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const memberId = parseInt(req.params.memberId);\n      const userId = req.user.claims.sub;\n      \n      // Check if user is workspace owner\n      const isOwner = await isWorkspaceOwner(workspaceId, userId);\n      if (!isOwner) {\n        return res.status(403).json({ message: \"Only workspace owners can remove members\" });\n      }\n      \n      // Get the member to check if it's the owner trying to remove themselves\n      const member = await storage.getWorkspaceMembers(workspaceId);\n      const memberToRemove = member.find((m: any) => m.id === memberId);\n      \n      if (!memberToRemove) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n      \n      // Prevent owner from removing themselves\n      if (memberToRemove.userId === userId) {\n        return res.status(400).json({ message: \"Workspace owners cannot remove themselves\" });\n      }\n      \n      await storage.removeWorkspaceMember(memberId);\n      res.json({ message: \"Member removed successfully\" });\n    } catch (error) {\n      console.error(\"Error removing workspace member:\", error);\n      res.status(500).json({ message: \"Failed to remove workspace member\" });\n    }\n  });\n\n  // Invitation routes\n  app.get('/api/workspaces/:id/invitations', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const invitations = await storage.getWorkspaceInvitations(workspaceId);\n      res.json(invitations);\n    } catch (error) {\n      console.error(\"Error fetching invitations:\", error);\n      res.status(500).json({ message: \"Failed to fetch invitations\" });\n    }\n  });\n\n  app.get('/api/auth/pending-invitations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userEmail = req.user.claims.email;\n      if (!userEmail) {\n        return res.json([]);\n      }\n      \n      const invitations = await storage.getPendingInvitations(userEmail);\n      res.json(invitations);\n    } catch (error) {\n      console.error(\"Error fetching pending invitations:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending invitations\" });\n    }\n  });\n\n  // Accept invitation route  \n  app.post('/api/invitations/:id/accept', async (req, res) => {\n    try {\n      const invitationParam = req.params.id;\n      let invitationId: number;\n      \n      // Check if the parameter is a number (ID) or treat it as a token\n      if (isNaN(parseInt(invitationParam))) {\n        // It's a token, find the invitation by token (assume token = ID for now)\n        invitationId = parseInt(invitationParam);\n      } else {\n        invitationId = parseInt(invitationParam);\n      }\n      \n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ \n          message: \"Please log in first to accept this invitation\",\n          redirectToLogin: true \n        });\n      }\n      \n      const userId = req.user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n      \n      // Get the invitation directly by ID\n      const invitation = await storage.getInvitationById(invitationId);\n      \n      if (!invitation) {\n        return res.status(404).json({ message: \"Invitation not found\" });\n      }\n      \n      // Check if invitation is for this user's email\n      if (invitation.email !== req.user.claims.email) {\n        return res.status(403).json({ message: \"This invitation is not for your email address\" });\n      }\n      \n      // Get workspace details\n      const workspace = await storage.getWorkspaceById(invitation.workspaceId);\n      \n      await storage.acceptInvitation(invitationId, userId);\n      \n      res.json({ \n        message: \"Invitation accepted successfully\",\n        workspaceName: workspace?.name || \"workspace\"\n      });\n    } catch (error) {\n      console.error(\"Error accepting invitation:\", error);\n      res.status(500).json({ message: \"Failed to accept invitation\" });\n    }\n  });\n\n  // Project routes\n  app.get('/api/workspaces/:id/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const projects = await storage.getWorkspaceProjects(workspaceId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const projectData = insertProjectSchema.parse({\n        ...req.body,\n        workspaceId,\n      });\n      \n      const project = await storage.createProject(projectData);\n      \n      // Automatically seed default financial types for the new project\n      await storage.seedDefaultTypesForProject(project.id, workspaceId);\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.get('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const project = await storage.getProjectById(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.patch('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const project = await storage.updateProject(projectId, updates);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/workspaces/:id/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const categories = await storage.getWorkspaceCategories(workspaceId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/categories', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const categoryData = insertCategorySchema.parse({\n        ...req.body,\n        workspaceId,\n      });\n      \n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.patch('/api/categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const categoryId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const category = await storage.updateCategory(categoryId, updates);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  // Task routes\n  app.get('/api/workspaces/:id/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      console.log(`Fetching tasks for workspace ${workspaceId}`);\n      const tasks = await storage.getWorkspaceTasks(workspaceId);\n      console.log(`Found ${tasks.length} tasks for workspace ${workspaceId}`);\n      console.log(`Sample task IDs: ${tasks.slice(0, 5).map(t => t.id).join(', ')}`);\n      console.log(`Response size: ${JSON.stringify(tasks).length} characters`);\n      \n      // Check for JSON serialization issues\n      try {\n        const serialized = JSON.stringify(tasks);\n        console.log(`JSON serialization successful: ${serialized.length} chars`);\n      } catch (jsonError) {\n        console.error('JSON serialization error:', jsonError);\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get('/api/workspaces/:id/tasks/due-today', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const tasks = await storage.getDueTodayTasks(workspaceId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching due today tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch due today tasks\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const formData = req.body;\n      \n      // Extract recurrence configuration\n      const recurrenceConfig = createRecurrenceFromFormData(formData);\n      \n      if (recurrenceConfig && formData.dueDate) {\n        // Handle recurring task creation\n        const baseTaskData = {\n          title: formData.title,\n          description: formData.description,\n          projectId: formData.projectId,\n          categoryId: formData.categoryId,\n          assignedMemberId: formData.assignedMemberId,\n          priority: formData.priority || 0,\n          status: formData.status || 'todo',\n          timeSlot: formData.timeSlot,\n          workspaceId,\n        };\n        \n        // First create the task recurrence record\n        const taskRecurrence = await storage.createTaskRecurrence({\n          workspaceId,\n          recurrenceType: recurrenceConfig.type,\n          recurrencePattern: JSON.stringify(recurrenceConfig),\n          interval: recurrenceConfig.interval,\n          endType: recurrenceConfig.endType,\n          endCount: recurrenceConfig.endCount,\n          endDate: recurrenceConfig.endDate,\n        });\n        \n        // Generate recurring task instances\n        const startDate = parseISO(formData.dueDate);\n        const recurringTasks = generateRecurringTasks(baseTaskData, startDate, recurrenceConfig);\n        \n        // Create all task instances with recurrence reference\n        const createdTasks = [];\n        for (const taskData of recurringTasks) {\n          const taskWithRecurrence = insertTaskSchema.parse({\n            ...taskData,\n            taskRecurrenceId: taskRecurrence.id,\n          });\n          const task = await storage.createTask(taskWithRecurrence);\n          createdTasks.push(task);\n        }\n        \n        res.json({ \n          message: `Created ${createdTasks.length} recurring tasks`,\n          tasks: createdTasks,\n          recurrence: taskRecurrence\n        });\n      } else {\n        // Handle single task creation\n        const taskData = insertTaskSchema.parse({\n          ...formData,\n          workspaceId,\n        });\n        \n        const task = await storage.createTask(taskData);\n        res.json(task);\n      }\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.patch('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const originalTask = await storage.getTaskById(taskId);\n      const task = await storage.updateTask(taskId, updates);\n      \n      // Handle notifications for task updates\n      if (originalTask) {\n        // Check if task was assigned to someone new\n        if (updates.assignedMemberId && updates.assignedMemberId !== originalTask.assignedMemberId) {\n          const member = await storage.getWorkspaceMembers(originalTask.workspaceId);\n          const assignedMember = member.find(m => m.id === updates.assignedMemberId);\n          if (assignedMember && assignedMember.userId) {\n            const assignedUser = await storage.getUser(assignedMember.userId);\n            if (assignedUser) {\n              await createTaskNotification({\n                type: 'task_assigned',\n                userId: assignedMember.userId,\n                workspaceId: originalTask.workspaceId,\n                taskId: taskId,\n                title: 'New Task Assigned',\n                message: `You have been assigned to task: ${task.title}`,\n                assignedUser,\n                task\n              });\n            }\n          }\n        }\n        \n        // Check if task status changed\n        if (updates.status && updates.status !== originalTask.status) {\n          const statusMessages = {\n            'todo': 'moved to Todo',\n            'in_progress': 'started working on',\n            'review': 'moved to Review',\n            'completed': 'completed'\n          };\n          \n          const statusMessage = statusMessages[updates.status as keyof typeof statusMessages] || 'updated the status of';\n          \n          // Determine who to notify based on task assignment and project involvement\n          const usersToNotify = new Set<string>();\n          \n          // Always notify the assigned user (if different from the one making the change)\n          if (originalTask.assignedMemberId) {\n            const members = await storage.getWorkspaceMembers(originalTask.workspaceId);\n            const assignedMember = members.find(m => m.id === originalTask.assignedMemberId);\n            if (assignedMember && assignedMember.userId && assignedMember.userId !== req.user.id) {\n              usersToNotify.add(assignedMember.userId);\n            }\n          }\n          \n          // Also notify workspace owner/admin for oversight\n          const workspace = await storage.getWorkspaceById(originalTask.workspaceId);\n          if (workspace && workspace.ownerId && workspace.ownerId !== req.user.id) {\n            usersToNotify.add(workspace.ownerId);\n          }\n          \n          // For completion status, also notify project-involved users\n          if (updates.status === 'completed' && originalTask.projectId) {\n            const involvedUsers = await getProjectInvolvedUsers(originalTask.projectId, originalTask.workspaceId);\n            for (const { member } of involvedUsers) {\n              if (member.userId && member.userId !== req.user.id) {\n                usersToNotify.add(member.userId);\n              }\n            }\n          }\n          \n          // Send notifications to all relevant users\n          for (const userId of Array.from(usersToNotify)) {\n            const user = await storage.getUser(userId);\n            if (user) {\n              await createTaskNotification({\n                type: updates.status === 'completed' ? 'task_completed' : 'task_status_changed',\n                userId: userId,\n                workspaceId: originalTask.workspaceId,\n                taskId: taskId,\n                title: `Task Status Changed`,\n                message: `${req.user.firstName || 'Someone'} ${statusMessage} task: \"${task.title}\"`,\n                assignedUser: user,\n                task,\n                statusChange: {\n                  from: originalTask.status || 'todo',\n                  to: updates.status\n                }\n              });\n            }\n          }\n        }\n      }\n      \n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      await storage.deleteTask(taskId);\n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Task recurrence routes\n  app.get('/api/workspaces/:id/task-recurrences', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const recurrences = await storage.getWorkspaceTaskRecurrences(workspaceId);\n      res.json(recurrences);\n    } catch (error) {\n      console.error(\"Error fetching task recurrences:\", error);\n      res.status(500).json({ message: \"Failed to fetch task recurrences\" });\n    }\n  });\n\n  app.get('/api/task-recurrences/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const recurrenceId = parseInt(req.params.id);\n      const recurrence = await storage.getTaskRecurrenceById(recurrenceId);\n      \n      if (!recurrence) {\n        return res.status(404).json({ message: \"Task recurrence not found\" });\n      }\n      \n      res.json(recurrence);\n    } catch (error) {\n      console.error(\"Error fetching task recurrence:\", error);\n      res.status(500).json({ message: \"Failed to fetch task recurrence\" });\n    }\n  });\n\n  app.patch('/api/task-recurrences/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const recurrenceId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const recurrence = await storage.updateTaskRecurrence(recurrenceId, updates);\n      res.json(recurrence);\n    } catch (error) {\n      console.error(\"Error updating task recurrence:\", error);\n      res.status(500).json({ message: \"Failed to update task recurrence\" });\n    }\n  });\n\n  app.delete('/api/task-recurrences/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const recurrenceId = parseInt(req.params.id);\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Find all tasks associated with this recurrence\n      const allTasks = await storage.getTasksByRecurrenceId(recurrenceId);\n      \n      // Filter to only delete current and future tasks (not past ones)\n      const tasksToDelete = allTasks.filter(task => \n        !task.dueDate || task.dueDate >= today\n      );\n      \n      // Delete only current and future task instances\n      for (const task of tasksToDelete) {\n        await storage.deleteTask(task.id);\n      }\n      \n      // Delete the recurrence record\n      await storage.deleteTaskRecurrence(recurrenceId);\n      \n      res.json({ \n        message: `Task recurrence and ${tasksToDelete.length} future tasks deleted successfully`,\n        deletedTasksCount: tasksToDelete.length,\n        totalTasksInSeries: allTasks.length\n      });\n    } catch (error) {\n      console.error(\"Error deleting task recurrence:\", error);\n      res.status(500).json({ message: \"Failed to delete task recurrence\" });\n    }\n  });\n\n  // Project pages routes\n  app.get('/api/projects/:id/pages', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const pages = await storage.getProjectPages(projectId);\n      res.json(pages);\n    } catch (error) {\n      console.error(\"Error fetching project pages:\", error);\n      res.status(500).json({ message: \"Failed to fetch project pages\" });\n    }\n  });\n\n  app.post('/api/projects/:id/pages', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const pageData = insertProjectPageSchema.parse({\n        ...req.body,\n        projectId,\n      });\n      \n      const page = await storage.createProjectPage(pageData);\n      res.json(page);\n    } catch (error) {\n      console.error(\"Error creating project page:\", error);\n      res.status(500).json({ message: \"Failed to create project page\" });\n    }\n  });\n\n  // Brain dump routes\n  app.get('/api/workspaces/:id/brain-dump', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      const items = await storage.getUserBrainDumpItems(workspaceId, userId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching brain dump items:\", error);\n      res.status(500).json({ message: \"Failed to fetch brain dump items\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/brain-dump', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      const itemData = insertBrainDumpItemSchema.parse({\n        ...req.body,\n        workspaceId,\n        userId,\n      });\n      \n      const item = await storage.createBrainDumpItem(itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating brain dump item:\", error);\n      res.status(500).json({ message: \"Failed to create brain dump item\" });\n    }\n  });\n\n  app.delete('/api/brain-dump/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const itemId = parseInt(req.params.id);\n      await storage.deleteBrainDumpItem(itemId);\n      res.json({ message: \"Brain dump item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting brain dump item:\", error);\n      res.status(500).json({ message: \"Failed to delete brain dump item\" });\n    }\n  });\n\n  app.delete('/api/workspaces/:id/brain-dump', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const userId = req.user.claims.sub;\n      await storage.clearUserBrainDump(workspaceId, userId);\n      res.json({ message: \"Brain dump cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing brain dump:\", error);\n      res.status(500).json({ message: \"Failed to clear brain dump\" });\n    }\n  });\n\n\n\n  // AI Chat routes - enhanced with conversation management\n  app.get('/api/workspaces/:id/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const conversations = await storage.getWorkspaceChatHistory(workspaceId, 20);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  // Get all conversations for a workspace\n  app.get('/api/workspaces/:id/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const userId = req.user?.id || req.user?.claims?.sub || req.user?.sub || req.user?.userId;\n      const conversations = await storage.getWorkspaceConversations(workspaceId, userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // Get messages for a specific conversation\n  app.get('/api/workspaces/:id/conversations/:conversationId/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const { conversationId } = req.params;\n      const messages = await storage.getConversationMessages(workspaceId, conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching conversation messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversation messages\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const userId = req.user?.id || req.user?.claims?.sub || req.user?.sub || req.user?.userId;\n      \n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n      \n      const { message, conversationId } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Generate conversation ID if not provided (new conversation)\n      const finalConversationId = conversationId || `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Get context for AI including user-specific data\n      const [tasks, projects, categories, user, userTasks, userActivity] = await Promise.all([\n        storage.getWorkspaceTasks(workspaceId),\n        storage.getWorkspaceProjects(workspaceId),\n        storage.getWorkspaceCategories(workspaceId),\n        storage.getUser(userId),\n        storage.getUserTasks(userId, workspaceId),\n        buildActivityContext(userId, workspaceId),\n      ]);\n\n      // Process AI query with enhanced user context\n      const response = await processAIQuery(message, {\n        workspaceId,\n        userId,\n        user: {\n          id: userId,\n          name: user?.firstName || user?.lastName ? `${user.firstName} ${user.lastName}`.trim() : user?.email?.split('@')[0] || 'User',\n          email: user?.email || undefined,\n        },\n        recentTasks: tasks.slice(0, 10),\n        userTasks: userTasks.slice(0, 10), // User's specific tasks\n        projects,\n        categories,\n        recentActivity: userActivity,\n      });\n\n      // Save conversation\n      const conversationData = insertChatConversationSchema.parse({\n        workspaceId,\n        userId,\n        conversationId: finalConversationId,\n        message,\n        response,\n      });\n\n      const conversation = await storage.createChatConversation(conversationData);\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Update conversation title\n  app.patch('/api/workspaces/:id/conversations/:conversationId', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const { conversationId } = req.params;\n      const { title } = req.body;\n\n      if (!title || typeof title !== 'string') {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      await storage.updateConversationTitle(workspaceId, conversationId, title);\n      res.json({ message: \"Conversation title updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating conversation title:\", error);\n      res.status(500).json({ message: \"Failed to update conversation title\" });\n    }\n  });\n\n  // Delete conversation\n  app.delete('/api/workspaces/:id/conversations/:conversationId', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const { conversationId } = req.params;\n\n      await storage.deleteConversation(workspaceId, conversationId);\n      res.json({ message: \"Conversation deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ message: \"Failed to delete conversation\" });\n    }\n  });\n\n  // AI Task suggestions\n  app.post('/api/projects/:id/ai-suggestions', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const project = await storage.getProjectById(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const existingTasks = await storage.getProjectTasks(projectId);\n      \n      const suggestions = await generateTaskSuggestions({\n        projectName: project.name,\n        existingTasks,\n        budget: project.budget ? parseFloat(project.budget) : undefined,\n      });\n\n      res.json({ suggestions });\n    } catch (error) {\n      console.error(\"Error generating task suggestions:\", error);\n      res.status(500).json({ message: \"Failed to generate task suggestions\" });\n    }\n  });\n\n  // AI Project insights\n  app.get('/api/projects/:id/insights', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.id);\n      const project = await storage.getProjectById(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      const tasks = await storage.getProjectTasks(projectId);\n      \n      const insights = await generateProjectInsights({\n        name: project.name,\n        tasks,\n        budget: project.budget ? parseFloat(project.budget) : undefined,\n        spent: project.spent ? parseFloat(project.spent) : undefined,\n      });\n\n      res.json({ insights });\n    } catch (error) {\n      console.error(\"Error generating project insights:\", error);\n      res.status(500).json({ message: \"Failed to generate project insights\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/workspaces/:id/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const notifications = await storage.getUserNotifications(req.user.id, workspaceId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get('/api/workspaces/:id/notifications/unread-count', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      const count = await storage.getUnreadNotificationCount(req.user.id, workspaceId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread notification count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread notification count\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const notificationId = parseInt(req.params.id);\n      await storage.markNotificationAsRead(notificationId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch('/api/workspaces/:id/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.id);\n      await storage.markAllNotificationsAsRead(req.user.id, workspaceId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Task comment routes\n  app.get('/api/tasks/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      const comments = await storage.getTaskComments(taskId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching task comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch task comments\" });\n    }\n  });\n\n  app.post('/api/tasks/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const taskId = parseInt(req.params.id);\n      const { comment, workspaceId, taggedUserIds = [] } = req.body || {};\n      \n      // Fix user ID retrieval - handle different user object structures\n      const userId = req.user?.id || req.user?.claims?.sub || req.user?.sub || req.user?.userId;\n      \n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n      \n      const commentData = {\n        taskId,\n        userId: userId,\n        workspaceId: parseInt(workspaceId),\n        comment: String(comment || '').trim(),\n      };\n      \n      if (!commentData.comment) {\n        return res.status(400).json({ message: 'Comment text is required' });\n      }\n      \n      if (!commentData.workspaceId) {\n        return res.status(400).json({ message: 'Workspace ID is required' });\n      }\n      \n      const newComment = await storage.createTaskComment(commentData);\n      \n      // Get task details for notification\n      const task = await storage.getTaskById(taskId);\n      if (task && task.projectId) {\n        let usersToNotify = [];\n        \n        // If there are tagged users, notify only them (and workspace owner for oversight)\n        if (taggedUserIds && taggedUserIds.length > 0) {\n          const workspace = await storage.getWorkspaceById(workspaceId);\n          const workspaceMembers = await storage.getWorkspaceMembers(workspaceId);\n          \n          for (const taggedUserId of taggedUserIds) {\n            const member = workspaceMembers.find(m => m.userId === taggedUserId);\n            if (member && member.userId !== userId) {\n              const user = await storage.getUser(member.userId);\n              if (user) {\n                usersToNotify.push({ member, user });\n              }\n            }\n          }\n          \n          // Always include workspace owner for oversight (if not already included)\n          if (workspace && workspace.ownerId !== userId) {\n            const ownerMember = workspaceMembers.find(m => m.userId === workspace.ownerId);\n            if (ownerMember && !usersToNotify.find(u => u.member.userId === workspace.ownerId)) {\n              const ownerUser = await storage.getUser(workspace.ownerId);\n              if (ownerUser) {\n                usersToNotify.push({ member: ownerMember, user: ownerUser });\n              }\n            }\n          }\n        } else {\n          // No tagged users - fall back to existing project-involved users workflow\n          usersToNotify = await getProjectInvolvedUsers(task.projectId, workspaceId);\n        }\n        \n        // Send notifications to determined users\n        for (const { member, user } of usersToNotify) {\n          if (member.userId && member.userId !== userId) {\n            await createTaskNotification({\n              type: 'comment_added',\n              userId: member.userId,\n              workspaceId: workspaceId,\n              taskId: taskId,\n              title: 'New Comment on Task',\n              message: `${req.user.firstName || 'Someone'} added a comment to task: ${task.title}`,\n              assignedUser: user,\n              task,\n              commenterName: req.user.firstName || req.user.email?.split('@')[0] || 'Someone',\n              commentText: comment\n            });\n          }\n        }\n      }\n      \n      res.json(newComment);\n    } catch (error) {\n      console.error(\"Error creating task comment:\", error);\n      res.status(500).json({ message: \"Failed to create task comment\" });\n    }\n  });\n\n  app.delete('/api/comments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const commentId = parseInt(req.params.id);\n      await storage.deleteTaskComment(commentId);\n      res.json({ message: \"Comment deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      res.status(500).json({ message: \"Failed to delete comment\" });\n    }\n  });\n\n  // File Management API endpoints for Vault\n  app.get('/api/workspaces/:workspaceId/files', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const files = await storage.getWorkspaceFiles(workspaceId);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error fetching workspace files:\", error);\n      res.status(500).json({ message: \"Failed to fetch files\" });\n    }\n  });\n\n  app.get('/api/workspaces/:workspaceId/files/recent', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const files = await storage.getWorkspaceFiles(workspaceId);\n      // Return the 10 most recently created files\n      const recentFiles = files\n        .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n        .slice(0, 10);\n      res.json(recentFiles);\n    } catch (error) {\n      console.error(\"Error fetching recent files:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent files\" });\n    }\n  });\n\n  app.get('/api/projects/:projectId/files', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const files = await storage.getProjectFiles(projectId);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error fetching project files:\", error);\n      res.status(500).json({ message: \"Failed to fetch project files\" });\n    }\n  });\n\n  app.post('/api/workspaces/:workspaceId/files/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const { projectId, parentId } = req.body;\n      \n      // For now, we'll simulate file upload by creating file records\n      // In a real implementation, you'd handle actual file uploads to cloud storage\n      const file = req.file || req.files?.[0];\n      if (!file) {\n        return res.status(400).json({ message: \"No file provided\" });\n      }\n\n      const userId = req.user.claims?.sub || req.user.id;\n      const fileName = file.originalname || file.name;\n      \n      const fileData = {\n        name: fileName,\n        originalName: fileName,\n        mimeType: file.mimetype || 'application/octet-stream',\n        size: file.size || 0,\n        path: `/uploads/${workspaceId}/${Date.now()}-${fileName}`,\n        workspaceId,\n        projectId: projectId ? parseInt(projectId) : null,\n        uploadedBy: userId\n      };\n\n      const newFile = await storage.createFile(fileData);\n      res.json(newFile);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  app.post('/api/workspaces/:workspaceId/files/folder', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const { name, projectId, parentId } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: \"Folder name is required\" });\n      }\n\n      const userId = req.user.claims?.sub || req.user.id;\n      \n      const folderData = {\n        name,\n        originalName: name,\n        mimeType: 'application/folder',\n        size: 0,\n        path: `/${name}`,\n        workspaceId,\n        projectId: projectId ? parseInt(projectId) : null,\n        uploadedBy: userId\n      };\n\n      const newFolder = await storage.createFile(folderData);\n      res.json(newFolder);\n    } catch (error) {\n      console.error(\"Error creating folder:\", error);\n      res.status(500).json({ message: \"Failed to create folder\" });\n    }\n  });\n\n  app.delete('/api/workspaces/:workspaceId/files/:fileId', isAuthenticated, async (req: any, res) => {\n    try {\n      const fileId = parseInt(req.params.fileId);\n      await storage.deleteFile(fileId);\n      res.json({ message: \"File deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting file:\", error);\n      res.status(500).json({ message: \"Failed to delete file\" });\n    }\n  });\n\n  app.patch('/api/workspaces/:workspaceId/files/:fileId', isAuthenticated, async (req: any, res) => {\n    try {\n      const fileId = parseInt(req.params.fileId);\n      const { name } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: \"New name is required\" });\n      }\n\n      // For now, we'll implement a simple rename by updating the name field\n      // In a real implementation, you'd also update the file path and handle file system changes\n      const updatedFile = await storage.updateFile(fileId, { name });\n      res.json(updatedFile);\n    } catch (error) {\n      console.error(\"Error renaming file:\", error);\n      res.status(500).json({ message: \"Failed to rename file\" });\n    }\n  });\n\n  // Project Components API Routes\n  app.get('/api/projects/:projectId/components', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const components = await storage.getProjectComponents(projectId);\n      res.json(components);\n    } catch (error) {\n      console.error(\"Error fetching project components:\", error);\n      res.status(500).json({ message: \"Failed to fetch components\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/components', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const parsed = insertProjectComponentSchema.parse({ ...req.body, projectId });\n      const component = await storage.createProjectComponent(parsed);\n      res.json(component);\n    } catch (error) {\n      console.error(\"Error creating component:\", error);\n      res.status(400).json({ message: \"Failed to create component\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/components/:componentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const componentId = parseInt(req.params.componentId);\n      const updates = req.body;\n      const component = await storage.updateProjectComponent(componentId, updates);\n      res.json(component);\n    } catch (error) {\n      console.error(\"Error updating component:\", error);\n      res.status(400).json({ message: \"Failed to update component\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/components/:componentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const componentId = parseInt(req.params.componentId);\n      await storage.deleteProjectComponent(componentId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting component:\", error);\n      res.status(400).json({ message: \"Failed to delete component\" });\n    }\n  });\n\n  // Financial API Routes\n  // Budget Management\n  app.get('/api/projects/:projectId/budgets', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const budgets = await storage.getProjectBudgets(projectId);\n      res.json(budgets);\n    } catch (error) {\n      console.error(\"Error fetching project budgets:\", error);\n      res.status(500).json({ message: \"Failed to fetch budgets\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/budgets', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const parsed = insertProjectBudgetSchema.parse({ ...req.body, projectId });\n      const budget = await storage.createProjectBudget(parsed);\n      res.json(budget);\n    } catch (error) {\n      console.error(\"Error creating budget:\", error);\n      res.status(400).json({ message: \"Failed to create budget\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/budgets/:budgetId', isAuthenticated, async (req: any, res) => {\n    try {\n      const budgetId = parseInt(req.params.budgetId);\n      const updates = req.body;\n      const budget = await storage.updateProjectBudget(budgetId, updates);\n      res.json(budget);\n    } catch (error) {\n      console.error(\"Error updating budget:\", error);\n      res.status(400).json({ message: \"Failed to update budget\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/budgets/:budgetId', isAuthenticated, async (req: any, res) => {\n    try {\n      const budgetId = parseInt(req.params.budgetId);\n      await storage.deleteProjectBudget(budgetId);\n      res.json({ message: \"Budget deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting budget:\", error);\n      res.status(500).json({ message: \"Failed to delete budget\" });\n    }\n  });\n\n  // Expense Management\n  app.get('/api/projects/:projectId/expenses', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const expenses = await storage.getProjectExpenses(projectId);\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching project expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/expenses', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const userId = req.user.claims?.sub || req.user.id;\n      const parsed = insertProjectExpenseSchema.parse({ ...req.body, projectId, createdBy: userId });\n      const expense = await storage.createProjectExpense(parsed);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(400).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/expenses/:expenseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const expenseId = parseInt(req.params.expenseId);\n      const updates = req.body;\n      const expense = await storage.updateProjectExpense(expenseId, updates);\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      res.status(400).json({ message: \"Failed to update expense\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/expenses/:expenseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const expenseId = parseInt(req.params.expenseId);\n      await storage.deleteProjectExpense(expenseId);\n      res.json({ message: \"Expense deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  // Revenue Management\n  app.get('/api/projects/:projectId/revenue', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const revenue = await storage.getProjectRevenue(projectId);\n      res.json(revenue);\n    } catch (error) {\n      console.error(\"Error fetching project revenue:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/revenue', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const userId = req.user.claims?.sub || req.user.id;\n      const parsed = insertProjectRevenueSchema.parse({ ...req.body, projectId, createdBy: userId });\n      const revenue = await storage.createProjectRevenue(parsed);\n      res.json(revenue);\n    } catch (error) {\n      console.error(\"Error creating revenue:\", error);\n      res.status(400).json({ message: \"Failed to create revenue\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/revenue/:revenueId', isAuthenticated, async (req: any, res) => {\n    try {\n      const revenueId = parseInt(req.params.revenueId);\n      const updates = req.body;\n      const revenue = await storage.updateProjectRevenue(revenueId, updates);\n      res.json(revenue);\n    } catch (error) {\n      console.error(\"Error updating revenue:\", error);\n      res.status(400).json({ message: \"Failed to update revenue\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/revenue/:revenueId', isAuthenticated, async (req: any, res) => {\n    try {\n      const revenueId = parseInt(req.params.revenueId);\n      await storage.deleteProjectRevenue(revenueId);\n      res.json({ message: \"Revenue deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting revenue:\", error);\n      res.status(500).json({ message: \"Failed to delete revenue\" });\n    }\n  });\n\n  // Outflow Types API Routes\n  app.get('/api/projects/:projectId/outflow-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const outflowTypes = await storage.getProjectOutflowTypes(projectId);\n      res.json(outflowTypes);\n    } catch (error) {\n      console.error(\"Error fetching outflow types:\", error);\n      res.status(500).json({ message: \"Failed to fetch outflow types\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/outflow-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      // Get the project to retrieve workspaceId\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      const parsed = insertOutflowTypeSchema.parse({ ...req.body, projectId, workspaceId: project.workspaceId });\n      const outflowType = await storage.createOutflowType(parsed);\n      res.json(outflowType);\n    } catch (error) {\n      console.error(\"Error creating outflow type:\", error);\n      res.status(400).json({ message: \"Failed to create outflow type\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/outflow-types/:typeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const typeId = parseInt(req.params.typeId);\n      const updates = req.body;\n      const outflowType = await storage.updateOutflowType(typeId, updates);\n      res.json(outflowType);\n    } catch (error) {\n      console.error(\"Error updating outflow type:\", error);\n      res.status(400).json({ message: \"Failed to update outflow type\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/outflow-types/:typeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const typeId = parseInt(req.params.typeId);\n      await storage.deleteOutflowType(typeId);\n      res.json({ message: \"Outflow type deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting outflow type:\", error);\n      res.status(500).json({ message: \"Failed to delete outflow type\" });\n    }\n  });\n\n  // Inflow Types API Routes\n  app.get('/api/projects/:projectId/inflow-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      const inflowTypes = await storage.getProjectInflowTypes(projectId);\n      res.json(inflowTypes);\n    } catch (error) {\n      console.error(\"Error fetching inflow types:\", error);\n      res.status(500).json({ message: \"Failed to fetch inflow types\" });\n    }\n  });\n\n  app.post('/api/projects/:projectId/inflow-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const projectId = parseInt(req.params.projectId);\n      // Get the project to retrieve workspaceId\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      const parsed = insertInflowTypeSchema.parse({ ...req.body, projectId, workspaceId: project.workspaceId });\n      const inflowType = await storage.createInflowType(parsed);\n      res.json(inflowType);\n    } catch (error) {\n      console.error(\"Error creating inflow type:\", error);\n      res.status(400).json({ message: \"Failed to create inflow type\" });\n    }\n  });\n\n  app.patch('/api/projects/:projectId/inflow-types/:typeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const typeId = parseInt(req.params.typeId);\n      const updates = req.body;\n      const inflowType = await storage.updateInflowType(typeId, updates);\n      res.json(inflowType);\n    } catch (error) {\n      console.error(\"Error updating inflow type:\", error);\n      res.status(400).json({ message: \"Failed to update inflow type\" });\n    }\n  });\n\n  app.delete('/api/projects/:projectId/inflow-types/:typeId', isAuthenticated, async (req: any, res) => {\n    try {\n      const typeId = parseInt(req.params.typeId);\n      await storage.deleteInflowType(typeId);\n      res.json({ message: \"Inflow type deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting inflow type:\", error);\n      res.status(500).json({ message: \"Failed to delete inflow type\" });\n    }\n  });\n\n  // Seed default types for existing workspace\n  app.post('/api/workspaces/:workspaceId/seed-default-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      await storage.seedDefaultTypesForWorkspace(workspaceId);\n      res.json({ message: \"Default types seeded successfully\" });\n    } catch (error) {\n      console.error(\"Error seeding default types:\", error);\n      res.status(500).json({ message: \"Failed to seed default types\" });\n    }\n  });\n\n  // Personalized AI insights endpoint\n  app.get('/api/ai/personalized-insights', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = req.query.workspaceId ? parseInt(req.query.workspaceId as string) : null;\n      \n      if (!workspaceId || isNaN(workspaceId)) {\n        return res.status(400).json({ error: 'Workspace ID is required' });\n      }\n\n      const { generatePersonalizedInsights } = await import(\"./openai\");\n      \n      // Simplified access check - if user is authenticated and workspace exists, allow access\n      const workspace = await storage.getWorkspaceById(workspaceId);\n      if (!workspace) {\n        return res.status(404).json({ error: 'Workspace not found' });\n      }\n\n      // Get workspace data for context\n      const allTasks = await storage.getWorkspaceTasks(workspaceId);\n      const allMembers = await storage.getWorkspaceMembers(workspaceId);\n      \n      const userMember = allMembers.find((m: any) => m.userId === req.user.id);\n\n      const userTasks = userMember ? allTasks.filter((task: any) => task.assignedMemberId === userMember.id) : [];\n      const projects = await storage.getWorkspaceProjects(workspaceId);\n      const categories = await storage.getWorkspaceCategories(workspaceId);\n      \n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const context = {\n        workspaceId,\n        userId: userId,\n        user: {\n          id: userId,\n          name: user?.firstName || user?.email?.split('@')[0] || 'User',\n          email: user?.email || undefined\n        },\n        userTasks,\n        projects,\n        categories\n      };\n\n      const insights = await generatePersonalizedInsights(context);\n      \n      res.json(insights);\n    } catch (error) {\n      console.error('AI personalized insights error:', error);\n      res.status(500).json({ error: 'Failed to generate personalized insights' });\n    }\n  });\n\n  // Activity tracking API routes\n  app.get('/api/workspaces/:workspaceId/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const workspaceId = parseInt(req.params.workspaceId);\n      const limit = parseInt(req.query.limit) || 50;\n      \n      const activities = await storage.getWorkspaceActivities(workspaceId, limit);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching workspace activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  app.get('/api/users/:userId/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.params.userId;\n      const limit = parseInt(req.query.limit) || 50;\n      const hours = parseInt(req.query.hours) || 24;\n      \n      // Only allow users to access their own activities or if they're workspace admin\n      if (req.user.id !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const activities = req.query.recent === 'true' \n        ? await storage.getRecentUserActivities(userId, hours)\n        : await storage.getUserActivities(userId, limit);\n        \n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching user activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Global Search Endpoint\n  app.get('/api/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const { workspaceId, q: searchQuery } = req.query;\n      \n      if (!workspaceId || !searchQuery || searchQuery.length < 2) {\n        return res.json({ tasks: [], projects: [], members: [], categories: [] });\n      }\n\n      const query = searchQuery.toLowerCase().trim();\n      \n      // Search tasks\n      const allTasks = await storage.getWorkspaceTasks(parseInt(workspaceId));\n      const tasks = allTasks.filter(task => \n        task.title.toLowerCase().includes(query) ||\n        (task.description && task.description.toLowerCase().includes(query))\n      ).slice(0, 10); // Limit to 10 results\n\n      // Search projects\n      const allProjects = await storage.getWorkspaceProjects(parseInt(workspaceId));\n      const projects = allProjects.filter(project =>\n        project.name.toLowerCase().includes(query) ||\n        (project.description && project.description.toLowerCase().includes(query))\n      ).slice(0, 10);\n\n      // Search members\n      const allMembers = await storage.getWorkspaceMembers(parseInt(workspaceId));\n      const members = allMembers.filter(member => {\n        const name = (member.name || '').toLowerCase();\n        const email = (member.email || '').toLowerCase();\n        \n        return name.includes(query) || email.includes(query);\n      }).slice(0, 10);\n\n      // Search categories\n      const allCategories = await storage.getWorkspaceCategories(parseInt(workspaceId));\n      const categories = allCategories.filter(category =>\n        category.name.toLowerCase().includes(query)\n      ).slice(0, 10);\n\n      res.json({\n        tasks,\n        projects,\n        members,\n        categories\n      });\n    } catch (error) {\n      console.error(\"Error performing global search:\", error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":68785},"server/storage.ts":{"content":"import {\n  users,\n  workspaces,\n  workspaceMembers,\n  workspaceInvitations,\n  projects,\n  categories,\n  tasks,\n  taskRecurrences,\n  projectPages,\n  brainDumpItems,\n  files,\n  chatConversations,\n  notifications,\n  taskComments,\n  projectComponents,\n  projectBudgets,\n  projectExpenses,\n  projectRevenue,\n  inflowTypes,\n  outflowTypes,\n  projectInflows,\n  projectOutflows,\n  activityLogs,\n\n  type User,\n  type UpsertUser,\n  type Workspace,\n  type InsertWorkspace,\n  type WorkspaceMember,\n  type InsertWorkspaceMember,\n  type Project,\n  type InsertProject,\n  type Category,\n  type InsertCategory,\n  type Task,\n  type InsertTask,\n  type TaskRecurrence,\n  type InsertTaskRecurrence,\n  type ProjectPage,\n  type InsertProjectPage,\n  type BrainDumpItem,\n  type InsertBrainDumpItem,\n  type File,\n  type InsertFile,\n  type ChatConversation,\n  type InsertChatConversation,\n  type WorkspaceInvitation,\n  type InsertWorkspaceInvitation,\n  type Notification,\n  type InsertNotification,\n  type TaskComment,\n  type InsertTaskComment,\n  type ProjectComponent,\n  type InsertProjectComponent,\n  type ProjectBudget,\n  type InsertProjectBudget,\n  type ProjectExpense,\n  type InsertProjectExpense,\n  type ProjectRevenue,\n  type InsertProjectRevenue,\n  type InflowType,\n  type InsertInflowType,\n  type OutflowType,\n  type InsertOutflowType,\n  type ProjectInflow,\n  type InsertProjectInflow,\n  type ProjectOutflow,\n  type InsertProjectOutflow,\n  type ActivityLog,\n  type InsertActivityLog,\n\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, gte, lte, count, sql, not } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  ensureUserSetup(userId: string): Promise<{ workspace: Workspace; project: Project }>;\n\n  // Workspace operations\n  getUserWorkspaces(userId: string): Promise<Workspace[]>;\n  getWorkspaceById(id: number): Promise<Workspace | undefined>;\n  createWorkspace(workspace: InsertWorkspace): Promise<Workspace>;\n  getWorkspaceMembers(workspaceId: number): Promise<WorkspaceMember[]>;\n  addWorkspaceMember(member: InsertWorkspaceMember): Promise<WorkspaceMember>;\n  updateWorkspaceMember(id: number, updates: Partial<InsertWorkspaceMember>): Promise<WorkspaceMember>;\n  removeWorkspaceMember(id: number): Promise<void>;\n\n  // Project operations\n  getWorkspaceProjects(workspaceId: number): Promise<Project[]>;\n  getProjectById(id: number): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: number, updates: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: number): Promise<void>;\n\n  // Category operations\n  getWorkspaceCategories(workspaceId: number): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, updates: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: number): Promise<void>;\n\n  // Task operations\n  getWorkspaceTasks(workspaceId: number): Promise<Task[]>;\n  getProjectTasks(projectId: number): Promise<Task[]>;\n  getUserTasks(userId: string, workspaceId: number): Promise<Task[]>;\n  getTaskById(id: number): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: number, updates: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: number): Promise<void>;\n  getDueTodayTasks(workspaceId: number): Promise<Task[]>;\n\n  // Project pages operations\n  getProjectPages(projectId: number): Promise<ProjectPage[]>;\n  createProjectPage(page: InsertProjectPage): Promise<ProjectPage>;\n  updateProjectPage(id: number, updates: Partial<InsertProjectPage>): Promise<ProjectPage>;\n  deleteProjectPage(id: number): Promise<void>;\n\n  // Brain dump operations\n  getUserBrainDumpItems(workspaceId: number, userId: string): Promise<BrainDumpItem[]>;\n  createBrainDumpItem(item: InsertBrainDumpItem): Promise<BrainDumpItem>;\n  deleteBrainDumpItem(id: number): Promise<void>;\n  clearUserBrainDump(workspaceId: number, userId: string): Promise<void>;\n\n  // File operations\n  getWorkspaceFiles(workspaceId: number): Promise<File[]>;\n  getProjectFiles(projectId: number): Promise<File[]>;\n  createFile(file: InsertFile): Promise<File>;\n  updateFile(id: number, updates: Partial<InsertFile>): Promise<File>;\n  deleteFile(id: number): Promise<void>;\n\n  // Chat operations\n  getWorkspaceChatHistory(workspaceId: number, limit?: number): Promise<ChatConversation[]>;\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n\n  // Invitation operations\n  createWorkspaceInvitation(invitation: InsertWorkspaceInvitation): Promise<WorkspaceInvitation>;\n  getWorkspaceInvitations(workspaceId: number): Promise<WorkspaceInvitation[]>;\n  getInvitationById(id: number): Promise<WorkspaceInvitation | undefined>;\n  getPendingInvitations(email: string): Promise<WorkspaceInvitation[]>;\n  acceptInvitation(invitationId: number, userId: string): Promise<void>;\n\n  // Notification operations\n  getUserNotifications(userId: string, workspaceId: number): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: number): Promise<void>;\n  markAllNotificationsAsRead(userId: string, workspaceId: number): Promise<void>;\n  getUnreadNotificationCount(userId: string, workspaceId: number): Promise<number>;\n\n  // Task comment operations\n  getTaskComments(taskId: number): Promise<TaskComment[]>;\n  createTaskComment(comment: InsertTaskComment): Promise<TaskComment>;\n  deleteTaskComment(id: number): Promise<void>;\n\n  // Task recurrence operations\n  createTaskRecurrence(recurrence: InsertTaskRecurrence): Promise<TaskRecurrence>;\n  getTaskRecurrence(id: number): Promise<TaskRecurrence | undefined>;\n  updateTaskRecurrence(id: number, updates: Partial<InsertTaskRecurrence>): Promise<TaskRecurrence>;\n  deleteTaskRecurrence(id: number): Promise<void>;\n  deleteRecurringTaskInstances(recurrenceId: number, fromDate?: Date): Promise<void>;\n\n  // Project component operations\n  getProjectComponents(projectId: number): Promise<ProjectComponent[]>;\n  createProjectComponent(component: InsertProjectComponent): Promise<ProjectComponent>;\n  updateProjectComponent(id: number, updates: Partial<InsertProjectComponent>): Promise<ProjectComponent>;\n  deleteProjectComponent(id: number): Promise<void>;\n\n  // Inflow/Outflow Type operations\n  getProjectInflowTypes(projectId: number): Promise<InflowType[]>;\n  createInflowType(inflowType: InsertInflowType): Promise<InflowType>;\n  updateInflowType(id: number, updates: Partial<InsertInflowType>): Promise<InflowType>;\n  deleteInflowType(id: number): Promise<void>;\n\n  getProjectOutflowTypes(projectId: number): Promise<OutflowType[]>;\n  createOutflowType(outflowType: InsertOutflowType): Promise<OutflowType>;\n  updateOutflowType(id: number, updates: Partial<InsertOutflowType>): Promise<OutflowType>;\n  deleteOutflowType(id: number): Promise<void>;\n\n  // Financial operations\n  getProjectBudgets(projectId: number): Promise<ProjectBudget[]>;\n  createProjectBudget(budget: InsertProjectBudget): Promise<ProjectBudget>;\n  updateProjectBudget(id: number, updates: Partial<InsertProjectBudget>): Promise<ProjectBudget>;\n  deleteProjectBudget(id: number): Promise<void>;\n\n  getProjectInflows(projectId: number): Promise<ProjectInflow[]>;\n  createProjectInflow(inflow: InsertProjectInflow): Promise<ProjectInflow>;\n  updateProjectInflow(id: number, updates: Partial<InsertProjectInflow>): Promise<ProjectInflow>;\n  deleteProjectInflow(id: number): Promise<void>;\n\n  getProjectOutflows(projectId: number): Promise<ProjectOutflow[]>;\n  createProjectOutflow(outflow: InsertProjectOutflow): Promise<ProjectOutflow>;\n  updateProjectOutflow(id: number, updates: Partial<InsertProjectOutflow>): Promise<ProjectOutflow>;\n  deleteProjectOutflow(id: number): Promise<void>;\n\n  // Legacy methods for backward compatibility\n  getProjectExpenses(projectId: number): Promise<ProjectExpense[]>;\n  createProjectExpense(expense: InsertProjectExpense): Promise<ProjectExpense>;\n  updateProjectExpense(id: number, updates: Partial<InsertProjectExpense>): Promise<ProjectExpense>;\n  deleteProjectExpense(id: number): Promise<void>;\n\n  getProjectRevenue(projectId: number): Promise<ProjectRevenue[]>;\n  createProjectRevenue(revenue: InsertProjectRevenue): Promise<ProjectRevenue>;\n  updateProjectRevenue(id: number, updates: Partial<InsertProjectRevenue>): Promise<ProjectRevenue>;\n  deleteProjectRevenue(id: number): Promise<void>;\n\n  // Activity tracking operations\n  logActivity(activity: InsertActivityLog): Promise<ActivityLog>;\n  getUserActivities(userId: string, limit?: number): Promise<ActivityLog[]>;\n  getWorkspaceActivities(workspaceId: number, limit?: number): Promise<ActivityLog[]>;\n  getRecentUserActivities(userId: string, hours?: number): Promise<ActivityLog[]>;\n\n  // Seeding operations\n  seedDefaultTypesForProject(projectId: number, workspaceId: number): Promise<void>;\n\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    try {\n      console.log('Database upsertUser called with:', userData);\n      \n      // First try to find existing user by email\n      if (userData.email) {\n        const existingByEmail = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, userData.email))\n          .limit(1);\n        \n        if (existingByEmail.length > 0) {\n          console.log('Found existing user by email, updating:', existingByEmail[0].id);\n          // Update existing user found by email\n          const [updatedUser] = await db\n            .update(users)\n            .set({\n              ...userData,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.id, existingByEmail[0].id))\n            .returning();\n          console.log('Database upsertUser successful (updated by email):', updatedUser);\n          return updatedUser;\n        }\n      }\n      \n      // If no existing user by email, try regular upsert by ID\n      const [user] = await db\n        .insert(users)\n        .values(userData)\n        .onConflictDoUpdate({\n          target: users.id,\n          set: {\n            ...userData,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      console.log('Database upsertUser successful (new or updated by ID):', user);\n      return user;\n    } catch (error) {\n      console.error('Database upsertUser failed:', error);\n      console.error('User data that failed:', userData);\n      throw error;\n    }\n  }\n\n  async ensureUserSetup(userId: string): Promise<{ workspace: Workspace; project: Project }> {\n    // Check if user already has a personal workspace\n    const existingWorkspaces = await this.getUserWorkspaces(userId);\n    let personalWorkspace = existingWorkspaces.find(w => w.type === 'personal');\n\n    if (!personalWorkspace) {\n      // Create personal workspace\n      personalWorkspace = await this.createWorkspace({\n        name: 'My Personal Workspace',\n        type: 'personal',\n        ownerId: userId,\n      });\n\n      // Get user details for proper name display\n      const user = await this.getUser(userId);\n      const userName = user?.firstName && user?.lastName \n        ? `${user.firstName} ${user.lastName}`\n        : user?.email || 'Owner';\n\n      // Add user as workspace member\n      await this.addWorkspaceMember({\n        workspaceId: personalWorkspace.id,\n        userId: userId,\n        name: userName,\n        role: 'owner',\n        memberType: 'user',\n      });\n    }\n\n    // Check if workspace has a default project\n    const existingProjects = await this.getWorkspaceProjects(personalWorkspace.id);\n    let defaultProject = existingProjects.find(p => p.name === 'Default Project');\n\n    if (!defaultProject) {\n      // Create default project\n      defaultProject = await this.createProject({\n        name: 'Default Project',\n        description: 'Your default project for organizing tasks',\n        workspaceId: personalWorkspace.id,\n        status: 'active',\n      });\n    }\n\n    return { workspace: personalWorkspace, project: defaultProject };\n  }\n\n  // Workspace operations\n  async getUserWorkspaces(userId: string): Promise<Workspace[]> {\n    // Get workspaces owned by user and workspaces where user is a member\n    const ownedWorkspaces = await db\n      .select()\n      .from(workspaces)\n      .where(eq(workspaces.ownerId, userId));\n\n    const memberWorkspaces = await db\n      .select({\n        id: workspaces.id,\n        name: workspaces.name,\n        type: workspaces.type,\n        ownerId: workspaces.ownerId,\n        createdAt: workspaces.createdAt,\n        updatedAt: workspaces.updatedAt,\n      })\n      .from(workspaces)\n      .innerJoin(workspaceMembers, eq(workspaces.id, workspaceMembers.workspaceId))\n      .where(and(\n        eq(workspaceMembers.userId, userId),\n        eq(workspaceMembers.isActive, true)\n      ));\n\n    // Combine and deduplicate\n    const allWorkspaces = [...ownedWorkspaces, ...memberWorkspaces];\n    const uniqueWorkspaces = allWorkspaces.filter((workspace, index, self) => \n      index === self.findIndex(w => w.id === workspace.id)\n    );\n\n    return uniqueWorkspaces;\n  }\n\n  async getWorkspaceById(id: number): Promise<Workspace | undefined> {\n    const [workspace] = await db.select().from(workspaces).where(eq(workspaces.id, id));\n    return workspace;\n  }\n\n  async createWorkspace(workspace: InsertWorkspace): Promise<Workspace> {\n    const [newWorkspace] = await db.insert(workspaces).values(workspace).returning();\n    return newWorkspace;\n  }\n\n  async getWorkspaceMembers(workspaceId: number): Promise<WorkspaceMember[]> {\n    const result = await db\n      .select({\n        id: workspaceMembers.id,\n        workspaceId: workspaceMembers.workspaceId,\n        userId: workspaceMembers.userId,\n        memberType: workspaceMembers.memberType,\n        name: workspaceMembers.name,\n        role: workspaceMembers.role,\n        alias: workspaceMembers.alias,\n        systemPrompt: workspaceMembers.systemPrompt,\n        isActive: workspaceMembers.isActive,\n        createdAt: workspaceMembers.createdAt,\n        updatedAt: workspaceMembers.updatedAt,\n        user: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n      })\n      .from(workspaceMembers)\n      .leftJoin(users, eq(workspaceMembers.userId, users.id))\n      .where(and(eq(workspaceMembers.workspaceId, workspaceId), eq(workspaceMembers.isActive, true)))\n      .orderBy(asc(workspaceMembers.name));\n    \n    // Transform the result to match WorkspaceMember interface\n    return result.map(member => ({\n      id: member.id,\n      workspaceId: member.workspaceId,\n      userId: member.userId,\n      memberType: member.memberType,\n      name: member.name,\n      role: member.role,\n      alias: member.alias,\n      systemPrompt: member.systemPrompt,\n      isActive: member.isActive,\n      createdAt: member.createdAt,\n      updatedAt: member.updatedAt,\n      email: member.user?.email || null, // computed from user relation\n    }));\n  }\n\n  async addWorkspaceMember(member: InsertWorkspaceMember): Promise<WorkspaceMember> {\n    const [newMember] = await db.insert(workspaceMembers).values(member).returning();\n    return newMember;\n  }\n\n  async updateWorkspaceMember(id: number, updates: Partial<InsertWorkspaceMember>): Promise<WorkspaceMember> {\n    const [updatedMember] = await db\n      .update(workspaceMembers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(workspaceMembers.id, id))\n      .returning();\n    return updatedMember;\n  }\n\n  async removeWorkspaceMember(id: number): Promise<void> {\n    await db.update(workspaceMembers)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(workspaceMembers.id, id));\n  }\n\n  // Project operations\n  async getWorkspaceProjects(workspaceId: number): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.workspaceId, workspaceId))\n      .orderBy(desc(projects.updatedAt));\n  }\n\n  async getProjectById(id: number): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async updateProject(id: number, updates: Partial<InsertProject>): Promise<Project> {\n    const [updatedProject] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return updatedProject;\n  }\n\n  async deleteProject(id: number): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Category operations\n  async getWorkspaceCategories(workspaceId: number): Promise<Category[]> {\n    return await db\n      .select()\n      .from(categories)\n      .where(eq(categories.workspaceId, workspaceId))\n      .orderBy(asc(categories.name));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: number, updates: Partial<InsertCategory>): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(updates)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Task operations\n  async getWorkspaceTasks(workspaceId: number): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.workspaceId, workspaceId))\n      .orderBy(desc(tasks.updatedAt));\n  }\n\n  async getProjectTasks(projectId: number): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.projectId, projectId))\n      .orderBy(desc(tasks.updatedAt));\n  }\n\n  async getUserTasks(userId: string, workspaceId: number): Promise<Task[]> {\n    // First, get the workspace member ID for this user\n    const [member] = await db\n      .select({ id: workspaceMembers.id })\n      .from(workspaceMembers)\n      .where(and(\n        eq(workspaceMembers.userId, userId),\n        eq(workspaceMembers.workspaceId, workspaceId),\n        eq(workspaceMembers.isActive, true)\n      ));\n\n    if (!member) {\n      return []; // User is not a member of this workspace\n    }\n\n    // Now get tasks assigned to this member\n    return await db\n      .select()\n      .from(tasks)\n      .where(and(\n        eq(tasks.assignedMemberId, member.id),\n        eq(tasks.workspaceId, workspaceId)\n      ))\n      .orderBy(desc(tasks.updatedAt));\n  }\n\n  async getTaskById(id: number): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    return newTask;\n  }\n\n  async updateTask(id: number, updates: Partial<InsertTask>): Promise<Task> {\n    const [updatedTask] = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return updatedTask;\n  }\n\n  async deleteTask(id: number): Promise<void> {\n    // Delete related notifications first to avoid foreign key constraint violations\n    await db.delete(notifications).where(eq(notifications.taskId, id));\n    \n    // Delete related task comments\n    await db.delete(taskComments).where(eq(taskComments.taskId, id));\n    \n    // Delete the task\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  async getTasksByRecurrenceId(recurrenceId: number): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.taskRecurrenceId, recurrenceId));\n  }\n\n  async getDueTodayTasks(workspaceId: number): Promise<Task[]> {\n    const today = new Date().toISOString().split('T')[0];\n    return await db\n      .select()\n      .from(tasks)\n      .where(and(\n        eq(tasks.workspaceId, workspaceId),\n        eq(tasks.dueDate, today),\n        eq(tasks.status, 'todo')\n      ))\n      .orderBy(asc(tasks.dueTime));\n  }\n\n  // Project pages operations\n  async getProjectPages(projectId: number): Promise<ProjectPage[]> {\n    return await db\n      .select()\n      .from(projectPages)\n      .where(eq(projectPages.projectId, projectId))\n      .orderBy(asc(projectPages.title));\n  }\n\n  async createProjectPage(page: InsertProjectPage): Promise<ProjectPage> {\n    const [newPage] = await db.insert(projectPages).values(page).returning();\n    return newPage;\n  }\n\n  async updateProjectPage(id: number, updates: Partial<InsertProjectPage>): Promise<ProjectPage> {\n    const [updatedPage] = await db\n      .update(projectPages)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projectPages.id, id))\n      .returning();\n    return updatedPage;\n  }\n\n  async deleteProjectPage(id: number): Promise<void> {\n    await db.delete(projectPages).where(eq(projectPages.id, id));\n  }\n\n  // Brain dump operations\n  async getUserBrainDumpItems(workspaceId: number, userId: string): Promise<BrainDumpItem[]> {\n    return await db\n      .select()\n      .from(brainDumpItems)\n      .where(and(\n        eq(brainDumpItems.workspaceId, workspaceId),\n        eq(brainDumpItems.userId, userId)\n      ))\n      .orderBy(desc(brainDumpItems.createdAt));\n  }\n\n  async createBrainDumpItem(item: InsertBrainDumpItem): Promise<BrainDumpItem> {\n    const [newItem] = await db.insert(brainDumpItems).values(item).returning();\n    return newItem;\n  }\n\n  async deleteBrainDumpItem(id: number): Promise<void> {\n    await db.delete(brainDumpItems).where(eq(brainDumpItems.id, id));\n  }\n\n  async clearUserBrainDump(workspaceId: number, userId: string): Promise<void> {\n    await db.delete(brainDumpItems).where(and(\n      eq(brainDumpItems.workspaceId, workspaceId),\n      eq(brainDumpItems.userId, userId)\n    ));\n  }\n\n  // File operations\n  async getWorkspaceFiles(workspaceId: number): Promise<File[]> {\n    return await db\n      .select()\n      .from(files)\n      .where(eq(files.workspaceId, workspaceId))\n      .orderBy(desc(files.createdAt));\n  }\n\n  async getProjectFiles(projectId: number): Promise<File[]> {\n    return await db\n      .select()\n      .from(files)\n      .where(eq(files.projectId, projectId))\n      .orderBy(desc(files.createdAt));\n  }\n\n  async createFile(file: InsertFile): Promise<File> {\n    const [newFile] = await db.insert(files).values(file).returning();\n    return newFile;\n  }\n\n  async updateFile(id: number, updates: Partial<InsertFile>): Promise<File> {\n    const [updatedFile] = await db\n      .update(files)\n      .set(updates)\n      .where(eq(files.id, id))\n      .returning();\n    return updatedFile;\n  }\n\n  async deleteFile(id: number): Promise<void> {\n    await db.delete(files).where(eq(files.id, id));\n  }\n\n  // Chat operations - enhanced with conversation threads\n  async getWorkspaceChatHistory(workspaceId: number, limit: number = 50): Promise<ChatConversation[]> {\n    return await db\n      .select()\n      .from(chatConversations)\n      .where(eq(chatConversations.workspaceId, workspaceId))\n      .orderBy(desc(chatConversations.createdAt))\n      .limit(limit);\n  }\n\n  async getConversationMessages(workspaceId: number, conversationId: string): Promise<ChatConversation[]> {\n    return await db\n      .select()\n      .from(chatConversations)\n      .where(\n        and(\n          eq(chatConversations.workspaceId, workspaceId),\n          eq(chatConversations.conversationId, conversationId)\n        )\n      )\n      .orderBy(chatConversations.createdAt);\n  }\n\n  async getWorkspaceConversations(workspaceId: number, userId: string): Promise<{\n    conversationId: string;\n    title: string | null;\n    lastMessage: string;\n    lastActivity: Date;\n    messageCount: number;\n  }[]> {\n    const conversations = await db\n      .select({\n        conversationId: chatConversations.conversationId,\n        title: chatConversations.title,\n        message: chatConversations.message,\n        createdAt: chatConversations.createdAt,\n      })\n      .from(chatConversations)\n      .where(\n        and(\n          eq(chatConversations.workspaceId, workspaceId),\n          eq(chatConversations.userId, userId)\n        )\n      )\n      .orderBy(desc(chatConversations.createdAt));\n\n    // Group by conversationId and get summary info\n    const conversationMap = new Map();\n    \n    conversations.forEach(conv => {\n      if (!conversationMap.has(conv.conversationId)) {\n        conversationMap.set(conv.conversationId, {\n          conversationId: conv.conversationId,\n          title: conv.title || this.generateConversationTitle(conv.message),\n          lastMessage: conv.message,\n          lastActivity: conv.createdAt,\n          messageCount: 1\n        });\n      } else {\n        const existing = conversationMap.get(conv.conversationId);\n        existing.messageCount += 1;\n        if (conv.createdAt > existing.lastActivity) {\n          existing.lastActivity = conv.createdAt;\n          existing.lastMessage = conv.message;\n        }\n      }\n    });\n\n    return Array.from(conversationMap.values())\n      .sort((a, b) => new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime());\n  }\n\n  private generateConversationTitle(firstMessage: string): string {\n    // Generate a short title from the first message\n    const words = firstMessage.split(' ').slice(0, 6);\n    return words.join(' ') + (firstMessage.split(' ').length > 6 ? '...' : '');\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    const [newConversation] = await db.insert(chatConversations).values(conversation).returning();\n    return newConversation;\n  }\n\n  async updateConversationTitle(workspaceId: number, conversationId: string, title: string): Promise<void> {\n    await db\n      .update(chatConversations)\n      .set({ title })\n      .where(\n        and(\n          eq(chatConversations.workspaceId, workspaceId),\n          eq(chatConversations.conversationId, conversationId)\n        )\n      );\n  }\n\n  async deleteConversation(workspaceId: number, conversationId: string): Promise<void> {\n    await db\n      .delete(chatConversations)\n      .where(\n        and(\n          eq(chatConversations.workspaceId, workspaceId),\n          eq(chatConversations.conversationId, conversationId)\n        )\n      );\n  }\n\n  // Invitation operations\n  async createWorkspaceInvitation(invitation: InsertWorkspaceInvitation): Promise<WorkspaceInvitation> {\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiration\n    \n    const [workspaceInvitation] = await db\n      .insert(workspaceInvitations)\n      .values({\n        ...invitation,\n        expiresAt,\n      })\n      .returning();\n    return workspaceInvitation;\n  }\n\n  async getWorkspaceInvitations(workspaceId: number): Promise<WorkspaceInvitation[]> {\n    return await db\n      .select()\n      .from(workspaceInvitations)\n      .where(eq(workspaceInvitations.workspaceId, workspaceId));\n  }\n\n  async getInvitationById(id: number): Promise<WorkspaceInvitation | undefined> {\n    const [invitation] = await db\n      .select()\n      .from(workspaceInvitations)\n      .where(eq(workspaceInvitations.id, id));\n    return invitation;\n  }\n\n  async getPendingInvitations(email: string): Promise<WorkspaceInvitation[]> {\n    return await db\n      .select()\n      .from(workspaceInvitations)\n      .where(\n        and(\n          eq(workspaceInvitations.email, email),\n          eq(workspaceInvitations.status, 'pending')\n        )\n      );\n  }\n\n  async acceptInvitation(invitationId: number, userId: string): Promise<void> {\n    // Get the invitation\n    const [invitation] = await db\n      .select()\n      .from(workspaceInvitations)\n      .where(eq(workspaceInvitations.id, invitationId));\n\n    if (!invitation) {\n      throw new Error(\"Invitation not found\");\n    }\n\n    // Get user info\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    // Add user to workspace with proper name handling\n    let displayName = 'User';\n    \n    if (user.firstName && user.lastName) {\n      displayName = `${user.firstName} ${user.lastName}`;\n    } else if (user.firstName) {\n      displayName = user.firstName;\n    } else if (user.email) {\n      // Extract name from email (e.g., \"john.doe@example.com\" -> \"John Doe\")\n      const emailName = user.email.split('@')[0];\n      const nameParts = emailName.split(/[._-]/);\n      displayName = nameParts\n        .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())\n        .join(' ');\n    }\n    \n    await this.addWorkspaceMember({\n      workspaceId: invitation.workspaceId,\n      userId: userId,\n      memberType: 'user',\n      name: displayName,\n      role: 'member',\n    });\n\n    // Update invitation status\n    await db\n      .update(workspaceInvitations)\n      .set({ status: 'accepted' })\n      .where(eq(workspaceInvitations.id, invitationId));\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string, workspaceId: number): Promise<Notification[]> {\n    return db.select()\n      .from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.workspaceId, workspaceId)\n      ))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [created] = await db.insert(notifications).values(notification).returning();\n    return created;\n  }\n\n  async markNotificationAsRead(id: number): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n\n  async markAllNotificationsAsRead(userId: string, workspaceId: number): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.workspaceId, workspaceId),\n        eq(notifications.isRead, false)\n      ));\n  }\n\n  async getUnreadNotificationCount(userId: string, workspaceId: number): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.workspaceId, workspaceId),\n        eq(notifications.isRead, false)\n      ));\n    return result[0]?.count || 0;\n  }\n\n  // Task comment operations\n  async getTaskComments(taskId: number): Promise<TaskComment[]> {\n    const comments = await db\n      .select({\n        id: taskComments.id,\n        taskId: taskComments.taskId,\n        userId: taskComments.userId,\n        workspaceId: taskComments.workspaceId,\n        comment: taskComments.comment,\n        createdAt: taskComments.createdAt,\n        userName: sql<string>`COALESCE(${users.firstName} || ' ' || ${users.lastName}, ${users.email})`.as('userName')\n      })\n      .from(taskComments)\n      .leftJoin(users, eq(taskComments.userId, users.id))\n      .where(eq(taskComments.taskId, taskId))\n      .orderBy(asc(taskComments.createdAt));\n    \n    return comments as TaskComment[];\n  }\n\n  async createTaskComment(comment: InsertTaskComment): Promise<TaskComment> {\n    const [created] = await db.insert(taskComments).values(comment).returning();\n    return created;\n  }\n\n  async deleteTaskComment(id: number): Promise<void> {\n    await db.delete(taskComments).where(eq(taskComments.id, id));\n  }\n\n  // Task recurrence operations\n  async createTaskRecurrence(recurrence: InsertTaskRecurrence): Promise<TaskRecurrence> {\n    const [created] = await db.insert(taskRecurrences).values(recurrence).returning();\n    return created;\n  }\n\n  async getTaskRecurrence(id: number): Promise<TaskRecurrence | undefined> {\n    const [recurrence] = await db.select().from(taskRecurrences).where(eq(taskRecurrences.id, id));\n    return recurrence;\n  }\n\n  async updateTaskRecurrence(id: number, updates: Partial<InsertTaskRecurrence>): Promise<TaskRecurrence> {\n    const [updated] = await db\n      .update(taskRecurrences)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(taskRecurrences.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTaskRecurrence(id: number): Promise<void> {\n    await db.delete(taskRecurrences).where(eq(taskRecurrences.id, id));\n  }\n\n  async deleteRecurringTaskInstances(recurrenceId: number, fromDate?: Date): Promise<void> {\n    if (fromDate) {\n      // Delete only future instances from the specified date\n      await db.delete(tasks)\n        .where(and(\n          eq(tasks.taskRecurrenceId, recurrenceId),\n          gte(tasks.dueDate, fromDate.toISOString().split('T')[0])\n        ));\n    } else {\n      // Delete all recurring instances by clearing the recurrence reference\n      await db.update(tasks)\n        .set({ taskRecurrenceId: null })\n        .where(eq(tasks.taskRecurrenceId, recurrenceId));\n    }\n  }\n\n  // Project component operations\n  async getProjectComponents(projectId: number): Promise<ProjectComponent[]> {\n    return await db\n      .select()\n      .from(projectComponents)\n      .where(eq(projectComponents.projectId, projectId))\n      .orderBy(asc(projectComponents.order), asc(projectComponents.name));\n  }\n\n  async createProjectComponent(component: InsertProjectComponent): Promise<ProjectComponent> {\n    const [newComponent] = await db.insert(projectComponents).values(component).returning();\n    return newComponent;\n  }\n\n  async updateProjectComponent(id: number, updates: Partial<InsertProjectComponent>): Promise<ProjectComponent> {\n    const [updatedComponent] = await db\n      .update(projectComponents)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projectComponents.id, id))\n      .returning();\n    return updatedComponent;\n  }\n\n  async deleteProjectComponent(id: number): Promise<void> {\n    await db.delete(projectComponents).where(eq(projectComponents.id, id));\n  }\n\n  // Inflow/Outflow Type operations\n  async getProjectInflowTypes(projectId: number): Promise<InflowType[]> {\n    return await db.select().from(inflowTypes).where(eq(inflowTypes.projectId, projectId)).orderBy(inflowTypes.name);\n  }\n\n  async createInflowType(inflowType: InsertInflowType): Promise<InflowType> {\n    const [created] = await db.insert(inflowTypes).values(inflowType).returning();\n    return created;\n  }\n\n  async updateInflowType(id: number, updates: Partial<InsertInflowType>): Promise<InflowType> {\n    const [updated] = await db.update(inflowTypes).set(updates).where(eq(inflowTypes.id, id)).returning();\n    return updated;\n  }\n\n  async deleteInflowType(id: number): Promise<void> {\n    await db.delete(inflowTypes).where(eq(inflowTypes.id, id));\n  }\n\n  async getProjectOutflowTypes(projectId: number): Promise<OutflowType[]> {\n    return await db.select().from(outflowTypes).where(eq(outflowTypes.projectId, projectId)).orderBy(outflowTypes.name);\n  }\n\n  async createOutflowType(outflowType: InsertOutflowType): Promise<OutflowType> {\n    const [created] = await db.insert(outflowTypes).values(outflowType).returning();\n    return created;\n  }\n\n  async updateOutflowType(id: number, updates: Partial<InsertOutflowType>): Promise<OutflowType> {\n    const [updated] = await db.update(outflowTypes).set(updates).where(eq(outflowTypes.id, id)).returning();\n    return updated;\n  }\n\n  async deleteOutflowType(id: number): Promise<void> {\n    await db.delete(outflowTypes).where(eq(outflowTypes.id, id));\n  }\n\n  // Project inflow/outflow operations\n  async getProjectInflows(projectId: number): Promise<ProjectInflow[]> {\n    return await db.select().from(projectInflows).where(eq(projectInflows.projectId, projectId)).orderBy(desc(projectInflows.date));\n  }\n\n  async createProjectInflow(inflow: InsertProjectInflow): Promise<ProjectInflow> {\n    const [created] = await db.insert(projectInflows).values(inflow).returning();\n    return created;\n  }\n\n  async updateProjectInflow(id: number, updates: Partial<InsertProjectInflow>): Promise<ProjectInflow> {\n    const [updated] = await db.update(projectInflows).set(updates).where(eq(projectInflows.id, id)).returning();\n    return updated;\n  }\n\n  async deleteProjectInflow(id: number): Promise<void> {\n    await db.delete(projectInflows).where(eq(projectInflows.id, id));\n  }\n\n  async getProjectOutflows(projectId: number): Promise<ProjectOutflow[]> {\n    return await db.select().from(projectOutflows).where(eq(projectOutflows.projectId, projectId)).orderBy(desc(projectOutflows.date));\n  }\n\n  async createProjectOutflow(outflow: InsertProjectOutflow): Promise<ProjectOutflow> {\n    const [created] = await db.insert(projectOutflows).values(outflow).returning();\n    return created;\n  }\n\n  async updateProjectOutflow(id: number, updates: Partial<InsertProjectOutflow>): Promise<ProjectOutflow> {\n    const [updated] = await db.update(projectOutflows).set(updates).where(eq(projectOutflows.id, id)).returning();\n    return updated;\n  }\n\n  async deleteProjectOutflow(id: number): Promise<void> {\n    await db.delete(projectOutflows).where(eq(projectOutflows.id, id));\n  }\n\n  // Legacy methods for backward compatibility - redirect to new outflow/inflow methods\n  async getProjectExpenses(projectId: number): Promise<ProjectExpense[]> {\n    return await this.getProjectOutflows(projectId);\n  }\n\n  async createProjectExpense(expense: InsertProjectExpense): Promise<ProjectExpense> {\n    return await this.createProjectOutflow(expense);\n  }\n\n  async updateProjectExpense(id: number, updates: Partial<InsertProjectExpense>): Promise<ProjectExpense> {\n    return await this.updateProjectOutflow(id, updates);\n  }\n\n  async deleteProjectExpense(id: number): Promise<void> {\n    return await this.deleteProjectOutflow(id);\n  }\n\n  async getProjectRevenue(projectId: number): Promise<ProjectRevenue[]> {\n    return await this.getProjectInflows(projectId);\n  }\n\n  async createProjectRevenue(revenue: InsertProjectRevenue): Promise<ProjectRevenue> {\n    return await this.createProjectInflow(revenue);\n  }\n\n  async updateProjectRevenue(id: number, updates: Partial<InsertProjectRevenue>): Promise<ProjectRevenue> {\n    return await this.updateProjectInflow(id, updates);\n  }\n\n  async deleteProjectRevenue(id: number): Promise<void> {\n    return await this.deleteProjectInflow(id);\n  }\n\n  // Financial operations\n  async getProjectBudgets(projectId: number): Promise<ProjectBudget[]> {\n    return await db.select().from(projectBudgets).where(eq(projectBudgets.projectId, projectId)).orderBy(projectBudgets.id);\n  }\n\n  async createProjectBudget(budget: InsertProjectBudget): Promise<ProjectBudget> {\n    const [created] = await db.insert(projectBudgets).values(budget).returning();\n    return created;\n  }\n\n  async updateProjectBudget(id: number, updates: Partial<InsertProjectBudget>): Promise<ProjectBudget> {\n    const [updated] = await db.update(projectBudgets).set(updates).where(eq(projectBudgets.id, id)).returning();\n    return updated;\n  }\n\n  async deleteProjectBudget(id: number): Promise<void> {\n    await db.delete(projectBudgets).where(eq(projectBudgets.id, id));\n  }\n\n\n\n  // Activity tracking operations\n  async logActivity(activity: InsertActivityLog): Promise<ActivityLog> {\n    const [created] = await db.insert(activityLogs).values(activity).returning();\n    return created;\n  }\n\n  async getUserActivities(userId: string, limit: number = 50): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(eq(activityLogs.userId, userId))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  async getWorkspaceActivities(workspaceId: number, limit: number = 50): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(eq(activityLogs.workspaceId, workspaceId))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  async getRecentUserActivities(userId: string, hours: number = 24): Promise<ActivityLog[]> {\n    const hoursAgo = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(\n        and(\n          eq(activityLogs.userId, userId),\n          gte(activityLogs.createdAt, hoursAgo)\n        )\n      )\n      .orderBy(desc(activityLogs.createdAt));\n  }\n\n  // Seeding functionality for default types\n  async seedDefaultOutflowTypes(projectId: number, workspaceId: number): Promise<void> {\n    const defaultOutflowTypes = [\n      { name: \"Petty Cash Expense\", description: \"Small miscellaneous expenses and cash payments\" },\n      { name: \"Salary Expense\", description: \"Employee salaries and wages\" },\n      { name: \"Office Supplies\", description: \"Stationery, printing, and office materials\" },\n      { name: \"Software Subscriptions\", description: \"Monthly/yearly software and service subscriptions\" },\n      { name: \"Marketing Expenses\", description: \"Advertising and promotional costs\" },\n      { name: \"Travel Expenses\", description: \"Business travel and transportation costs\" }\n    ];\n\n    // Check if types already exist to avoid duplicates\n    const existingTypes = await this.getProjectOutflowTypes(projectId);\n    const existingNames = existingTypes.map(type => type.name);\n\n    for (const type of defaultOutflowTypes) {\n      if (!existingNames.includes(type.name)) {\n        await this.createOutflowType({ ...type, projectId, workspaceId });\n      }\n    }\n  }\n\n  async seedDefaultInflowTypes(projectId: number, workspaceId: number): Promise<void> {\n    const defaultInflowTypes = [\n      { name: \"Revenue Income\", description: \"Primary business revenue and sales\" },\n      { name: \"Donation Fund\", description: \"Charitable donations and funding\" },\n      { name: \"Investment Returns\", description: \"Returns from investments and portfolios\" },\n      { name: \"Grant Income\", description: \"Government grants and institutional funding\" },\n      { name: \"Consulting Revenue\", description: \"Income from consulting services\" },\n      { name: \"Subscription Revenue\", description: \"Recurring subscription income\" }\n    ];\n\n    // Check if types already exist to avoid duplicates\n    const existingTypes = await this.getProjectInflowTypes(projectId);\n    const existingNames = existingTypes.map(type => type.name);\n\n    for (const type of defaultInflowTypes) {\n      if (!existingNames.includes(type.name)) {\n        await this.createInflowType({ ...type, projectId, workspaceId });\n      }\n    }\n  }\n\n  async seedDefaultTypesForProject(projectId: number, workspaceId: number): Promise<void> {\n    await this.seedDefaultOutflowTypes(projectId, workspaceId);\n    await this.seedDefaultInflowTypes(projectId, workspaceId);\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":43194},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  boolean,\n  decimal,\n  date,\n  time,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Workspaces\nexport const workspaces = pgTable(\"workspaces\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'personal' or 'team'\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Workspace members (including AI agents)\nexport const workspaceMembers = pgTable(\"workspace_members\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  userId: varchar(\"user_id\"), // null for AI agents\n  memberType: varchar(\"member_type\", { length: 20 }).notNull(), // 'user' or 'agent'\n  name: varchar(\"name\", { length: 255 }).notNull(), // display name (fallback for AI agents)\n  role: varchar(\"role\", { length: 50 }).default(\"member\"), // 'admin', 'manager', 'member', 'viewer', 'agent'\n  alias: varchar(\"alias\", { length: 100 }), // for AI agents\n  systemPrompt: text(\"system_prompt\"), // for AI agents\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Workspace invitations (for pending user invites)\nexport const workspaceInvitations = pgTable(\"workspace_invitations\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  invitedBy: varchar(\"invited_by\").notNull().references(() => users.id),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // 'pending', 'accepted', 'declined'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n});\n\n// Projects\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // 'active', 'completed', 'archived'\n  budget: decimal(\"budget\", { precision: 10, scale: 2 }),\n  spent: decimal(\"spent\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  color: varchar(\"color\", { length: 7 }).default(\"#6366F1\"), // hex color\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Task recurrences\nexport const taskRecurrences = pgTable(\"task_recurrences\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  recurrenceType: varchar(\"recurrence_type\", { length: 20 }).notNull(), // 'daily', 'weekly', 'monthly', 'yearly', 'custom'\n  recurrencePattern: jsonb(\"recurrence_pattern\").notNull(), // Flexible pattern storage\n  interval: integer(\"interval\").default(1), // e.g., every 2 days, every 3 weeks\n  daysOfWeek: varchar(\"days_of_week\", { length: 20 }), // e.g., \"1,3,5\" for Mon, Wed, Fri\n  dayOfMonth: integer(\"day_of_month\"), // e.g., 15 for 15th of each month\n  weekOfMonth: integer(\"week_of_month\"), // e.g., 1 for first week, -1 for last week\n  monthOfYear: integer(\"month_of_year\"), // e.g., 1 for January, 12 for December\n  endType: varchar(\"end_type\", { length: 20 }), // 'never', 'after_count', 'on_date'\n  endCount: integer(\"end_count\"), // Number of occurrences\n  endDate: date(\"end_date\"), // End date for recurrence\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tasks\nexport const tasks = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  projectId: integer(\"project_id\").references(() => projects.id),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  assignedMemberId: integer(\"assigned_member_id\").references(() => workspaceMembers.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 50 }).default(\"todo\"), // 'todo', 'in_progress', 'completed'\n  priority: integer(\"priority\").default(0), // 0-3 (0=low, 3=urgent)\n  dueDate: date(\"due_date\"),\n  dueTime: time(\"due_time\"),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  estimatedHours: decimal(\"estimated_hours\", { precision: 4, scale: 2 }),\n  actualHours: decimal(\"actual_hours\", { precision: 4, scale: 2 }),\n  timeSlot: varchar(\"time_slot\", { length: 20 }), // e.g., \"6:00-9:00\"\n  agentExecutionLog: text(\"agent_execution_log\"),\n  taskRecurrenceId: integer(\"task_recurrence_id\"),\n  isRecurringInstance: boolean(\"is_recurring_instance\").default(false),\n  originalTaskId: integer(\"original_task_id\"), // References the original task that spawned this recurring instance\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project pages (documentation)\nexport const projectPages = pgTable(\"project_pages\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Brain dump items\nexport const brainDumpItems = pgTable(\"brain_dump_items\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  text: text(\"text\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// File vault\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  projectId: integer(\"project_id\").references(() => projects.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  originalName: varchar(\"original_name\", { length: 255 }).notNull(),\n  mimeType: varchar(\"mime_type\", { length: 100 }).notNull(),\n  size: integer(\"size\").notNull(),\n  path: varchar(\"path\", { length: 500 }).notNull(),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI chat conversations - conversation metadata\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey(), // UUID for conversation identification\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\", { length: 255 }), // Auto-generated or user-defined conversation title\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI chat messages - flexible message system\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id),\n  messageType: varchar(\"message_type\", { length: 50 }).notNull(), // system, context, user, ai, tool_call, tool_result\n  content: text(\"content\").notNull(),\n  metadata: text(\"metadata\"), // JSON string for additional data (tool info, context data, etc.)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Legacy chat conversations table (for backward compatibility)\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  conversationId: varchar(\"conversation_id\").notNull(), // UUID for grouping messages\n  title: varchar(\"title\", { length: 255 }), // Auto-generated or user-defined conversation title\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Project components (milestones/sections)\nexport const projectComponents = pgTable(\"project_components\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 50 }).default(\"milestone\"), // milestone, phase, section\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // active, completed, cancelled\n  budgetAllocation: decimal(\"budget_allocation\", { precision: 12, scale: 2 }),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inflow Types (Revenue Categories)\nexport const inflowTypes = pgTable(\"inflow_types\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Outflow Types (Expense Categories)\nexport const outflowTypes = pgTable(\"outflow_types\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Project budgets\nexport const projectBudgets = pgTable(\"project_budgets\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  componentId: integer(\"component_id\").references(() => projectComponents.id),\n  budgetAmount: decimal(\"budget_amount\", { precision: 12, scale: 2 }).notNull(),\n  spentAmount: decimal(\"spent_amount\", { precision: 12, scale: 2 }).default(\"0\"),\n  period: varchar(\"period\", { length: 50 }).default(\"monthly\"), // monthly, quarterly, yearly\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project outflows (formerly expenses)\nexport const projectOutflows = pgTable(\"project_outflows\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  componentId: integer(\"component_id\").references(() => projectComponents.id),\n  budgetId: integer(\"budget_id\").references(() => projectBudgets.id),\n  outflowTypeId: integer(\"outflow_type_id\").notNull().references(() => outflowTypes.id, { onDelete: \"restrict\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  receipt: varchar(\"receipt\", { length: 500 }), // file path or URL\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, approved, rejected\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Project inflows (formerly revenue)\nexport const projectInflows = pgTable(\"project_inflows\", {\n  id: serial(\"id\").primaryKey(),\n  projectId: integer(\"project_id\").notNull().references(() => projects.id),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  componentId: integer(\"component_id\").references(() => projectComponents.id),\n  inflowTypeId: integer(\"inflow_type_id\").notNull().references(() => inflowTypes.id, { onDelete: \"restrict\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, received\n  invoiceNumber: varchar(\"invoice_number\", { length: 100 }),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Keep legacy tables for backward compatibility\nexport const projectExpenses = projectOutflows;\nexport const projectRevenue = projectInflows;\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'task_assigned', 'task_completed', 'comment_added'\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  taskId: integer(\"task_id\").references(() => tasks.id),\n  commentId: integer(\"comment_id\"),\n  isRead: boolean(\"is_read\").default(false),\n  emailSent: boolean(\"email_sent\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Task comments\nexport const taskComments = pgTable(\"task_comments\", {\n  id: serial(\"id\").primaryKey(),\n  taskId: integer(\"task_id\").notNull().references(() => tasks.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  workspaceId: integer(\"workspace_id\").notNull().references(() => workspaces.id),\n  comment: text(\"comment\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  ownedWorkspaces: many(workspaces),\n  brainDumpItems: many(brainDumpItems),\n  uploadedFiles: many(files),\n  chatConversations: many(chatConversations),\n  conversations: many(conversations),\n}));\n\nexport const workspacesRelations = relations(workspaces, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [workspaces.ownerId],\n    references: [users.id],\n  }),\n  members: many(workspaceMembers),\n  projects: many(projects),\n  categories: many(categories),\n  tasks: many(tasks),\n  brainDumpItems: many(brainDumpItems),\n  files: many(files),\n  chatConversations: many(chatConversations),\n  conversations: many(conversations),\n}));\n\nexport const workspaceInvitationsRelations = relations(workspaceInvitations, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [workspaceInvitations.workspaceId],\n    references: [workspaces.id],\n  }),\n  invitedBy: one(users, {\n    fields: [workspaceInvitations.invitedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const workspaceMembersRelations = relations(workspaceMembers, ({ one, many }) => ({\n  workspace: one(workspaces, {\n    fields: [workspaceMembers.workspaceId],\n    references: [workspaces.id],\n  }),\n  user: one(users, {\n    fields: [workspaceMembers.userId],\n    references: [users.id],\n  }),\n  assignedTasks: many(tasks),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  workspace: one(workspaces, {\n    fields: [projects.workspaceId],\n    references: [workspaces.id],\n  }),\n  tasks: many(tasks),\n  pages: many(projectPages),\n  files: many(files),\n  components: many(projectComponents),\n  budgets: many(projectBudgets),\n  expenses: many(projectExpenses),\n  revenue: many(projectRevenue),\n}));\n\nexport const inflowTypesRelations = relations(inflowTypes, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [inflowTypes.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [inflowTypes.workspaceId],\n    references: [workspaces.id],\n  }),\n  inflows: many(projectInflows),\n}));\n\nexport const outflowTypesRelations = relations(outflowTypes, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [outflowTypes.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [outflowTypes.workspaceId],\n    references: [workspaces.id],\n  }),\n  outflows: many(projectOutflows),\n}));\n\nexport const projectComponentsRelations = relations(projectComponents, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [projectComponents.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [projectComponents.workspaceId],\n    references: [workspaces.id],\n  }),\n  budgets: many(projectBudgets),\n  expenses: many(projectExpenses),\n  revenue: many(projectRevenue),\n  outflows: many(projectOutflows),\n  inflows: many(projectInflows),\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  workspace: one(workspaces, {\n    fields: [categories.workspaceId],\n    references: [workspaces.id],\n  }),\n  tasks: many(tasks),\n}));\n\nexport const taskRecurrencesRelations = relations(taskRecurrences, ({ one, many }) => ({\n  workspace: one(workspaces, {\n    fields: [taskRecurrences.workspaceId],\n    references: [workspaces.id],\n  }),\n  tasks: many(tasks),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [tasks.workspaceId],\n    references: [workspaces.id],\n  }),\n  project: one(projects, {\n    fields: [tasks.projectId],\n    references: [projects.id],\n  }),\n  category: one(categories, {\n    fields: [tasks.categoryId],\n    references: [categories.id],\n  }),\n  assignedMember: one(workspaceMembers, {\n    fields: [tasks.assignedMemberId],\n    references: [workspaceMembers.id],\n  }),\n  taskRecurrence: one(taskRecurrences, {\n    fields: [tasks.taskRecurrenceId],\n    references: [taskRecurrences.id],\n  }),\n}));\n\nexport const projectPagesRelations = relations(projectPages, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectPages.projectId],\n    references: [projects.id],\n  }),\n}));\n\nexport const brainDumpItemsRelations = relations(brainDumpItems, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [brainDumpItems.workspaceId],\n    references: [workspaces.id],\n  }),\n  user: one(users, {\n    fields: [brainDumpItems.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const filesRelations = relations(files, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [files.workspaceId],\n    references: [workspaces.id],\n  }),\n  project: one(projects, {\n    fields: [files.projectId],\n    references: [projects.id],\n  }),\n  uploader: one(users, {\n    fields: [files.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const chatConversationsRelations = relations(chatConversations, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [chatConversations.workspaceId],\n    references: [workspaces.id],\n  }),\n  user: one(users, {\n    fields: [chatConversations.userId],\n    references: [users.id],\n  }),\n}));\n\n// New conversation and message relations\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  workspace: one(workspaces, {\n    fields: [conversations.workspaceId],\n    references: [workspaces.id],\n  }),\n  user: one(users, {\n    fields: [conversations.userId],\n    references: [users.id],\n  }),\n  messages: many(chatMessages),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  conversation: one(conversations, {\n    fields: [chatMessages.conversationId],\n    references: [conversations.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  workspace: one(workspaces, {\n    fields: [notifications.workspaceId],\n    references: [workspaces.id],\n  }),\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  task: one(tasks, {\n    fields: [notifications.taskId],\n    references: [tasks.id],\n  }),\n}));\n\nexport const taskCommentsRelations = relations(taskComments, ({ one }) => ({\n  task: one(tasks, {\n    fields: [taskComments.taskId],\n    references: [tasks.id],\n  }),\n  user: one(users, {\n    fields: [taskComments.userId],\n    references: [users.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [taskComments.workspaceId],\n    references: [workspaces.id],\n  }),\n}));\n\nexport const projectBudgetsRelations = relations(projectBudgets, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectBudgets.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [projectBudgets.workspaceId],\n    references: [workspaces.id],\n  }),\n  component: one(projectComponents, {\n    fields: [projectBudgets.componentId],\n    references: [projectComponents.id],\n  }),\n}));\n\nexport const projectOutflowsRelations = relations(projectOutflows, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectOutflows.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [projectOutflows.workspaceId],\n    references: [workspaces.id],\n  }),\n  component: one(projectComponents, {\n    fields: [projectOutflows.componentId],\n    references: [projectComponents.id],\n  }),\n  budget: one(projectBudgets, {\n    fields: [projectOutflows.budgetId],\n    references: [projectBudgets.id],\n  }),\n  outflowType: one(outflowTypes, {\n    fields: [projectOutflows.outflowTypeId],\n    references: [outflowTypes.id],\n  }),\n  creator: one(users, {\n    fields: [projectOutflows.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const projectInflowsRelations = relations(projectInflows, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectInflows.projectId],\n    references: [projects.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [projectInflows.workspaceId],\n    references: [workspaces.id],\n  }),\n  component: one(projectComponents, {\n    fields: [projectInflows.componentId],\n    references: [projectComponents.id],\n  }),\n  inflowType: one(inflowTypes, {\n    fields: [projectInflows.inflowTypeId],\n    references: [inflowTypes.id],\n  }),\n  creator: one(users, {\n    fields: [projectInflows.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Legacy relations for backward compatibility\nexport const projectExpensesRelations = projectOutflowsRelations;\nexport const projectRevenueRelations = projectInflowsRelations;\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ createdAt: true, updatedAt: true });\nexport const insertWorkspaceSchema = createInsertSchema(workspaces).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertWorkspaceMemberSchema = createInsertSchema(workspaceMembers).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectSchema = createInsertSchema(projects).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCategorySchema = createInsertSchema(categories).omit({ id: true, createdAt: true });\nexport const insertTaskRecurrenceSchema = createInsertSchema(taskRecurrences).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectPageSchema = createInsertSchema(projectPages).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertBrainDumpItemSchema = createInsertSchema(brainDumpItems).omit({ id: true, createdAt: true });\nexport const insertFileSchema = createInsertSchema(files).omit({ id: true, createdAt: true });\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({ id: true, createdAt: true });\nexport const insertConversationSchema = createInsertSchema(conversations).omit({ createdAt: true, updatedAt: true });\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({ id: true, createdAt: true });\nexport const insertWorkspaceInvitationSchema = createInsertSchema(workspaceInvitations).omit({ id: true, createdAt: true, expiresAt: true });\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({ id: true, createdAt: true });\nexport const insertTaskCommentSchema = createInsertSchema(taskComments).omit({ id: true, createdAt: true });\nexport const insertProjectComponentSchema = createInsertSchema(projectComponents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectBudgetSchema = createInsertSchema(projectBudgets).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertInflowTypeSchema = createInsertSchema(inflowTypes).omit({ id: true, createdAt: true });\nexport const insertOutflowTypeSchema = createInsertSchema(outflowTypes).omit({ id: true, createdAt: true });\nexport const insertProjectInflowSchema = createInsertSchema(projectInflows).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProjectOutflowSchema = createInsertSchema(projectOutflows).omit({ id: true, createdAt: true, updatedAt: true });\n// Legacy schemas for backward compatibility\nexport const insertProjectExpenseSchema = insertProjectOutflowSchema;\nexport const insertProjectRevenueSchema = insertProjectInflowSchema;\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertWorkspace = z.infer<typeof insertWorkspaceSchema>;\nexport type Workspace = typeof workspaces.$inferSelect;\nexport type InsertWorkspaceMember = z.infer<typeof insertWorkspaceMemberSchema>;\nexport type WorkspaceMember = typeof workspaceMembers.$inferSelect & {\n  email?: string | null; // computed from user relation\n};\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertTaskRecurrence = z.infer<typeof insertTaskRecurrenceSchema>;\nexport type TaskRecurrence = typeof taskRecurrences.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertProjectPage = z.infer<typeof insertProjectPageSchema>;\nexport type ProjectPage = typeof projectPages.$inferSelect;\nexport type InsertBrainDumpItem = z.infer<typeof insertBrainDumpItemSchema>;\nexport type BrainDumpItem = typeof brainDumpItems.$inferSelect;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type File = typeof files.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertWorkspaceInvitation = z.infer<typeof insertWorkspaceInvitationSchema>;\nexport type WorkspaceInvitation = typeof workspaceInvitations.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertTaskComment = z.infer<typeof insertTaskCommentSchema>;\nexport type TaskComment = typeof taskComments.$inferSelect & {\n  userName?: string; // computed from user relation\n};\nexport type InsertProjectComponent = z.infer<typeof insertProjectComponentSchema>;\nexport type ProjectComponent = typeof projectComponents.$inferSelect;\nexport type InsertProjectBudget = z.infer<typeof insertProjectBudgetSchema>;\nexport type ProjectBudget = typeof projectBudgets.$inferSelect;\nexport type InsertInflowType = z.infer<typeof insertInflowTypeSchema>;\nexport type InflowType = typeof inflowTypes.$inferSelect;\nexport type InsertOutflowType = z.infer<typeof insertOutflowTypeSchema>;\nexport type OutflowType = typeof outflowTypes.$inferSelect;\nexport type InsertProjectInflow = z.infer<typeof insertProjectInflowSchema>;\nexport type ProjectInflow = typeof projectInflows.$inferSelect;\nexport type InsertProjectOutflow = z.infer<typeof insertProjectOutflowSchema>;\nexport type ProjectOutflow = typeof projectOutflows.$inferSelect;\n// Legacy types for backward compatibility\nexport type InsertProjectExpense = InsertProjectOutflow;\nexport type ProjectExpense = ProjectOutflow;\nexport type InsertProjectRevenue = InsertProjectInflow;\nexport type ProjectRevenue = ProjectInflow;\n\n// Activity Tracking\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  workspaceId: integer(\"workspace_id\").references(() => workspaces.id),\n  action: varchar(\"action\", { length: 100 }).notNull(), // 'created', 'updated', 'deleted', 'viewed', 'commented', etc.\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(), // 'task', 'project', 'workspace', 'comment', 'file', etc.\n  entityId: integer(\"entity_id\"), // ID of the entity being acted upon\n  entityName: varchar(\"entity_name\", { length: 255 }), // Name/title of the entity for context\n  details: jsonb(\"details\"), // Additional context data (old values, new values, etc.)\n  metadata: jsonb(\"metadata\"), // Extra metadata (IP, user agent, etc.)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity logs relations\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [activityLogs.workspaceId],\n    references: [workspaces.id],\n  }),\n}));\n\n// Activity logs schema\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\n\n","size_bytes":31359},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Members from \"@/pages/members\";\nimport Chat from \"@/pages/chat\";\nimport Vault from \"@/pages/vault\";\nimport Financials from \"@/pages/financials\";\n\nimport NotFound from \"@/pages/not-found\";\nimport AcceptInvitation from \"@/pages/accept-invitation\";\nimport SimpleAccept from \"@/pages/simple-accept\";\n\nfunction Router() {\n  // Check if current path is invitation - handle without auth\n  const currentPath = typeof window !== 'undefined' ? window.location.pathname : '';\n  \n  if (currentPath.startsWith('/accept-invitation')) {\n    return <SimpleAccept />;\n  }\n  \n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">Loading...</div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Dashboard />\n        )}\n      </Route>\n      <Route path=\"/workspace/:workspaceId/members\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">Loading...</div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Members />\n        )}\n      </Route>\n      <Route path=\"/workspace/:workspaceId/chat\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">Loading...</div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Chat />\n        )}\n      </Route>\n      <Route path=\"/workspace/:workspaceId/vault\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">Loading...</div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Vault />\n        )}\n      </Route>\n      <Route path=\"/workspace/:workspaceId/financials\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">Loading...</div>\n          </div>\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Financials />\n        )}\n      </Route>\n\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2996},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(246, 84%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(265, 82%, 71%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(246, 84%, 60%);\n  --radius: 0.75rem;\n  \n  /* Sidebar colors */\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-primary: hsl(246, 84%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(60, 4.8%, 95.9%);\n  --sidebar-accent-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-border: hsl(20, 5.9%, 90%);\n  --sidebar-ring: hsl(246, 84%, 60%);\n  \n  /* Chart colors */\n  --chart-1: hsl(246, 84%, 60%);\n  --chart-2: hsl(265, 82%, 71%);\n  --chart-3: hsl(158, 64%, 52%);\n  --chart-4: hsl(43, 96%, 56%);\n  --chart-5: hsl(0, 84%, 60%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(246, 84%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  \n  /* Sidebar colors for dark mode */\n  --sidebar-background: hsl(240, 10%, 3.9%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(246, 84%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(240, 3.7%, 15.9%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(240, 3.7%, 15.9%);\n  --sidebar-ring: hsl(246, 84%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    letter-spacing: -0.01em;\n  }\n\n  /* Ultra-minimalistic typography */\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-medium tracking-tight;\n    line-height: 1.2;\n  }\n\n  h1 {\n    @apply text-3xl md:text-4xl lg:text-5xl;\n  }\n\n  h2 {\n    @apply text-2xl md:text-3xl;\n  }\n\n  h3 {\n    @apply text-xl md:text-2xl;\n  }\n\n  h4 {\n    @apply text-lg md:text-xl;\n  }\n\n  /* Improved focus states */\n  :focus-visible {\n    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    @apply w-2 h-2;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-transparent;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-gray-300 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-gray-400;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  button, a, input, textarea, select {\n    @apply transition-colors duration-200;\n  }\n\n  /* Card shadows for depth */\n  .card-shadow {\n    box-shadow: \n      0 1px 3px 0 rgb(0 0 0 / 0.1),\n      0 1px 2px -1px rgb(0 0 0 / 0.1);\n  }\n\n  .card-shadow-lg {\n    box-shadow: \n      0 10px 15px -3px rgb(0 0 0 / 0.1),\n      0 4px 6px -4px rgb(0 0 0 / 0.1);\n  }\n\n  /* Text clamp utilities */\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n\n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n\n  /* Drag and drop visual feedback */\n  .drag-over {\n    @apply bg-primary/5 border-primary/30 border-dashed;\n  }\n\n  .dragging {\n    @apply opacity-50 scale-95 rotate-2;\n  }\n\n  /* Animation improvements */\n  .animate-in {\n    animation: animateIn 0.2s ease-out;\n  }\n\n  .animate-out {\n    animation: animateOut 0.15s ease-in;\n  }\n\n  @keyframes animateIn {\n    from {\n      opacity: 0;\n      transform: translateY(-4px) scale(0.98);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  @keyframes animateOut {\n    from {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n    to {\n      opacity: 0;\n      transform: translateY(-4px) scale(0.98);\n    }\n  }\n\n  /* Glass morphism effect for modals and floating elements */\n  .glass {\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .dark .glass {\n    background: rgba(0, 0, 0, 0.7);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Improved spacing consistency */\n  .content-spacing > * + * {\n    @apply mt-4;\n  }\n\n  .content-spacing-lg > * + * {\n    @apply mt-6;\n  }\n\n  .content-spacing-sm > * + * {\n    @apply mt-2;\n  }\n}\n\n@layer components {\n  /* Button variants with consistent spacing and typography */\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90 focus:ring-primary;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/90 focus:ring-secondary;\n  }\n\n  .btn-accent {\n    @apply bg-accent text-accent-foreground hover:bg-accent/90 focus:ring-accent;\n  }\n\n  /* Form field consistency */\n  .form-field {\n    @apply space-y-2;\n  }\n\n  .form-label {\n    @apply text-sm font-medium text-foreground;\n  }\n\n  .form-input {\n    @apply w-full px-3 py-2 border border-input bg-background text-foreground rounded-md focus:ring-2 focus:ring-ring focus:border-transparent;\n  }\n\n  /* Layout utilities */\n  .container-padding {\n    @apply px-4 sm:px-6 lg:px-8;\n  }\n\n  .section-padding {\n    @apply py-12 md:py-16 lg:py-20;\n  }\n\n  /* Text utilities matching design system */\n  .text-hero {\n    @apply text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight;\n  }\n\n  .text-heading {\n    @apply text-2xl md:text-3xl font-semibold tracking-tight;\n  }\n\n  .text-subheading {\n    @apply text-lg md:text-xl font-medium;\n  }\n\n  .text-body {\n    @apply text-base leading-relaxed;\n  }\n\n  .text-caption {\n    @apply text-sm text-muted-foreground;\n  }\n\n  /* Card components */\n  .card-base {\n    @apply bg-card text-card-foreground border border-border rounded-lg;\n  }\n\n  .card-hover {\n    @apply hover:shadow-lg transition-shadow duration-200;\n  }\n\n  .card-interactive {\n    @apply cursor-pointer hover:bg-accent/5 transition-colors duration-200;\n  }\n}\n\n@layer utilities {\n  /* Spacing utilities matching design requirements */\n  .space-consistent > * + * {\n    @apply mt-4;\n  }\n\n  .gap-consistent {\n    @apply gap-4;\n  }\n\n  .gap-consistent-lg {\n    @apply gap-6;\n  }\n\n  /* Border radius consistency */\n  .rounded-consistent {\n    @apply rounded-lg;\n  }\n\n  .rounded-consistent-sm {\n    @apply rounded-md;\n  }\n\n  .rounded-consistent-lg {\n    @apply rounded-xl;\n  }\n\n  /* Shadow utilities */\n  .shadow-consistent {\n    @apply shadow-sm;\n  }\n\n  .shadow-consistent-lg {\n    @apply shadow-lg;\n  }\n}\n","size_bytes":7575},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-assistant-widget.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { \n  MessageCircle, \n  X, \n  Send, \n  Bot, \n  User,\n  Sparkles,\n  BarChart3,\n  FileText,\n  ChevronUp,\n  ChevronDown,\n  Zap,\n  Plus,\n  History,\n  Edit2,\n  Trash2,\n  Settings,\n  CheckCircle,\n  Info\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ChatMessage {\n  id: number;\n  message: string;\n  response: string;\n  createdAt: string;\n  conversationId: string;\n}\n\ninterface Conversation {\n  conversationId: string;\n  title: string | null;\n  lastMessage: string;\n  lastActivity: Date;\n  messageCount: number;\n}\n\ninterface AIAssistantWidgetProps {\n  workspaceId: number;\n}\n\n// Helper function to get icon for message type\nconst getMessageTypeIcon = (messageType: string) => {\n  switch (messageType) {\n    case 'user':\n      return <User className=\"h-4 w-4 text-blue-600\" />;\n    case 'ai':\n      return <Bot className=\"h-4 w-4 text-purple-600\" />;\n    case 'system':\n      return <Info className=\"h-4 w-4 text-gray-600\" />;\n    case 'context':\n      return <FileText className=\"h-4 w-4 text-orange-600\" />;\n    case 'tool_call':\n      return <Settings className=\"h-4 w-4 text-green-600\" />;\n    case 'tool_result':\n      return <CheckCircle className=\"h-4 w-4 text-emerald-600\" />;\n    default:\n      return <MessageCircle className=\"h-4 w-4 text-gray-500\" />;\n  }\n};\n\nexport function AIAssistantWidget({ workspaceId }: AIAssistantWidgetProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [showConversations, setShowConversations] = useState(false);\n  const [editingTitle, setEditingTitle] = useState<string | null>(null);\n  const [newTitle, setNewTitle] = useState(\"\");\n  const chatEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const widgetRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n\n  // Ensure workspaceId is valid\n  const isValidWorkspace = !!(workspaceId && workspaceId > 0);\n\n  // Fetch all conversations for this workspace\n  const { data: conversationsList = [] } = useQuery<Conversation[]>({\n    queryKey: [`/api/workspaces/${workspaceId}/conversations`],\n    enabled: isValidWorkspace,\n  });\n\n  // Fetch messages for current conversation\n  const { data: currentMessages = [], isLoading } = useQuery<ChatMessage[]>({\n    queryKey: currentConversationId \n      ? [`/api/workspaces/${workspaceId}/conversations/${currentConversationId}/messages`]\n      : [`/api/workspaces/${workspaceId}/chat`],\n    enabled: Boolean(isValidWorkspace),\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      if (!isValidWorkspace) {\n        throw new Error(\"No valid workspace selected\");\n      }\n      \n      const response = await fetch(`/api/workspaces/${workspaceId}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({ \n          message,\n          conversationId: currentConversationId \n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send message: ${response.status}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Update current conversation ID if this was a new conversation\n      if (!currentConversationId && data.conversationId) {\n        setCurrentConversationId(data.conversationId);\n      }\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/conversations`] });\n      if (currentConversationId) {\n        queryClient.invalidateQueries({ \n          queryKey: [`/api/workspaces/${workspaceId}/conversations/${currentConversationId}/messages`] \n        });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/chat`] });\n      }\n      \n      setMessage(\"\");\n      setIsExpanded(true);\n      \n      // Scroll to bottom after new message\n      setTimeout(() => {\n        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n      }, 100);\n    },\n    onError: (error) => {\n      console.error(\"Failed to send message:\", error);\n    },\n  });\n\n  // Start new conversation\n  const startNewConversation = () => {\n    setCurrentConversationId(null);\n    setShowConversations(false);\n  };\n\n  // Switch to a specific conversation\n  const switchToConversation = (conversationId: string) => {\n    setCurrentConversationId(conversationId);\n    setShowConversations(false);\n  };\n\n  // Delete conversation mutation\n  const deleteConversationMutation = useMutation({\n    mutationFn: async (conversationId: string) => {\n      const response = await fetch(`/api/workspaces/${workspaceId}/conversations/${conversationId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete conversation');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/conversations`] });\n      if (currentConversationId) {\n        setCurrentConversationId(null);\n      }\n    },\n  });\n\n  // Quick action mutations\n  const quickActionMutation = useMutation({\n    mutationFn: async (action: string) => {\n      if (!isValidWorkspace) {\n        throw new Error(\"No valid workspace selected\");\n      }\n      \n      const response = await fetch(`/api/workspaces/${workspaceId}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({ message: action }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send message: ${response.status}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/chat`] });\n      setIsExpanded(true);\n    },\n  });\n\n  // Drag functionality\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (widgetRef.current) {\n      const rect = widgetRef.current.getBoundingClientRect();\n      setDragOffset({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      });\n      setIsDragging(true);\n    }\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging && widgetRef.current) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      \n      // Keep widget within viewport bounds\n      const maxX = window.innerWidth - widgetRef.current.offsetWidth;\n      const maxY = window.innerHeight - widgetRef.current.offsetHeight;\n      \n      setPosition({\n        x: Math.max(0, Math.min(newX, maxX)),\n        y: Math.max(0, Math.min(newY, maxY)),\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragOffset]);\n\n  // Prevent dragging on button/input interactions\n  const handleHeaderMouseDown = (e: React.MouseEvent) => {\n    // Don't start dragging if clicking on buttons or inputs\n    if ((e.target as HTMLElement).tagName === 'BUTTON' || (e.target as HTMLElement).tagName === 'INPUT') {\n      return;\n    }\n    handleMouseDown(e);\n  };\n\n  // Auto-scroll to bottom of chat when messages change\n  useEffect(() => {\n    if (chatEndRef.current && isExpanded && currentMessages && Array.isArray(currentMessages) && currentMessages.length > 0) {\n      setTimeout(() => {\n        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n      }, 100);\n    }\n  }, [currentMessages, isExpanded]);\n\n  // Focus input when expanded\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  const handleSendMessage = () => {\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    if (!isValidWorkspace) {\n      console.error(\"No valid workspace selected for chat\");\n      return;\n    }\n    \n    sendMessageMutation.mutate(message.trim());\n    setIsExpanded(true);\n  };\n\n  const handleQuickAction = (action: string) => {\n    quickActionMutation.mutate(action);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const quickActions = [\n    { \n      label: \"Give Insights\", \n      icon: BarChart3, \n      action: \"Analyze my task performance and provide insights on productivity patterns and bottlenecks\" \n    },\n    { \n      label: \"Summarize my Task Status And Priorities\", \n      icon: Sparkles, \n      action: \"Summarize my current task status, priorities, and what I should focus on today\" \n    },\n  ];\n\n  return (\n    <div \n      ref={widgetRef}\n      className=\"fixed z-50 w-full max-w-2xl px-4 pb-4\"\n      style={{\n        bottom: position.y === 0 ? '0' : 'auto',\n        left: position.x === 0 ? '50%' : position.x,\n        top: position.y > 0 ? position.y : 'auto',\n        transform: position.x === 0 && position.y === 0 ? 'translateX(-50%)' : 'none',\n      }}\n    >\n      {/* Expanded Chat Panel */}\n      {isExpanded && (\n        <Card className=\"mb-4 bg-white/95 backdrop-blur-sm border shadow-2xl\">\n          <div \n            className=\"flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-50 to-purple-50 cursor-move\"\n            onMouseDown={handleHeaderMouseDown}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                <Bot className=\"h-4 w-4 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-800\">AI Assistant</h3>\n                {conversationsList.length > 0 && (\n                  <p className=\"text-xs text-gray-500\">{conversationsList.length} conversations</p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={startNewConversation}\n                className=\"h-8 w-8 p-0 text-gray-600 hover:text-gray-800\"\n                title=\"Start new conversation\"\n              >\n                <Plus className=\"h-3 w-3\" />\n              </Button>\n              {conversationsList.length > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowConversations(!showConversations)}\n                  className=\"h-8 w-8 p-0 text-gray-600 hover:text-gray-800\"\n                  title=\"View conversation history\"\n                >\n                  <History className=\"h-3 w-3\" />\n                </Button>\n              )}\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setIsExpanded(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <ChevronDown className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Conversation List Modal */}\n          <Dialog open={showConversations} onOpenChange={setShowConversations}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Conversation History</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {conversationsList.map((conv) => (\n                  <div\n                    key={conv.conversationId}\n                    className={`p-3 rounded-lg border cursor-pointer hover:bg-gray-50 transition-colors ${\n                      currentConversationId === conv.conversationId ? 'bg-blue-50 border-blue-200' : ''\n                    }`}\n                    onClick={() => switchToConversation(conv.conversationId)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">\n                          {conv.title || `Conversation ${conv.conversationId.slice(-4)}`}\n                        </p>\n                        <p className=\"text-xs text-gray-500 truncate\">\n                          {conv.lastMessage}\n                        </p>\n                        <p className=\"text-xs text-gray-400\">\n                          {new Date(conv.lastActivity).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setEditingTitle(conv.conversationId);\n                            setNewTitle(conv.title || '');\n                          }}\n                          className=\"h-6 w-6 p-0\"\n                        >\n                          <Edit2 className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            deleteConversationMutation.mutate(conv.conversationId);\n                          }}\n                          className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {conversationsList.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <MessageCircle className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                    <p className=\"text-sm\">No conversations yet</p>\n                    <p className=\"text-xs text-gray-400 mt-1\">Start chatting to create your first conversation</p>\n                  </div>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <CardContent className=\"p-0\">\n            {/* Chat Messages */}\n            <ScrollArea className=\"h-80 p-4\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n                </div>\n              ) : currentMessages.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Bot className=\"h-12 w-12 mx-auto mb-3 text-gray-300\" />\n                  <p className=\"text-sm\">Start a conversation with your AI assistant</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">I have access to your workspace activity for better context</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {[...(currentMessages as ChatMessage[])].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()).map((conv: ChatMessage) => (\n                    <div key={conv.id} className=\"space-y-3\">\n                      {/* User Message */}\n                      <div className=\"flex justify-end items-start space-x-2\">\n                        <div className=\"max-w-xs lg:max-w-md\">\n                          <div className=\"bg-blue-500 text-white px-4 py-2 rounded-2xl rounded-br-sm\">\n                            <p className=\"text-sm\">{conv.message}</p>\n                          </div>\n                          <p className=\"text-xs text-gray-500 mt-1 text-right\">\n                            {new Date(conv.createdAt).toLocaleTimeString()}\n                          </p>\n                        </div>\n                        <div className=\"mt-2 flex-shrink-0\">\n                          {getMessageTypeIcon('user')}\n                        </div>\n                      </div>\n                      \n                      {/* AI Response */}\n                      <div className=\"flex justify-start items-start space-x-2\">\n                        <div className=\"mt-2 flex-shrink-0\">\n                          {getMessageTypeIcon('ai')}\n                        </div>\n                        <div className=\"max-w-xs lg:max-w-md\">\n                          <div className=\"bg-gray-100 text-gray-900 px-4 py-2 rounded-2xl rounded-bl-sm\">\n                            <div className=\"text-sm prose prose-sm max-w-none\">\n                              <ReactMarkdown \n                                remarkPlugins={[remarkGfm]}\n                                components={{\n                                  ul: ({ children }) => <ul className=\"list-disc pl-4 mb-2\">{children}</ul>,\n                                  ol: ({ children }) => <ol className=\"list-decimal pl-4 mb-2\">{children}</ol>,\n                                  li: ({ children }) => <li className=\"mb-1\">{children}</li>,\n                                  p: ({ children }) => <p className=\"mb-2 last:mb-0\">{children}</p>,\n                                  strong: ({ children }) => <strong className=\"font-semibold\">{children}</strong>,\n                                  em: ({ children }) => <em className=\"italic\">{children}</em>,\n                                  code: ({ children }) => <code className=\"bg-gray-200 px-1 py-0.5 rounded text-xs font-mono\">{children}</code>,\n                                  pre: ({ children }) => <pre className=\"bg-gray-200 p-2 rounded text-xs font-mono overflow-x-auto\">{children}</pre>,\n                                  h1: ({ children }) => <h1 className=\"text-base font-bold mb-2\">{children}</h1>,\n                                  h2: ({ children }) => <h2 className=\"text-sm font-bold mb-1\">{children}</h2>,\n                                  h3: ({ children }) => <h3 className=\"text-sm font-semibold mb-1\">{children}</h3>,\n                                }}\n                              >\n                                {conv.response}\n                              </ReactMarkdown>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n              <div ref={chatEndRef} />\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Command Bar */}\n      <Card className=\"bg-white/95 backdrop-blur-sm border shadow-2xl\">\n        <CardContent className=\"p-3 space-y-3\">\n          <div className=\"flex items-center space-x-3\">\n            {/* AI Avatar - Also serves as drag handle */}\n            <div \n              className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center flex-shrink-0 cursor-move\" \n              onMouseDown={handleHeaderMouseDown}\n              title=\"Drag to move AI assistant\"\n            >\n              <Bot className=\"h-5 w-5 text-white\" />\n            </div>\n            \n            {/* Input Field */}\n            <div className=\"flex-1 relative\">\n              <Input\n                ref={inputRef}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Ask your AI assistant anything...\"\n                className=\"w-full pr-12 bg-gray-50 border-gray-200 focus:bg-white transition-colors\"\n                disabled={sendMessageMutation.isPending}\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!message.trim() || sendMessageMutation.isPending}\n                size=\"sm\"\n                className=\"absolute right-1 top-1 h-8 w-8 p-0 bg-blue-500 hover:bg-blue-600\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white\"></div>\n                ) : (\n                  <Send className=\"h-3 w-3\" />\n                )}\n              </Button>\n            </div>\n\n            {/* Expand/Collapse Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"h-10 w-10 p-0 flex-shrink-0\"\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronUp className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Command Pill Buttons - Always visible below input */}\n          <div className=\"flex justify-center space-x-2 pt-1\">\n            {quickActions.map((action, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleQuickAction(action.action)}\n                disabled={quickActionMutation.isPending}\n                className=\"bg-gray-50/80 border-gray-200 hover:bg-white hover:shadow-md transition-all duration-200 text-xs\"\n              >\n                <action.icon className=\"h-3 w-3 mr-1\" />\n                {action.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Status Indicator */}\n          {(sendMessageMutation.isPending || quickActionMutation.isPending) && (\n            <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-500\">\n              <div className=\"animate-pulse w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span>AI is thinking...</span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":23059},"client/src/components/ai-chat.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Bot, Send, Mic, Lightbulb } from \"lucide-react\";\n\ninterface AiChatProps {\n  workspaceId: number | null;\n}\n\nexport default function AiChat({ workspaceId }: AiChatProps) {\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch chat history\n  const { data: conversations = [] } = useQuery({\n    queryKey: [`/api/workspaces/${workspaceId}/chat`],\n    enabled: !!workspaceId,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/chat`, {\n        message: messageText,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/chat`] });\n      setMessage(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    sendMessageMutation.mutate(message.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const suggestedActions = [\n    \"📊 Show project overview\",\n    \"⚡ Create quick task\", \n    \"📅 Schedule meeting\",\n    \"💡 Get insights\",\n  ];\n\n  return (\n    <Card className=\"bg-white rounded-2xl shadow-sm border border-gray-200\">\n      <CardHeader>\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center text-white mr-3\">\n            <Bot className=\"h-4 w-4\" />\n          </div>\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">AI Assistant</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Chat Input Area */}\n        <div className=\"relative\">\n          <Textarea\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask or find anything from your workspace... Try 'Show me overdue tasks' or 'Create a new project for client onboarding'\"\n            className=\"resize-none focus:ring-2 focus:ring-primary focus:border-transparent pr-20\"\n            rows={3}\n            disabled={sendMessageMutation.isPending}\n          />\n          <div className=\"absolute bottom-3 right-3 flex space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" disabled>\n              <Mic className=\"h-4 w-4\" />\n            </Button>\n            <Button \n              size=\"sm\" \n              onClick={handleSendMessage}\n              disabled={!message.trim() || sendMessageMutation.isPending}\n            >\n              {sendMessageMutation.isPending ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Suggested Actions */}\n        <div className=\"flex flex-wrap gap-2\">\n          {suggestedActions.map((action, index) => (\n            <Badge \n              key={index}\n              variant=\"secondary\"\n              className=\"cursor-pointer hover:bg-gray-200 transition-colors\"\n              onClick={() => setMessage(action.replace(/^\\S+\\s/, ''))}\n            >\n              {action}\n            </Badge>\n          ))}\n        </div>\n\n        {/* Chat History */}\n        <div className=\"border-t border-gray-100 pt-4\">\n          <div className=\"text-sm text-gray-500 mb-2\">Recent conversation:</div>\n          <ScrollArea className=\"h-48\">\n            <div className=\"space-y-3\">\n              {conversations.length === 0 ? (\n                <div className=\"text-center py-4 text-gray-400\">\n                  <Lightbulb className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">Start a conversation with your AI assistant</p>\n                </div>\n              ) : (\n                conversations\n                  .slice()\n                  .reverse()\n                  .map((conv: any) => (\n                    <div key={conv.id} className=\"space-y-2\">\n                      <div className=\"p-3 bg-gray-50 rounded-lg text-sm\">\n                        <strong>You:</strong> {conv.message}\n                      </div>\n                      {conv.response && (\n                        <div className=\"p-3 bg-primary/5 rounded-lg text-sm\">\n                          <strong>AI:</strong> {conv.response}\n                        </div>\n                      )}\n                    </div>\n                  ))\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5561},"client/src/components/brain-dump.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GripVertical, X, Plus, Lightbulb } from \"lucide-react\";\n\ninterface BrainDumpProps {\n  workspaceId: number | null;\n}\n\nexport default function BrainDump({ workspaceId }: BrainDumpProps) {\n  const [newItem, setNewItem] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch brain dump items\n  const { data: brainDumpItems = [], isLoading } = useQuery({\n    queryKey: [`/api/workspaces/${workspaceId}/brain-dump`],\n    enabled: !!workspaceId,\n  });\n\n  // Add brain dump item mutation\n  const addItemMutation = useMutation({\n    mutationFn: async (text: string) => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/brain-dump`, {\n        text,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/brain-dump`] });\n      setNewItem(\"\");\n      toast({\n        title: \"Item added\",\n        description: \"Brain dump item has been added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add brain dump item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove brain dump item mutation\n  const removeItemMutation = useMutation({\n    mutationFn: async (itemId: number) => {\n      return await apiRequest(\"DELETE\", `/api/brain-dump/${itemId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/brain-dump`] });\n      toast({\n        title: \"Item removed\",\n        description: \"Brain dump item has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove brain dump item.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear all brain dump items mutation\n  const clearAllMutation = useMutation({\n    mutationFn: async () => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      return await apiRequest(\"DELETE\", `/api/workspaces/${workspaceId}/brain-dump`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/brain-dump`] });\n      toast({\n        title: \"Brain dump cleared\",\n        description: \"All brain dump items have been removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear brain dump.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddItem = () => {\n    if (!newItem.trim() || addItemMutation.isPending) return;\n    addItemMutation.mutate(newItem.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleAddItem();\n    }\n  };\n\n  const handleRemoveItem = (itemId: number) => {\n    removeItemMutation.mutate(itemId);\n  };\n\n  const handleClearAll = () => {\n    if (brainDumpItems.length === 0) return;\n    clearAllMutation.mutate();\n  };\n\n  const handleDragStart = (e: React.DragEvent, item: any) => {\n    e.dataTransfer.setData(\"application/json\", JSON.stringify({\n      type: \"brain-dump-item\",\n      data: item,\n    }));\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Brain Dump</h3>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          onClick={handleClearAll}\n          disabled={brainDumpItems.length === 0 || clearAllMutation.isPending}\n          className=\"text-sm text-gray-500 hover:text-gray-700\"\n        >\n          Clear\n        </Button>\n      </div>\n\n      {/* Add new item input */}\n      <div className=\"mb-4\">\n        <div className=\"flex\">\n          <Input\n            type=\"text\"\n            placeholder=\"Quick thoughts, ideas, or tasks...\"\n            value={newItem}\n            onChange={(e) => setNewItem(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"flex-1 text-sm focus:ring-2 focus:ring-primary focus:border-transparent\"\n            disabled={addItemMutation.isPending}\n          />\n          <Button \n            className=\"ml-2 px-3 py-2\"\n            onClick={handleAddItem}\n            disabled={!newItem.trim() || addItemMutation.isPending}\n          >\n            {addItemMutation.isPending ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n            ) : (\n              <Plus className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Brain dump items list */}\n      <div className=\"space-y-2\">\n        {isLoading ? (\n          <div className=\"space-y-2\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-10 bg-gray-100 rounded-lg animate-pulse\"></div>\n            ))}\n          </div>\n        ) : brainDumpItems.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Lightbulb className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">No ideas captured yet</p>\n            <p className=\"text-xs text-gray-400 mt-1\">\n              Add quick thoughts and drag them to time slots\n            </p>\n          </div>\n        ) : (\n          brainDumpItems.map((item: any) => (\n            <div\n              key={item.id}\n              className=\"flex items-center p-2 bg-gray-50 rounded-lg border border-gray-200 cursor-move hover:bg-gray-100 group transition-colors\"\n              draggable\n              onDragStart={(e) => handleDragStart(e, item)}\n            >\n              <GripVertical className=\"h-4 w-4 text-gray-400 mr-2 group-hover:text-gray-600\" />\n              <span className=\"flex-1 text-sm text-gray-700\">{item.text}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"opacity-0 group-hover:opacity-100 p-1 h-auto text-gray-400 hover:text-red-500\"\n                onClick={() => handleRemoveItem(item.id)}\n                disabled={removeItemMutation.isPending}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Instruction tip */}\n      {brainDumpItems.length > 0 && (\n        <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center text-sm text-blue-800\">\n            <Lightbulb className=\"h-4 w-4 mr-2\" />\n            <span>Drag items to time slots to convert to tasks</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6969},"client/src/components/global-search.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Search, X, Calendar, Users, Tag, FolderOpen } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface GlobalSearchProps {\n  workspaceId: number | null;\n  onTaskSelect?: (taskId: number) => void;\n  onProjectSelect?: (projectId: number) => void;\n  onMemberSelect?: (memberId: number) => void;\n  onCategorySelect?: (categoryId: number) => void;\n}\n\ninterface SearchResults {\n  tasks: any[];\n  projects: any[];\n  members: any[];\n  categories: any[];\n}\n\nexport default function GlobalSearch({\n  workspaceId,\n  onTaskSelect,\n  onProjectSelect,\n  onMemberSelect,\n  onCategorySelect\n}: GlobalSearchProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Fetch search results when query changes\n  const { data: searchResults, isLoading } = useQuery<SearchResults>({\n    queryKey: ['/api/search', workspaceId, searchQuery],\n    queryFn: async () => {\n      const response = await fetch(`/api/search?workspaceId=${workspaceId}&q=${encodeURIComponent(searchQuery)}`);\n      if (!response.ok) throw new Error('Search failed');\n      return response.json();\n    },\n    enabled: !!workspaceId && searchQuery.length >= 2 && isOpen,\n    staleTime: 1000 * 30, // 30 seconds\n  });\n\n  // Close search when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setSelectedIndex(-1);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (!isOpen || !searchResults) return;\n\n      const allResults = [\n        ...searchResults.tasks,\n        ...searchResults.projects,\n        ...searchResults.members,\n        ...searchResults.categories\n      ];\n\n      switch (event.key) {\n        case 'ArrowDown':\n          event.preventDefault();\n          setSelectedIndex(prev => (prev + 1) % allResults.length);\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSelectedIndex(prev => prev <= 0 ? allResults.length - 1 : prev - 1);\n          break;\n        case 'Enter':\n          event.preventDefault();\n          if (selectedIndex >= 0) {\n            handleResultSelect(allResults[selectedIndex]);\n          }\n          break;\n        case 'Escape':\n          setIsOpen(false);\n          setSelectedIndex(-1);\n          inputRef.current?.blur();\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, searchResults, selectedIndex]);\n\n  const handleResultSelect = (result: any) => {\n    if (result.title) {\n      // It's a task\n      onTaskSelect?.(result.id);\n    } else if (result.name && result.description !== undefined) {\n      // It's a project\n      onProjectSelect?.(result.id);\n    } else if (result.name && result.email) {\n      // It's a member\n      onMemberSelect?.(result.id);\n    } else if (result.name && result.color !== undefined) {\n      // It's a category\n      onCategorySelect?.(result.id);\n    }\n    \n    setIsOpen(false);\n    setSearchQuery('');\n    setSelectedIndex(-1);\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n    setIsOpen(false);\n    setSelectedIndex(-1);\n    inputRef.current?.focus();\n  };\n\n  const getResultIndex = (sectionResults: any[], sectionStartIndex: number, itemIndex: number) => {\n    return sectionStartIndex + itemIndex;\n  };\n\n  const renderTaskResult = (task: any, index: number, globalIndex: number) => (\n    <div\n      key={`task-${task.id}`}\n      className={`flex items-center justify-between p-3 cursor-pointer transition-colors ${\n        selectedIndex === globalIndex ? 'bg-primary/10 border-l-2 border-primary' : 'hover:bg-gray-50'\n      }`}\n      onClick={() => handleResultSelect(task)}\n    >\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <h4 className=\"text-sm font-medium text-gray-900 truncate\">{task.title}</h4>\n          <Badge variant={task.status === 'completed' ? 'default' : 'secondary'} className=\"text-xs\">\n            {task.status}\n          </Badge>\n        </div>\n        {task.description && (\n          <p className=\"text-xs text-gray-500 mt-1 truncate\">{task.description}</p>\n        )}\n        <div className=\"flex items-center space-x-3 mt-2 text-xs text-gray-400\">\n          {task.dueDate && (\n            <span className=\"flex items-center\">\n              <Calendar className=\"h-3 w-3 mr-1\" />\n              {new Date(task.dueDate).toLocaleDateString()}\n            </span>\n          )}\n          {task.projectName && (\n            <span className=\"flex items-center\">\n              <FolderOpen className=\"h-3 w-3 mr-1\" />\n              {task.projectName}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderProjectResult = (project: any, index: number, globalIndex: number) => (\n    <div\n      key={`project-${project.id}`}\n      className={`flex items-center justify-between p-3 cursor-pointer transition-colors ${\n        selectedIndex === globalIndex ? 'bg-primary/10 border-l-2 border-primary' : 'hover:bg-gray-50'\n      }`}\n      onClick={() => handleResultSelect(project)}\n    >\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <FolderOpen className=\"h-4 w-4 text-blue-500\" />\n          <h4 className=\"text-sm font-medium text-gray-900 truncate\">{project.name}</h4>\n        </div>\n        {project.description && (\n          <p className=\"text-xs text-gray-500 mt-1 truncate\">{project.description}</p>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderMemberResult = (member: any, index: number, globalIndex: number) => {\n    const memberName = member.name || member.email;\n    \n    return (\n      <div\n        key={`member-${member.id}`}\n        className={`flex items-center justify-between p-3 cursor-pointer transition-colors ${\n          selectedIndex === globalIndex ? 'bg-primary/10 border-l-2 border-primary' : 'hover:bg-gray-50'\n        }`}\n        onClick={() => handleResultSelect(member)}\n      >\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-white text-xs font-semibold\">\n              {memberName.charAt(0).toUpperCase()}\n            </span>\n          </div>\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-900\">{memberName}</h4>\n            {member.email && (\n              <p className=\"text-xs text-gray-500\">{member.email}</p>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderCategoryResult = (category: any, index: number, globalIndex: number) => (\n    <div\n      key={`category-${category.id}`}\n      className={`flex items-center justify-between p-3 cursor-pointer transition-colors ${\n        selectedIndex === globalIndex ? 'bg-primary/10 border-l-2 border-primary' : 'hover:bg-gray-50'\n      }`}\n      onClick={() => handleResultSelect(category)}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <Tag className=\"h-4 w-4 text-green-500\" />\n        <h4 className=\"text-sm font-medium text-gray-900\">{category.name}</h4>\n      </div>\n    </div>\n  );\n\n  return (\n    <div ref={searchRef} className=\"relative\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          placeholder=\"Search tasks, projects, members...\"\n          value={searchQuery}\n          onChange={(e) => {\n            setSearchQuery(e.target.value);\n            setIsOpen(e.target.value.length >= 2);\n            setSelectedIndex(-1);\n          }}\n          onFocus={() => {\n            if (searchQuery.length >= 2) {\n              setIsOpen(true);\n            }\n          }}\n          className=\"pl-10 pr-10 w-64 md:w-80\"\n        />\n        {searchQuery && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearSearch}\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 hover:bg-gray-100\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Search Results Dropdown */}\n      {isOpen && searchQuery.length >= 2 && (\n        <Card className=\"absolute top-full left-0 mt-1 max-h-[600px] overflow-y-auto z-50 border shadow-lg w-[600px]\">\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-4 text-center text-gray-500\">\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Searching...</span>\n                </div>\n              </div>\n            ) : searchResults ? (\n              <div className=\"grid grid-cols-2 gap-0\">\n                {/* Tasks Section */}\n                {searchResults.tasks && searchResults.tasks.length > 0 && (\n                  <div className=\"border-r border-gray-100\">\n                    <div className=\"px-3 py-2 bg-gray-50 border-b\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-gray-600\" />\n                        <h3 className=\"text-sm font-semibold text-gray-700\">\n                          Tasks ({searchResults.tasks.length})\n                        </h3>\n                      </div>\n                    </div>\n                    <div className=\"max-h-80 overflow-y-auto\">\n                      {searchResults.tasks.slice(0, 6).map((task, index) => \n                        renderTaskResult(task, index, getResultIndex([], 0, index))\n                      )}\n                      {searchResults.tasks.length > 6 && (\n                        <div className=\"px-3 py-1 text-xs text-gray-400 bg-gray-25\">\n                          +{searchResults.tasks.length - 6} more tasks\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Projects Section */}\n                {searchResults.projects && searchResults.projects.length > 0 && (\n                  <div className={searchResults.tasks?.length ? \"\" : \"border-r border-gray-100\"}>\n                    <div className=\"px-3 py-2 bg-gray-50 border-b\">\n                      <div className=\"flex items-center space-x-2\">\n                        <FolderOpen className=\"h-4 w-4 text-gray-600\" />\n                        <h3 className=\"text-sm font-semibold text-gray-700\">\n                          Projects ({searchResults.projects.length})\n                        </h3>\n                      </div>\n                    </div>\n                    <div className=\"max-h-80 overflow-y-auto\">\n                      {searchResults.projects.slice(0, 6).map((project, index) => \n                        renderProjectResult(project, index, getResultIndex(searchResults.tasks, searchResults.tasks?.length || 0, index))\n                      )}\n                      {searchResults.projects.length > 6 && (\n                        <div className=\"px-3 py-1 text-xs text-gray-400 bg-gray-25\">\n                          +{searchResults.projects.length - 6} more projects\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Members Section */}\n                {searchResults.members && searchResults.members.length > 0 && (\n                  <div className={`${(searchResults.tasks?.length || searchResults.projects?.length) ? \"border-t border-gray-100\" : \"\"} border-r border-gray-100`}>\n                    <div className=\"px-3 py-2 bg-gray-50 border-b\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"h-4 w-4 text-gray-600\" />\n                        <h3 className=\"text-sm font-semibold text-gray-700\">\n                          Members ({searchResults.members.length})\n                        </h3>\n                      </div>\n                    </div>\n                    <div className=\"max-h-80 overflow-y-auto\">\n                      {searchResults.members.slice(0, 6).map((member, index) => \n                        renderMemberResult(member, index, getResultIndex(\n                          [...(searchResults.tasks || []), ...(searchResults.projects || [])], \n                          (searchResults.tasks?.length || 0) + (searchResults.projects?.length || 0), \n                          index\n                        ))\n                      )}\n                      {searchResults.members.length > 6 && (\n                        <div className=\"px-3 py-1 text-xs text-gray-400 bg-gray-25\">\n                          +{searchResults.members.length - 6} more members\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Categories Section */}\n                {searchResults.categories && searchResults.categories.length > 0 && (\n                  <div className={(searchResults.tasks?.length || searchResults.projects?.length) ? \"border-t border-gray-100\" : \"\"}>\n                    <div className=\"px-3 py-2 bg-gray-50 border-b\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Tag className=\"h-4 w-4 text-gray-600\" />\n                        <h3 className=\"text-sm font-semibold text-gray-700\">\n                          Categories ({searchResults.categories.length})\n                        </h3>\n                      </div>\n                    </div>\n                    <div className=\"max-h-80 overflow-y-auto\">\n                      {searchResults.categories.slice(0, 6).map((category, index) => \n                        renderCategoryResult(category, index, getResultIndex(\n                          [...(searchResults.tasks || []), ...(searchResults.projects || []), ...(searchResults.members || [])], \n                          (searchResults.tasks?.length || 0) + (searchResults.projects?.length || 0) + (searchResults.members?.length || 0), \n                          index\n                        ))\n                      )}\n                      {searchResults.categories.length > 6 && (\n                        <div className=\"px-3 py-1 text-xs text-gray-400 bg-gray-25\">\n                          +{searchResults.categories.length - 6} more categories\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* No Results */}\n                {(!searchResults.tasks?.length && !searchResults.projects?.length && \n                  !searchResults.members?.length && !searchResults.categories?.length) && (\n                  <div className=\"col-span-2 p-4 text-center text-gray-500\">\n                    <Search className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n                    <p className=\"text-sm\">No results found for \"{searchQuery}\"</p>\n                    <p className=\"text-xs text-gray-400 mt-1\">Try a different search term</p>\n                  </div>\n                )}\n              </div>\n            ) : null}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16169},"client/src/components/notifications-dropdown.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Bell, Check, X } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from \"@/components/ui/dropdown-menu\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Notification {\n  id: number;\n  type: string;\n  title: string;\n  message: string;\n  taskId?: number;\n  isRead: boolean;\n  createdAt: string;\n}\n\ninterface NotificationsDropdownProps {\n  workspaceId: number | null;\n}\n\nexport default function NotificationsDropdown({ workspaceId }: NotificationsDropdownProps) {\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Fetch unread notification count\n  const { data: unreadCountData } = useQuery({\n    queryKey: ['notifications', 'unread-count', workspaceId],\n    queryFn: async () => {\n      if (!workspaceId) return { count: 0 };\n      const response = await fetch(`/api/workspaces/${workspaceId}/notifications/unread-count`);\n      if (!response.ok) throw new Error('Failed to fetch unread count');\n      return response.json();\n    },\n    enabled: !!workspaceId,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const unreadCount = unreadCountData?.count || 0;\n\n  // Fetch notifications when dropdown is opened\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['notifications', workspaceId],\n    queryFn: async () => {\n      if (!workspaceId) return [];\n      const response = await fetch(`/api/workspaces/${workspaceId}/notifications`);\n      if (!response.ok) throw new Error('Failed to fetch notifications');\n      return response.json();\n    },\n    enabled: !!workspaceId && isOpen,\n  });\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to mark notification as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    },\n  });\n\n  // Mark all notifications as read\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/workspaces/${workspaceId}/notifications/mark-all-read`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to mark all notifications as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    },\n  });\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n    setIsOpen(false);\n  };\n\n  const handleMarkAllAsRead = () => {\n    if (workspaceId) {\n      markAllAsReadMutation.mutate();\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'task_assigned':\n        return '📋';\n      case 'task_completed':\n        return '✅';\n      case 'comment_added':\n        return '💬';\n      default:\n        return '📢';\n    }\n  };\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n            >\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80\">\n        <DropdownMenuLabel className=\"flex items-center justify-between\">\n          <span>Notifications</span>\n          {notifications.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleMarkAllAsRead}\n              disabled={markAllAsReadMutation.isPending}\n            >\n              <Check className=\"h-4 w-4 mr-1\" />\n              Mark all read\n            </Button>\n          )}\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        <ScrollArea className=\"h-96\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              Loading notifications...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              No notifications yet\n            </div>\n          ) : (\n            notifications.map((notification: Notification) => (\n              <DropdownMenuItem\n                key={notification.id}\n                className={`p-3 cursor-pointer border-b last:border-b-0 ${\n                  !notification.isRead ? 'bg-blue-50 dark:bg-blue-950/20' : ''\n                }`}\n                onClick={() => handleNotificationClick(notification)}\n              >\n                <div className=\"flex items-start space-x-3 w-full\">\n                  <div className=\"text-lg mt-0.5\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium truncate\">\n                        {notification.title}\n                      </p>\n                      <span className=\"text-xs text-muted-foreground ml-2\">\n                        {formatTimeAgo(notification.createdAt)}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                      {notification.message}\n                    </p>\n                    {!notification.isRead && (\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-1\"></div>\n                    )}\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":7193},"client/src/components/personalized-insights-card.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Brain, Eye, Loader2 } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\ninterface PersonalizedInsightsCardProps {\n  workspaceId: number;\n}\n\ninterface PersonalizedInsight {\n  summary: string;\n  fullContent: string;\n  isLengthy: boolean;\n}\n\nexport function PersonalizedInsightsCard({ workspaceId }: PersonalizedInsightsCardProps) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: insights, isLoading, error } = useQuery<PersonalizedInsight>({\n    queryKey: ['personalized-insights', workspaceId],\n    queryFn: async () => {\n      const response = await fetch(`/api/ai/personalized-insights?workspaceId=${workspaceId}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch personalized insights');\n      }\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchInterval: false,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"h-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Brain className=\"h-5 w-5 text-purple-600\" />\n            Personalized Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"flex items-center justify-center h-32\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-purple-600\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !insights) {\n    return (\n      <Card className=\"h-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Brain className=\"h-5 w-5 text-purple-600\" />\n            Personalized Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"text-center text-muted-foreground py-8\">\n            <Brain className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n            <p>Unable to generate insights at this time.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <Brain className=\"h-5 w-5 text-purple-600\" />\n          Personalized Insights\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-4\">\n          <div className=\"text-sm text-muted-foreground leading-relaxed min-h-[80px]\">\n            <ReactMarkdown \n              remarkPlugins={[remarkGfm]}\n              components={{\n                p: ({ children }) => <p className=\"mb-2 last:mb-0\">{children}</p>,\n                ul: ({ children }) => <ul className=\"list-disc list-inside mb-2 space-y-1\">{children}</ul>,\n                ol: ({ children }) => <ol className=\"list-decimal list-inside mb-2 space-y-1\">{children}</ol>,\n                li: ({ children }) => <li className=\"text-sm\">{children}</li>,\n                strong: ({ children }) => <strong className=\"font-medium text-foreground\">{children}</strong>,\n                em: ({ children }) => <em className=\"italic\">{children}</em>,\n                code: ({ children }) => <code className=\"bg-muted px-1 py-0.5 rounded text-xs font-mono\">{children}</code>,\n              }}\n            >\n              {insights.summary}\n            </ReactMarkdown>\n          </div>\n          \n          {insights.isLengthy && (\n            <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Detailed Analysis\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh]\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5 text-purple-600\" />\n                    Detailed Productivity Analysis\n                  </DialogTitle>\n                </DialogHeader>\n                <ScrollArea className=\"max-h-[60vh] pr-4\">\n                  <div className=\"space-y-4 text-sm\">\n                    <ReactMarkdown \n                      remarkPlugins={[remarkGfm]}\n                      components={{\n                        h1: ({ children }) => <h1 className=\"text-xl font-semibold mb-3 text-foreground\">{children}</h1>,\n                        h2: ({ children }) => <h2 className=\"text-lg font-semibold mb-2 text-foreground\">{children}</h2>,\n                        h3: ({ children }) => <h3 className=\"text-base font-medium mb-2 text-foreground\">{children}</h3>,\n                        p: ({ children }) => <p className=\"mb-3 last:mb-0 leading-relaxed\">{children}</p>,\n                        ul: ({ children }) => <ul className=\"list-disc list-inside mb-3 space-y-1 pl-2\">{children}</ul>,\n                        ol: ({ children }) => <ol className=\"list-decimal list-inside mb-3 space-y-1 pl-2\">{children}</ol>,\n                        li: ({ children }) => <li className=\"text-sm leading-relaxed\">{children}</li>,\n                        strong: ({ children }) => <strong className=\"font-semibold text-foreground\">{children}</strong>,\n                        em: ({ children }) => <em className=\"italic\">{children}</em>,\n                        code: ({ children }) => <code className=\"bg-muted px-2 py-1 rounded text-xs font-mono\">{children}</code>,\n                        blockquote: ({ children }) => <blockquote className=\"border-l-4 border-purple-200 pl-4 italic text-muted-foreground mb-3\">{children}</blockquote>,\n                      }}\n                    >\n                      {insights.fullContent}\n                    </ReactMarkdown>\n                  </div>\n                </ScrollArea>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6423},"client/src/components/right-panel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, AlertTriangle, Target, Settings } from \"lucide-react\";\nimport TaskCard from \"./task-card\";\nimport BrainDump from \"./brain-dump\";\n\ninterface RightPanelProps {\n  workspaceId: number | null;\n  dueTodayTasks: any[];\n  tasks: any[];\n}\n\nexport default function RightPanel({ \n  workspaceId, \n  dueTodayTasks, \n  tasks \n}: RightPanelProps) {\n  // Get top 3 priority tasks (priority 3 tasks first, then by due date)\n  const topPriorities = tasks\n    .filter(task => task.status === 'todo')\n    .sort((a, b) => {\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority; // Higher priority first\n      }\n      if (a.dueDate && b.dueDate) {\n        return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n      }\n      return 0;\n    })\n    .slice(0, 3);\n\n  return (\n    <aside className=\"w-80 bg-white border-l border-gray-200 p-6 overflow-y-auto\">\n      {/* Due Today Section */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Due Today</h3>\n          {dueTodayTasks.length > 0 && (\n            <Badge variant=\"destructive\" className=\"text-xs\">\n              {dueTodayTasks.length} items\n            </Badge>\n          )}\n        </div>\n        <div className=\"space-y-3\">\n          {dueTodayTasks.length === 0 ? (\n            <div className=\"text-center py-6 text-gray-500\">\n              <Clock className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No tasks due today</p>\n            </div>\n          ) : (\n            dueTodayTasks.map((task: any) => {\n              const isOverdue = task.dueDate && new Date(task.dueDate) < new Date();\n              return (\n                <div\n                  key={task.id}\n                  className={`p-3 rounded-lg border ${\n                    isOverdue \n                      ? 'bg-red-50 border-red-200' \n                      : 'bg-yellow-50 border-yellow-200'\n                  }`}\n                >\n                  <div className=\"flex items-center\">\n                    <input \n                      type=\"checkbox\" \n                      className=\"w-4 h-4 text-primary rounded mr-3 focus:ring-primary\" \n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-sm font-medium text-gray-900\">{task.title}</h4>\n                      <p className={`text-xs flex items-center ${\n                        isOverdue ? 'text-red-600' : 'text-yellow-600'\n                      }`}>\n                        {isOverdue ? (\n                          <>\n                            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                            Overdue\n                          </>\n                        ) : (\n                          <>\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Due today\n                          </>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n\n      {/* Top 3 Priorities Section */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Top 3 Priorities</h3>\n          <Button variant=\"ghost\" size=\"sm\">\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"space-y-3\">\n          {topPriorities.length === 0 ? (\n            <div className=\"text-center py-6 text-gray-500\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No priority tasks</p>\n            </div>\n          ) : (\n            topPriorities.map((task: any, index: number) => {\n              const priorityColors = [\n                'bg-primary text-white',\n                'bg-secondary text-white', \n                'bg-accent text-white'\n              ];\n              const borderColors = [\n                'border-primary/20 bg-primary/5',\n                'border-secondary/20 bg-secondary/5',\n                'border-accent/20 bg-accent/5'\n              ];\n              \n              return (\n                <div \n                  key={task.id}\n                  className={`flex items-center p-3 border rounded-lg ${borderColors[index]}`}\n                >\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold mr-3 ${priorityColors[index]}`}>\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-gray-900\">{task.title}</h4>\n                    {task.project && (\n                      <p className=\"text-xs text-gray-500\">{task.project.name}</p>\n                    )}\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n\n      {/* Brain Dump Section */}\n      <BrainDump workspaceId={workspaceId} />\n    </aside>\n  );\n}\n","size_bytes":5378},"client/src/components/sidebar.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\ntype ViewMode =\n  | \"home\"\n  | \"day\"\n  | \"week\"\n  | \"month\"\n  | \"project\"\n  | \"category\"\n  | \"team\"\n  | \"kanban\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Calendar,\n  CalendarDays,\n  CalendarRange,\n  FolderOpen,\n  Tags,\n  MessageSquare,\n  Archive,\n  Settings,\n  Plus,\n  ChevronDown,\n  ChevronRight,\n  User,\n  Bot,\n  BarChart3,\n  CheckSquare,\n  DollarSign,\n  FileText,\n  Users,\n  Edit2,\n  Home,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  workspaces: any[];\n  currentWorkspaceId: number | null;\n  onWorkspaceChange: (id: number) => void;\n  projects: any[];\n  categories: any[];\n  viewMode: ViewMode;\n  onViewModeChange: (mode: ViewMode) => void;\n  onProjectFilterChange: (projectId: string) => void;\n  onCreateWorkspace: () => void;\n  onCreateProject: () => void;\n  onCreateCategory: () => void;\n  onCreateMember: () => void;\n  onEditProject: (project: any) => void;\n  onEditCategory: (category: any) => void;\n  currentPage?: string;\n}\n\nexport default function Sidebar({\n  workspaces,\n  currentWorkspaceId,\n  onWorkspaceChange,\n  projects,\n  categories,\n  viewMode,\n  onViewModeChange,\n  onProjectFilterChange,\n  onCreateWorkspace,\n  onCreateProject,\n  onCreateCategory,\n  onCreateMember,\n  onEditProject,\n  onEditCategory,\n  currentPage,\n}: SidebarProps) {\n  const [expandedProjects, setExpandedProjects] = useState<Set<number>>(\n    new Set(),\n  );\n\n  // Fetch workspace members\n  const { data: members = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/members`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Check current path to determine active project and view\n  const currentPath =\n    typeof window !== \"undefined\" ? window.location.pathname : \"\";\n  const currentSearch =\n    typeof window !== \"undefined\" ? window.location.search : \"\";\n  const urlParams = new URLSearchParams(currentSearch);\n  const activeProjectId = urlParams.get(\"project\");\n  const isVaultActive = currentPath.includes(\"/vault\");\n  const isChatActive = currentPath.includes(\"/chat\");\n  const isFinancialsActive = currentPath.includes(\"/financials\");\n\n  // Auto-expand project if it's currently active\n  React.useEffect(() => {\n    if (activeProjectId) {\n      const projectId = parseInt(activeProjectId);\n      setExpandedProjects((prev) => new Set([...prev, projectId]));\n    }\n  }, [activeProjectId]);\n\n  const toggleProject = (projectId: number) => {\n    const newExpanded = new Set(expandedProjects);\n    if (newExpanded.has(projectId)) {\n      newExpanded.delete(projectId);\n    } else {\n      newExpanded.add(projectId);\n    }\n    setExpandedProjects(newExpanded);\n  };\n\n  const navigationItems = [\n    { id: \"home\", label: \"Home\", icon: Home },\n    { id: \"chat\", label: \"Chat\", icon: MessageSquare },\n    { id: \"vault\", label: \"Vault\", icon: Archive },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-gray-200 flex flex-col\">\n      {/* Workspace Selector */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <Select\n          value={currentWorkspaceId?.toString() || \"\"}\n          onValueChange={(value) => {\n            if (value === \"add_workspace\") {\n              onCreateWorkspace();\n            } else {\n              onWorkspaceChange(parseInt(value));\n            }\n          }}\n        >\n          <SelectTrigger className=\"w-full\">\n            <SelectValue placeholder=\"Select workspace...\" />\n          </SelectTrigger>\n          <SelectContent>\n            {workspaces.map((workspace) => (\n              <SelectItem key={workspace.id} value={workspace.id.toString()}>\n                {workspace.name}\n              </SelectItem>\n            ))}\n            <SelectItem\n              value=\"add_workspace\"\n              className=\"text-blue-600 font-medium bg-gray-100 hover:bg-gray-200 flex items-center\"\n            >\n              <div className=\"flex items-center\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Workspace\n              </div>\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Navigation Sections */}\n      <nav className=\"flex-1 overflow-y-auto\">\n        {/* Main Navigation */}\n        <div className=\"p-4\">\n          <ul className=\"space-y-1\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = item.id === \"home\" && viewMode === \"home\";\n              return (\n                <li key={item.id}>\n                  {item.id === \"chat\" ? (\n                    <Link href={`/workspace/${currentWorkspaceId}/chat`}>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start text-sm font-medium text-gray-700 hover:bg-gray-100\"\n                      >\n                        <Icon className=\"h-4 w-4 mr-3\" />\n                        {item.label}\n                      </Button>\n                    </Link>\n                  ) : item.id === \"vault\" ? (\n                    <Link href={`/workspace/${currentWorkspaceId}/vault`}>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start text-sm font-medium text-gray-700 hover:bg-gray-100\"\n                      >\n                        <Icon className=\"h-4 w-4 mr-3\" />\n                        {item.label}\n                      </Button>\n                    </Link>\n                  ) : (\n                    <Button\n                      variant={isActive ? \"default\" : \"ghost\"}\n                      className={`w-full justify-start text-sm font-medium ${\n                        isActive\n                          ? \"bg-primary text-white\"\n                          : \"text-gray-700 hover:bg-gray-100\"\n                      }`}\n                      onClick={() => {\n                        if (item.id === \"home\") {\n                          onViewModeChange(\"home\");\n                        }\n                      }}\n                    >\n                      <Icon className=\"h-4 w-4 mr-3\" />\n                      {item.label}\n                    </Button>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        {/* Projects Section */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wide\">\n              Projects\n            </h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onCreateProject}>\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"space-y-1\">\n            {projects.map((project: any) => {\n              const isExpanded = expandedProjects.has(project.id);\n              return (\n                <div key={project.id}>\n                  <Collapsible\n                    open={isExpanded}\n                    onOpenChange={() => toggleProject(project.id)}\n                  >\n                    <CollapsibleTrigger asChild>\n                      <div className=\"flex items-center w-full group\">\n                        <Button\n                          variant=\"ghost\"\n                          className=\"flex-1 justify-start text-sm font-medium text-gray-700 hover:bg-gray-100\"\n                        >\n                          {isExpanded ? (\n                            <ChevronDown className=\"h-3 w-3 mr-2\" />\n                          ) : (\n                            <ChevronRight className=\"h-3 w-3 mr-2\" />\n                          )}\n                          <FolderOpen className=\"h-4 w-4 text-primary mr-2\" />\n                          <span className=\"truncate\">{project.name}</span>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity mr-1\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onEditProject(project);\n                          }}\n                        >\n                          <Edit2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CollapsibleTrigger>\n                    <CollapsibleContent className=\"ml-5 space-y-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className={`w-full justify-start text-xs hover:bg-gray-100 ${\n                          viewMode === \"kanban\" &&\n                          activeProjectId === project.id.toString()\n                            ? \"bg-purple-50 text-purple-700 border-l-2 border-purple-500\"\n                            : \"text-gray-600\"\n                        }`}\n                        onClick={() => {\n                          onViewModeChange(\"kanban\");\n                          onProjectFilterChange(project.id.toString());\n                        }}\n                      >\n                        <CheckSquare className=\"h-3 w-3 mr-2\" />\n                        Tasks\n                      </Button>\n                      <Link\n                        href={`/workspace/${currentWorkspaceId}/vault?project=${project.id}`}\n                      >\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className={`w-full justify-start text-xs hover:bg-gray-100 ${\n                            isVaultActive &&\n                            activeProjectId === project.id.toString()\n                              ? \"bg-blue-50 text-blue-700 border-l-2 border-blue-500\"\n                              : \"text-gray-600\"\n                          }`}\n                        >\n                          <Archive className=\"h-3 w-3 mr-2\" />\n                          Vault\n                        </Button>\n                      </Link>\n                      <Link\n                        href={`/workspace/${currentWorkspaceId}/chat?project=${project.id}`}\n                      >\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className={`w-full justify-start text-xs hover:bg-gray-100 ${\n                            isChatActive &&\n                            activeProjectId === project.id.toString()\n                              ? \"bg-green-50 text-green-700 border-l-2 border-green-500\"\n                              : \"text-gray-600\"\n                          }`}\n                        >\n                          <MessageSquare className=\"h-3 w-3 mr-2\" />\n                          Chat\n                        </Button>\n                      </Link>\n                      <Link\n                        href={`/workspace/${currentWorkspaceId}/financials?project=${project.id}`}\n                      >\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className={`w-full justify-start text-xs hover:bg-gray-100 ${\n                            isFinancialsActive &&\n                            activeProjectId === project.id.toString()\n                              ? \"bg-emerald-50 text-emerald-700 border-l-2 border-emerald-500\"\n                              : \"text-gray-600\"\n                          }`}\n                        >\n                          <DollarSign className=\"h-3 w-3 mr-2\" />\n                          Financials\n                        </Button>\n                      </Link>\n                      <Collapsible>\n                        <CollapsibleTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-full justify-start text-xs text-gray-600 hover:bg-gray-100\"\n                          >\n                            <ChevronDown className=\"h-3 w-3 mr-2\" />\n                            <FileText className=\"h-3 w-3 mr-2\" />\n                            Pages\n                          </Button>\n                        </CollapsibleTrigger>\n                        <CollapsibleContent className=\"ml-5 space-y-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-full justify-start text-xs text-gray-500 hover:bg-gray-100\"\n                          >\n                            <FileText className=\"h-3 w-3 mr-2\" />\n                            Requirements\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-full justify-start text-xs text-gray-500 hover:bg-gray-100\"\n                          >\n                            <FileText className=\"h-3 w-3 mr-2\" />\n                            Design Brief\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-full justify-start text-xs text-gray-400 hover:bg-gray-100\"\n                          >\n                            <Plus className=\"h-3 w-3 mr-2\" />\n                            Add New Page\n                          </Button>\n                        </CollapsibleContent>\n                      </Collapsible>\n                    </CollapsibleContent>\n                  </Collapsible>\n                </div>\n              );\n            })}\n            {projects.length === 0 && (\n              <div className=\"text-sm text-gray-500 text-center py-4\">\n                No projects yet\n                <br />\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"mt-1 text-xs\"\n                  onClick={onCreateProject}\n                >\n                  Create your first project\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Categories Section */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wide\">\n              Categories\n            </h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onCreateCategory}>\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <ul className=\"space-y-1\">\n            {categories?.map((category: any) => (\n              <li key={category.id} className=\"group\">\n                <div className=\"flex items-center\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex-1 justify-start text-sm font-medium text-gray-700 hover:bg-gray-100\"\n                  >\n                    <Tags className=\"h-4 w-4 text-primary mr-3\" />\n                    <span className=\"truncate\">{category.name}</span>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity mr-1\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEditCategory(category);\n                    }}\n                  >\n                    <Edit2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </li>\n            ))}\n            {(!categories || categories.length === 0) && (\n              <li className=\"text-sm text-gray-500 text-center py-2\">\n                No categories yet\n              </li>\n            )}\n          </ul>\n        </div>\n\n        {/* Members Section */}\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <Link href={`/workspace/${currentWorkspaceId}/members`}>\n              <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wide hover:text-primary cursor-pointer transition-colors\">\n                Members\n              </h3>\n            </Link>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onCreateMember}>\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <ul className=\"space-y-2\">\n            {members.map((member: any) => (\n              <li key={member.id} className=\"flex items-center\">\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-white text-xs mr-2\">\n                  {member.memberType === \"agent\" ? (\n                    <Bot className=\"h-3 w-3\" />\n                  ) : (\n                    <User className=\"h-3 w-3\" />\n                  )}\n                </div>\n                <span className=\"text-sm text-gray-700 flex-1\">\n                  {member.name}\n                </span>\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n              </li>\n            ))}\n            {members.length === 0 && (\n              <li className=\"text-sm text-gray-500 text-center py-2\">\n                No members yet\n              </li>\n            )}\n          </ul>\n        </div>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":17868},"client/src/components/task-card.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { User, Bot, Edit2, MessageCircle, Trash2 } from \"lucide-react\";\nimport TaskCommentsModal from \"./task-comments-modal\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface TaskCardProps {\n  task: any;\n  onStatusChange: (completed: boolean) => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  draggable?: boolean;\n  onDragStart?: (e: React.DragEvent) => void;\n  workspaceId?: number;\n}\n\nexport default function TaskCard({ \n  task, \n  onStatusChange, \n  onEdit,\n  onDelete,\n  draggable = false,\n  onDragStart,\n  workspaceId \n}: TaskCardProps) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deleteType, setDeleteType] = useState<'single' | 'all'>('single');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleEditClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onEdit) {\n      onEdit();\n    }\n  };\n\n  const handleDeleteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setShowDeleteModal(true);\n  };\n\n  const confirmDelete = async () => {\n    if (!workspaceId) {\n      toast({\n        title: \"Error\",\n        description: \"Unable to delete task: workspace not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsDeleting(true);\n    \n    try {\n      if (task.taskRecurrenceId && deleteType === 'all') {\n        // Delete all future recurring tasks\n        await apiRequest('DELETE', `/api/task-recurrences/${task.taskRecurrenceId}`);\n        \n        toast({\n          title: \"Recurring tasks deleted\",\n          description: `This instance and all future recurring instances of \"${task.title}\" have been deleted.`,\n        });\n      } else {\n        // Delete single task\n        await apiRequest('DELETE', `/api/tasks/${task.id}`);\n        \n        toast({\n          title: \"Task deleted\",\n          description: `\"${task.title}\" has been deleted successfully.`,\n        });\n      }\n\n      // Invalidate cache to refresh task list\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks/due-today`] });\n      \n      if (onDelete) {\n        onDelete();\n      }\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete task. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(false);\n      setShowDeleteModal(false);\n    }\n  };\n  const getPriorityColor = (priority: number) => {\n    switch (priority) {\n      case 3: return \"bg-red-100 border-red-200 text-red-800\";\n      case 2: return \"bg-yellow-100 border-yellow-200 text-yellow-800\";\n      case 1: return \"bg-blue-100 border-blue-200 text-blue-800\";\n      default: return \"bg-gray-100 border-gray-200 text-gray-600\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return \"bg-green-100 border-green-200\";\n      case 'in_progress': return \"bg-yellow-100 border-yellow-200\";\n      default: return \"bg-white border-gray-200\";\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`p-3 border rounded-lg ${getStatusColor(task.status)} ${\n          draggable ? 'cursor-move' : ''\n        } hover:shadow-sm transition-shadow`}\n        draggable={draggable}\n        onDragStart={onDragStart}\n      >\n      <div className=\"flex items-start space-x-2\">\n        <Checkbox\n          checked={task.status === 'completed'}\n          onCheckedChange={(checked) => onStatusChange(!!checked)}\n          className=\"mt-0.5\"\n        />\n        <div className=\"flex-1 min-w-0\">\n          <h4 className={`text-sm font-medium truncate ${\n            task.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-900'\n          }`}>\n            {task.title}\n          </h4>\n          {task.description && (\n            <p className=\"text-xs text-gray-500 mt-1 line-clamp-2\">\n              {task.description}\n            </p>\n          )}\n          <div className=\"flex items-center justify-between mt-2\">\n            <div className=\"flex items-center space-x-2 flex-wrap\">\n              {task.priority > 0 && (\n                <Badge \n                  variant=\"outline\" \n                  className={`text-xs px-1 py-0 ${getPriorityColor(task.priority)}`}\n                >\n                  P{task.priority}\n                </Badge>\n              )}\n              {task.assignedMemberId && task.assignedMember && (\n                <Badge variant=\"outline\" className=\"text-xs px-1 py-0 bg-blue-50 text-blue-700\">\n                  {task.assignedMember.memberType === 'agent' ? (\n                    <div className=\"flex items-center space-x-1\">\n                      <Bot className=\"h-2.5 w-2.5\" />\n                      <span>AI Agent</span>\n                    </div>\n                  ) : (\n                    task.assignedMember.user?.firstName || \n                    task.assignedMember.user?.email?.split('@')[0] || \n                    'Assigned'\n                  )}\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex flex-col items-end text-xs text-gray-400 space-y-0.5\">\n              {task.project && (\n                <span className=\"truncate max-w-20\">{task.project.name}</span>\n              )}\n              {task.category && (\n                <span className=\"truncate max-w-20\">{task.category.name}</span>\n              )}\n              {task.dueDate && (\n                <span className=\"text-gray-500 font-medium\">\n                  {new Date(task.dueDate).toLocaleDateString('en-US', { \n                    month: 'short', \n                    day: 'numeric' \n                  })}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          {task.assignedMemberId && task.assignedMember && (\n            <div className=\"flex items-center\">\n              <Avatar className=\"h-6 w-6\">\n                <AvatarFallback className=\"text-xs bg-blue-100 text-blue-600\">\n                  {task.assignedMember.memberType === 'agent' ? (\n                    <Bot className=\"h-3 w-3\" />\n                  ) : (\n                    task.assignedMember.user?.firstName?.charAt(0) || \n                    task.assignedMember.user?.email?.charAt(0)?.toUpperCase() || \n                    <User className=\"h-3 w-3\" />\n                  )}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n          )}\n          {workspaceId && (\n            <TaskCommentsModal \n              task={task}\n              workspaceId={workspaceId}\n              trigger={\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0 opacity-60 hover:opacity-100\"\n                >\n                  <MessageCircle className=\"h-3 w-3\" />\n                </Button>\n              }\n            />\n          )}\n          {onEdit && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleEditClick}\n              className=\"h-6 w-6 p-0 opacity-60 hover:opacity-100\"\n            >\n              <Edit2 className=\"h-3 w-3\" />\n            </Button>\n          )}\n          {workspaceId && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDeleteClick}\n              disabled={isDeleting}\n              className=\"h-6 w-6 p-0 opacity-70 hover:opacity-100 hover:text-red-600 hover:bg-red-50\"\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n\n    {/* Delete Confirmation Modal */}\n    <Dialog open={showDeleteModal} onOpenChange={setShowDeleteModal}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Delete Task</DialogTitle>\n        </DialogHeader>\n        <div className=\"py-4\">\n          <p className=\"text-sm text-gray-600\">\n            Are you sure you want to delete <span className=\"font-semibold\">\"{task.title}\"</span>? \n            This action cannot be undone.\n          </p>\n          \n          {task.taskRecurrenceId && (\n            <div className=\"mt-4 p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n              <p className=\"text-sm font-medium text-amber-800 mb-2\">\n                This is a recurring task\n              </p>\n              <div className=\"space-y-2\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"deleteType\"\n                    value=\"single\"\n                    checked={deleteType === 'single'}\n                    onChange={(e) => setDeleteType(e.target.value as 'single' | 'all')}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-700\">Delete only this instance</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"deleteType\"\n                    value=\"all\"\n                    checked={deleteType === 'all'}\n                    onChange={(e) => setDeleteType(e.target.value as 'single' | 'all')}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-700\">Delete this instance and all future recurring instances</span>\n                </label>\n              </div>\n            </div>\n          )}\n        </div>\n        <DialogFooter className=\"flex justify-end space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowDeleteModal(false)}\n            disabled={isDeleting}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"destructive\"\n            onClick={confirmDelete}\n            disabled={isDeleting}\n          >\n            {isDeleting ? \"Deleting...\" : (deleteType === 'all' && task.taskRecurrenceId ? \"Delete All\" : \"Delete Task\")}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n    </>\n  );\n}\n","size_bytes":10752},"client/src/components/task-comments-modal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { MessageCircle, Send, Trash2, X, AtSign } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TaskComment {\n  id: number;\n  comment: string;\n  userId: string;\n  createdAt: string;\n}\n\ninterface Task {\n  id: number;\n  title: string;\n  description?: string;\n  status: string;\n  priority: number;\n  dueDate?: string;\n  assignedMemberId?: number;\n}\n\ninterface TaskCommentsModalProps {\n  task: Task;\n  workspaceId: number;\n  onClose?: () => void;\n  trigger?: React.ReactNode;\n}\n\nexport default function TaskCommentsModal({ \n  task, \n  workspaceId, \n  onClose,\n  trigger \n}: TaskCommentsModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [newComment, setNewComment] = useState(\"\");\n  const [showMentions, setShowMentions] = useState(false);\n  const [mentionFilter, setMentionFilter] = useState(\"\");\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch task comments\n  const { data: commentsData = [], isLoading } = useQuery({\n    queryKey: ['task-comments', task.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks/${task.id}/comments`);\n      if (!response.ok) throw new Error('Failed to fetch comments');\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Ensure comments is always an array\n  const comments = Array.isArray(commentsData) ? commentsData : [];\n\n  // Fetch workspace members for assigned user names\n  const { data: membersData } = useQuery({\n    queryKey: ['workspace-members', workspaceId],\n    queryFn: async () => {\n      const response = await fetch(`/api/workspaces/${workspaceId}/members`);\n      if (!response.ok) throw new Error('Failed to fetch members');\n      return response.json();\n    },\n    enabled: !!workspaceId,\n  });\n\n  const members = Array.isArray(membersData) ? membersData : [];\n\n  const getAssignedMemberName = (assignedMemberId: number) => {\n    const member = members.find((m: any) => m.id === assignedMemberId);\n    return member ? (member.name || member.email || `Member ${assignedMemberId}`) : `Member ${assignedMemberId}`;\n  };\n\n  // Handle @mention functionality\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const position = e.target.selectionStart || 0;\n    \n    setNewComment(value);\n    setCursorPosition(position);\n    \n    // Check if user typed @ symbol\n    const atIndex = value.lastIndexOf('@', position - 1);\n    if (atIndex !== -1) {\n      const textAfterAt = value.substring(atIndex + 1, position);\n      if (!textAfterAt.includes(' ')) {\n        setMentionFilter(textAfterAt);\n        setShowMentions(true);\n      } else {\n        setShowMentions(false);\n      }\n    } else {\n      setShowMentions(false);\n    }\n  };\n\n  const selectMention = (member: any) => {\n    const atIndex = newComment.lastIndexOf('@', cursorPosition - 1);\n    if (atIndex !== -1) {\n      const beforeAt = newComment.substring(0, atIndex);\n      const afterMention = newComment.substring(cursorPosition);\n      const memberHandle = member.name || member.email?.split('@')[0] || `Member${member.id}`;\n      const newValue = `${beforeAt}@${memberHandle} ${afterMention}`;\n      \n      setNewComment(newValue);\n      setShowMentions(false);\n      setMentionFilter(\"\");\n      \n      // Focus back to input\n      setTimeout(() => {\n        if (inputRef.current) {\n          const newPosition = beforeAt.length + memberHandle.length + 2;\n          inputRef.current.focus();\n          inputRef.current.setSelectionRange(newPosition, newPosition);\n        }\n      }, 0);\n    }\n  };\n\n  // Filter members for mention dropdown\n  const filteredMembers = members.filter((member: any) => {\n    const name = member.name || member.email || '';\n    return name.toLowerCase().includes(mentionFilter.toLowerCase());\n  });\n\n  // Extract mentioned users from comment\n  const extractMentions = (comment: string) => {\n    const mentionRegex = /@(\\w+)/g;\n    const mentions = [];\n    let match;\n    \n    while ((match = mentionRegex.exec(comment)) !== null) {\n      const handle = match[1];\n      // Find member by name or email prefix\n      const member = members.find((m: any) => {\n        const name = m.name || '';\n        const emailPrefix = m.email?.split('@')[0] || '';\n        return name.toLowerCase() === handle.toLowerCase() || \n               emailPrefix.toLowerCase() === handle.toLowerCase() ||\n               `member${m.id}` === handle.toLowerCase();\n      });\n      if (member) {\n        mentions.push(member.userId);\n      }\n    }\n    \n    return mentions;\n  };\n\n  // Add new comment\n  const addCommentMutation = useMutation({\n    mutationFn: async (comment: string) => {\n      const taggedUserIds = extractMentions(comment);\n      const response = await fetch(`/api/tasks/${task.id}/comments`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ comment, workspaceId, taggedUserIds }),\n      });\n      if (!response.ok) throw new Error('Failed to add comment');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['task-comments', task.id] });\n      setNewComment(\"\");\n      setShowMentions(false);\n    },\n  });\n\n  // Delete comment\n  const deleteCommentMutation = useMutation({\n    mutationFn: async (commentId: number) => {\n      const response = await fetch(`/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to delete comment');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['task-comments', task.id] });\n    },\n  });\n\n  const handleAddComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      addCommentMutation.mutate(newComment.trim());\n    }\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    if (confirm(\"Are you sure you want to delete this comment?\")) {\n      deleteCommentMutation.mutate(commentId);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getPriorityColor = (priority: number) => {\n    switch (priority) {\n      case 3: return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case 2: return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\";\n      case 1: return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const getPriorityText = (priority: number) => {\n    switch (priority) {\n      case 3: return \"Urgent\";\n      case 2: return \"High\";\n      case 1: return \"Medium\";\n      default: return \"Low\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case 'in_progress': return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    setIsOpen(open);\n    if (!open && onClose) {\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button variant=\"ghost\" size=\"sm\">\n            <MessageCircle className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Task Details & Comments</span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(false)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden flex flex-col\">\n          {/* Task Details */}\n          <div className=\"space-y-4 pb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">{task.title}</h3>\n              {task.description && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {task.description}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge className={getStatusColor(task.status)}>\n                {task.status.replace('_', ' ').toUpperCase()}\n              </Badge>\n              <Badge className={getPriorityColor(task.priority)}>\n                {getPriorityText(task.priority)} Priority\n              </Badge>\n              {task.dueDate && (\n                <Badge variant=\"outline\">\n                  Due: {new Date(task.dueDate).toLocaleDateString()}\n                </Badge>\n              )}\n              {task.assignedMemberId && (\n                <Badge variant=\"secondary\">\n                  Assigned to: {getAssignedMemberName(task.assignedMemberId)}\n                </Badge>\n              )}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Comments Section */}\n          <div className=\"flex-1 flex flex-col mt-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"font-medium\">Comments ({comments.length})</h4>\n            </div>\n\n            {/* Comments List */}\n            <ScrollArea className=\"flex-1 pr-4\">\n              {isLoading ? (\n                <div className=\"text-center text-muted-foreground py-4\">\n                  Loading comments...\n                </div>\n              ) : comments.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <MessageCircle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p>No comments yet. Be the first to comment!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {comments.map((comment: any) => (\n                    <div key={comment.id} className=\"border rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-xs text-white font-medium\">\n                            {(comment.userName || comment.userId).charAt(0).toUpperCase()}\n                          </div>\n                          <span className=\"text-sm font-medium\">\n                            {comment.userName || comment.userId}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs text-muted-foreground\">\n                            {formatDate(comment.createdAt)}\n                          </span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteComment(comment.id)}\n                            disabled={deleteCommentMutation.isPending}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <p className=\"text-sm\">{comment.comment}</p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n\n            {/* Add Comment Form */}\n            <div className=\"border-t pt-4 mt-4 relative\">\n              <form onSubmit={handleAddComment} className=\"flex space-x-2\">\n                <div className=\"flex-1 relative\">\n                  <Input\n                    ref={inputRef}\n                    placeholder=\"Add a comment... (Use @ to mention team members)\"\n                    value={newComment}\n                    onChange={handleInputChange}\n                    disabled={addCommentMutation.isPending}\n                    className=\"flex-1\"\n                  />\n                  \n                  {/* Mention Dropdown */}\n                  {showMentions && filteredMembers.length > 0 && (\n                    <div className=\"absolute bottom-full left-0 right-0 mb-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg max-h-32 overflow-y-auto z-50\">\n                      {filteredMembers.slice(0, 5).map((member: any) => (\n                        <button\n                          key={member.id}\n                          type=\"button\"\n                          onClick={() => selectMention(member)}\n                          className=\"w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center space-x-2 text-sm\"\n                        >\n                          <AtSign className=\"h-3 w-3\" />\n                          <span>{member.name || member.email || `Member ${member.id}`}</span>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={!newComment.trim() || addCommentMutation.isPending}\n                  size=\"sm\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </form>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Type @ to mention team members and send them targeted notifications\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14493},"client/src/components/time-slot-grid.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TaskCard from \"./task-card\";\nimport { Plus, Calendar, Clock, FolderOpen, ChevronLeft, ChevronRight, Users, Bot, LayoutGrid, CalendarDays } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TimeSlotGridProps {\n  viewMode: 'day' | 'week' | 'month' | 'project' | 'category' | 'team' | 'kanban';\n  tasks: any[];\n  workspaceId: number | null;\n  onCreateTask: () => void;\n  onEditTask?: (task: any) => void;\n  projects?: any[];\n  categories?: any[];\n  members?: any[];\n  currentDate?: Date;\n  onNavigateDate?: (direction: 'prev' | 'next') => void;\n  selectedProjectId?: string;\n  selectedCategoryId?: string;\n  selectedUserId?: string;\n}\n\nexport default function TimeSlotGrid({ \n  viewMode, \n  tasks, \n  workspaceId, \n  onCreateTask,\n  onEditTask,\n  projects = [],\n  categories = [],\n  members = [],\n  currentDate = new Date(),\n  onNavigateDate,\n  selectedProjectId = 'all',\n  selectedCategoryId = 'all',\n  selectedUserId = 'all'\n}: TimeSlotGridProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // State for Month view expandable weeks - declared at top level to follow Rules of Hooks\n  const [expandedWeeks, setExpandedWeeks] = useState<Set<number>>(new Set());\n  \n  // State for expandable task cards - tracks which sections show more than minimum cards\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set());\n\n  // State for date range filtering in Project, Category, Team views\n  const [dateRangeStart, setDateRangeStart] = useState<Date>(() => {\n    // Default to start of current week (Sunday)\n    const today = new Date();\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n    return startOfWeek;\n  });\n\n  const [dateRangeEnd, setDateRangeEnd] = useState<Date>(() => {\n    // Default to end of current week (Saturday)\n    const today = new Date();\n    const endOfWeek = new Date(today);\n    endOfWeek.setDate(today.getDate() - today.getDay() + 6);\n    endOfWeek.setHours(23, 59, 59, 999);\n    return endOfWeek;\n  });\n\n  // State for showing date picker modal\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [tempStartDate, setTempStartDate] = useState('');\n  const [tempEndDate, setTempEndDate] = useState('');\n\n  // Helper function to determine how many cards to show (minimum 12, expandable)\n  const getVisibleTaskCount = (sectionId: string, totalTasks: number) => {\n    const minCards = Math.min(12, totalTasks); // Show minimum 12 or all if less than 12\n    const isExpanded = expandedSections.has(sectionId);\n    return isExpanded ? totalTasks : minCards;\n  };\n\n  // Helper function to toggle section expansion\n  const toggleSection = (sectionId: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  // Helper functions for date range navigation\n  const navigateDateRange = (direction: 'prev' | 'next') => {\n    const currentRangeDays = Math.ceil((dateRangeEnd.getTime() - dateRangeStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    if (direction === 'prev') {\n      const newStart = new Date(dateRangeStart);\n      newStart.setDate(dateRangeStart.getDate() - currentRangeDays);\n      const newEnd = new Date(dateRangeEnd);\n      newEnd.setDate(dateRangeEnd.getDate() - currentRangeDays);\n      setDateRangeStart(newStart);\n      setDateRangeEnd(newEnd);\n    } else {\n      const newStart = new Date(dateRangeStart);\n      newStart.setDate(dateRangeStart.getDate() + currentRangeDays);\n      const newEnd = new Date(dateRangeEnd);\n      newEnd.setDate(dateRangeEnd.getDate() + currentRangeDays);\n      setDateRangeStart(newStart);\n      setDateRangeEnd(newEnd);\n    }\n  };\n\n  // Helper function to update date range\n  const updateDateRange = (start: Date, end: Date) => {\n    setDateRangeStart(start);\n    setDateRangeEnd(end);\n    setShowDatePicker(false);\n  };\n\n  // Helper function to format date for input field\n  const formatDateForInput = (date: Date): string => {\n    return date.toISOString().split('T')[0];\n  };\n\n  // Helper function to open date picker with current values\n  const openDatePicker = () => {\n    setTempStartDate(formatDateForInput(dateRangeStart));\n    setTempEndDate(formatDateForInput(dateRangeEnd));\n    setShowDatePicker(true);\n  };\n\n  // Helper function to apply date range changes\n  const applyDateRange = () => {\n    if (tempStartDate && tempEndDate) {\n      const start = new Date(tempStartDate);\n      start.setHours(0, 0, 0, 0);\n      const end = new Date(tempEndDate);\n      end.setHours(23, 59, 59, 999);\n      \n      if (start <= end) {\n        updateDateRange(start, end);\n      } else {\n        toast({\n          title: \"Invalid Date Range\",\n          description: \"Start date must be before or equal to end date.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Helper function to filter tasks by date range\n  const getDateRangeFilteredTasks = () => {\n    const baseFilteredTasks = tasks.filter(task => {\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      return memberMatch && projectMatch && categoryMatch;\n    });\n\n    return baseFilteredTasks.filter(task => {\n      if (!task.dueDate) return false;\n      const taskDate = new Date(task.dueDate);\n      return taskDate >= dateRangeStart && taskDate <= dateRangeEnd;\n    });\n  };\n\n  // Update task mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ taskId, updates }: { taskId: number; updates: any }) => {\n      return await apiRequest(\"PATCH\", `/api/tasks/${taskId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks`] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTaskStatusChange = (taskId: number, completed: boolean) => {\n    updateTaskMutation.mutate({\n      taskId,\n      updates: { status: completed ? 'completed' : 'todo' },\n    });\n  };\n\n  const handleTaskTimeSlotChange = (taskId: number, dropTarget: string) => {\n    let updates: any = {};\n    \n    switch (viewMode) {\n      case 'day':\n        // For day view, update timeSlot\n        updates = { timeSlot: dropTarget };\n        break;\n        \n      case 'week':\n        // For week view, update dueDate based on day name\n        const weekStart = new Date(currentDate);\n        weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n        \n        // Map day names to indices (Sunday = 0)\n        const dayMap: { [key: string]: number } = {\n          'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3, \n          'thursday': 4, 'friday': 5, 'saturday': 6\n        };\n        \n        let dayIndex: number;\n        if (typeof dropTarget === 'string' && dropTarget in dayMap) {\n          dayIndex = dayMap[dropTarget.toLowerCase()];\n        } else {\n          // If it's a numeric string, parse it\n          dayIndex = parseInt(dropTarget);\n        }\n        \n        const newDate = new Date(weekStart);\n        newDate.setDate(weekStart.getDate() + dayIndex);\n        updates = { dueDate: newDate.toISOString().split('T')[0] };\n        break;\n        \n      case 'month':\n        // For month view, handle week-based drop targets\n        if (dropTarget.startsWith('week')) {\n          // Extract week number for week-based month view\n          const weekNumber = parseInt(dropTarget.replace('week', ''));\n          \n          // Calculate target date based on week within month\n          const monthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n          const firstDayOfWeek = new Date(monthStart);\n          firstDayOfWeek.setDate(1 + (weekNumber - 1) * 7);\n          \n          // Set to the Monday of that week for consistency\n          const dayOfWeek = firstDayOfWeek.getDay();\n          const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;\n          firstDayOfWeek.setDate(firstDayOfWeek.getDate() + mondayOffset);\n          \n          updates = { dueDate: firstDayOfWeek.toISOString().split('T')[0] };\n        }\n        break;\n        \n      case 'project':\n        // For project view, update projectId\n        const projectId = parseInt(dropTarget);\n        if (!isNaN(projectId)) {\n          updates = { projectId };\n        }\n        break;\n        \n      case 'category':\n        // For category view, update categoryId\n        const categoryId = parseInt(dropTarget);\n        if (!isNaN(categoryId)) {\n          updates = { categoryId };\n        }\n        break;\n        \n      case 'team':\n        // For team view, update assignedMemberId\n        const member = members.find(m => m.userId === dropTarget);\n        if (member) {\n          updates = { assignedMemberId: member.id };\n        }\n        break;\n        \n      case 'kanban':\n        // For kanban view, update status\n        updates = { status: dropTarget };\n        break;\n        \n      default:\n        updates = { timeSlot: dropTarget };\n    }\n    \n    if (Object.keys(updates).length > 0) {\n      updateTaskMutation.mutate({\n        taskId,\n        updates,\n      });\n    }\n  };\n\n  // Filter tasks based on view mode and active filters\n  const getFilteredTasks = () => {\n    console.log('DEBUG: Total tasks received:', tasks.length);\n    console.log('DEBUG: First few task IDs:', tasks.slice(0, 5).map(t => t.id));\n    console.log('DEBUG: Sample task data:', tasks[0]);\n    \n    // First apply the common filters (project, category, member) to all tasks\n    const baseFilteredTasks = tasks.filter(task => {\n      const memberMatch = selectedUserId === 'all' || \n                         (task.assignedMemberId && task.assignedMemberId.toString() === selectedUserId);\n      const projectMatch = selectedProjectId === 'all' || \n                          (task.projectId && task.projectId.toString() === selectedProjectId);\n      const categoryMatch = selectedCategoryId === 'all' || \n                           (task.categoryId && task.categoryId.toString() === selectedCategoryId);\n      return memberMatch && projectMatch && categoryMatch;\n    });\n\n    // Then apply view-specific date filtering\n    switch (viewMode) {\n      case 'day':\n        return baseFilteredTasks.filter(task => {\n          if (!task.dueDate) return false;\n          const taskDate = new Date(task.dueDate);\n          const taskDateStr = taskDate.toISOString().split('T')[0];\n          const currentDateStr = currentDate.toISOString().split('T')[0];\n          return taskDateStr === currentDateStr;\n        });\n      \n      case 'week':\n        return baseFilteredTasks.filter(task => {\n          if (!task.dueDate) return false;\n          const taskDate = new Date(task.dueDate);\n          const weekStart = new Date(currentDate);\n          weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n          const weekEnd = new Date(weekStart);\n          weekEnd.setDate(weekStart.getDate() + 6);\n          return taskDate >= weekStart && taskDate <= weekEnd;\n        });\n      \n      case 'month':\n        return baseFilteredTasks.filter(task => {\n          if (!task.dueDate) return false;\n          const taskDate = new Date(task.dueDate);\n          return taskDate.getMonth() === currentDate.getMonth() && \n                 taskDate.getFullYear() === currentDate.getFullYear();\n        });\n      \n      case 'project':\n      case 'category':\n      case 'team':\n      case 'kanban':\n        // For these views, return all filtered tasks (no date restriction)\n        return baseFilteredTasks;\n      \n      default:\n        return baseFilteredTasks;\n    }\n  };\n\n\n\n  // Week View with day-based grid structure\n  if (viewMode === 'week') {\n    const weekDays = [\n      { label: \"Monday\", value: \"monday\", period: \"Week Day 1\", color: \"bg-blue-50 border-blue-200\" },\n      { label: \"Tuesday\", value: \"tuesday\", period: \"Week Day 2\", color: \"bg-green-50 border-green-200\" },\n      { label: \"Wednesday\", value: \"wednesday\", period: \"Week Day 3\", color: \"bg-yellow-50 border-yellow-200\" },\n      { label: \"Thursday\", value: \"thursday\", period: \"Week Day 4\", color: \"bg-orange-50 border-orange-200\" },\n      { label: \"Friday\", value: \"friday\", period: \"Week Day 5\", color: \"bg-purple-50 border-purple-200\" },\n      { label: \"Saturday\", value: \"saturday\", period: \"Weekend\", color: \"bg-indigo-50 border-indigo-200\" },\n      { label: \"Sunday\", value: \"sunday\", period: \"Weekend\", color: \"bg-pink-50 border-pink-200\" },\n    ];\n\n    const getCurrentDay = () => {\n      const today = new Date().getDay();\n      const dayMap = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n      return dayMap[today];\n    };\n\n    const currentDay = getCurrentDay();\n    const filteredTasks = getFilteredTasks();\n    const unscheduledTasks = tasks.filter(task => {\n      // First apply base filters\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      \n      if (!memberMatch || !projectMatch || !categoryMatch) return false;\n      \n      // Task is unscheduled only if it has BOTH no assigned member AND no due date\n      return !task.assignedMemberId && !task.dueDate;\n    });\n\n    // Date navigation function for Week view\n    const navigateDate = (direction: 'prev' | 'next') => {\n      if (onNavigateDate) {\n        onNavigateDate(direction);\n      }\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Date Navigation Header for Week view */}\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              {(() => {\n                const weekStart = new Date(currentDate);\n                weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                const weekEnd = new Date(weekStart);\n                weekEnd.setDate(weekStart.getDate() + 6);\n                return `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;\n              })()}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Weekly Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-700\">Weekly Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {(() => {\n                const weekStart = new Date(currentDate);\n                weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                const weekEnd = new Date(weekStart);\n                weekEnd.setDate(weekStart.getDate() + 6);\n                return `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;\n              })()}\n            </p>\n          </div>\n          <div className=\"grid grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {(() => {\n                  // Get start and end of current week (Sunday to Saturday)\n                  const weekStart = new Date(currentDate);\n                  weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                  weekStart.setHours(0, 0, 0, 0);\n                  \n                  const weekEnd = new Date(weekStart);\n                  weekEnd.setDate(weekStart.getDate() + 6);\n                  weekEnd.setHours(23, 59, 59, 999);\n                  \n                  // Count tasks within the current week\n                  const weekTasks = filteredTasks.filter(task => {\n                    if (!task.dueDate) return false;\n                    const taskDate = new Date(task.dueDate);\n                    return taskDate >= weekStart && taskDate <= weekEnd;\n                  });\n                  \n                  return weekTasks.length;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Total Tasks\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {(() => {\n                  const weekStart = new Date(currentDate);\n                  weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                  weekStart.setHours(0, 0, 0, 0);\n                  \n                  const weekEnd = new Date(weekStart);\n                  weekEnd.setDate(weekStart.getDate() + 6);\n                  weekEnd.setHours(23, 59, 59, 999);\n                  \n                  const weekTasks = filteredTasks.filter(task => {\n                    if (!task.dueDate) return false;\n                    const taskDate = new Date(task.dueDate);\n                    return taskDate >= weekStart && taskDate <= weekEnd;\n                  });\n                  \n                  return weekTasks.filter(task => task.status === 'completed').length;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Completed\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {(() => {\n                  const weekStart = new Date(currentDate);\n                  weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                  weekStart.setHours(0, 0, 0, 0);\n                  \n                  const weekEnd = new Date(weekStart);\n                  weekEnd.setDate(weekStart.getDate() + 6);\n                  weekEnd.setHours(23, 59, 59, 999);\n                  \n                  const weekTasks = filteredTasks.filter(task => {\n                    if (!task.dueDate) return false;\n                    const taskDate = new Date(task.dueDate);\n                    return taskDate >= weekStart && taskDate <= weekEnd;\n                  });\n                  \n                  return weekTasks.filter(task => task.status !== 'completed').length;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Pending\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-cyan-600\">\n                {(() => {\n                  const weekStart = new Date(currentDate);\n                  weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n                  weekStart.setHours(0, 0, 0, 0);\n                  \n                  const weekEnd = new Date(weekStart);\n                  weekEnd.setDate(weekStart.getDate() + 6);\n                  weekEnd.setHours(23, 59, 59, 999);\n                  \n                  const weekTasks = filteredTasks.filter(task => {\n                    if (!task.dueDate) return false;\n                    const taskDate = new Date(task.dueDate);\n                    return taskDate >= weekStart && taskDate <= weekEnd;\n                  });\n                  \n                  const completedTasks = weekTasks.filter(task => task.status === 'completed').length;\n                  return weekTasks.length > 0 \n                    ? Math.round((completedTasks / weekTasks.length) * 100)\n                    : 0;\n                })()}%\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Progress\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Days Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {weekDays.map((day) => {\n            const dayTasks = filteredTasks.filter(task => {\n              if (!task.dueDate) return false;\n              const taskDate = new Date(task.dueDate);\n              const taskDay = taskDate.getDay();\n              const dayMap = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n              \n              // Check if task is on the specific day AND within the current week\n              const weekStart = new Date(currentDate);\n              weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n              weekStart.setHours(0, 0, 0, 0);\n              \n              const weekEnd = new Date(weekStart);\n              weekEnd.setDate(weekStart.getDate() + 6);\n              weekEnd.setHours(23, 59, 59, 999);\n              \n              const isInCurrentWeek = taskDate >= weekStart && taskDate <= weekEnd;\n              const isCorrectDay = dayMap[taskDay] === day.value;\n              \n              return isInCurrentWeek && isCorrectDay;\n            });\n            const isCurrentDay = currentDay === day.value;\n            \n            return (\n              <Card \n                key={day.value}\n                className={`relative transition-all duration-200 ${day.color} ${\n                  isCurrentDay \n                    ? 'ring-2 ring-primary shadow-lg scale-[1.02]' \n                    : 'hover:shadow-md'\n                }`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), day.value);\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {isCurrentDay && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-primary text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Today\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                        {day.label}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 font-medium\">{day.period}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={dayTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {dayTasks.length} task{dayTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {dayTasks.map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      workspaceId={workspaceId}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      dayTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      dayTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {dayTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add to {day.label}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Add to {day.label}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Unscheduled Tasks Section */}\n        {unscheduledTasks.length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Unscheduled Tasks ({unscheduledTasks.length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a day to schedule them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {unscheduledTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    workspaceId={workspaceId}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Month View with navigation and stats\n  if (viewMode === 'month') {\n    const filteredTasks = getFilteredTasks();\n    \n    // Date navigation function for Month view\n    const navigateDate = (direction: 'prev' | 'next') => {\n      if (onNavigateDate) {\n        onNavigateDate(direction);\n      }\n    };\n\n    // Calculate monthly stats\n    const monthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const monthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    \n    const monthlyTasks = filteredTasks.filter(task => {\n      if (!task.dueDate) return false;\n      const taskDate = new Date(task.dueDate);\n      return taskDate >= monthStart && taskDate <= monthEnd;\n    });\n\n    const completedTasks = monthlyTasks.filter(task => task.status === 'completed');\n    const totalTasks = monthlyTasks.length;\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Date Navigation Header for Month view */}\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Monthly Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Monthly Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {monthStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {monthEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Weeks Grid - 4 per row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((weekNumber) => {\n            // Calculate week dates within current month\n            const weekStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1 + (weekNumber - 1) * 7);\n            const weekEnd = new Date(weekStart);\n            weekEnd.setDate(weekStart.getDate() + 6);\n            \n            // Ensure week end doesn't go beyond current month\n            const monthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n            if (weekEnd > monthEnd) {\n              weekEnd.setTime(monthEnd.getTime());\n            }\n            \n            const weekTasks = monthlyTasks.filter(task => {\n              if (!task.dueDate) return false;\n              const taskDate = new Date(task.dueDate);\n              return taskDate >= weekStart && taskDate <= weekEnd;\n            });\n            \n            const colors = [\n              \"bg-blue-50 border-blue-200\",\n              \"bg-green-50 border-green-200\", \n              \"bg-yellow-50 border-yellow-200\",\n              \"bg-purple-50 border-purple-200\"\n            ];\n            const weekColor = colors[weekNumber - 1];\n            \n            // Check if current week contains today\n            const today = new Date();\n            const isCurrentWeek = today >= weekStart && today <= weekEnd;\n            const isExpanded = expandedWeeks.has(weekNumber);\n            \n            const formatDate = (date: Date) => {\n              return `${date.getMonth() + 1}/${date.getDate()}`;\n            };\n            \n            const dateRange = `${formatDate(weekStart)} - ${formatDate(weekEnd)}`;\n            \n            return (\n              <Card \n                key={weekNumber}\n                className={`relative transition-all duration-200 ${weekColor} ${\n                  isCurrentWeek \n                    ? 'ring-2 ring-primary shadow-lg scale-[1.02]' \n                    : 'hover:shadow-md'\n                }`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), `week${weekNumber}`);\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {isCurrentWeek && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-primary text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Current\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                        Week {weekNumber}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 font-medium\">{dateRange}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={weekTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {weekTasks.length} task{weekTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {weekTasks.slice(0, getVisibleTaskCount(`month-week-${weekNumber}`, weekTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {weekTasks.length > getVisibleTaskCount(`month-week-${weekNumber}`, weekTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`month-week-${weekNumber}`)}\n                    >\n                      {expandedSections.has(`month-week-${weekNumber}`) \n                        ? 'Show less' \n                        : `See more (${weekTasks.length - getVisibleTaskCount(`month-week-${weekNumber}`, weekTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      weekTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      weekTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {weekTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add to Week {weekNumber}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Add task to Week {weekNumber}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Unscheduled Tasks Section */}\n        {monthlyTasks.filter(task => !task.assignedMemberId && !task.dueDate).length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Unscheduled Tasks ({monthlyTasks.filter(task => !task.assignedMemberId && !task.dueDate).length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a week to schedule them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {monthlyTasks.filter(task => !task.assignedMemberId && !task.dueDate).map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Team View\n  if (viewMode === 'team') {\n    const filteredTasks = getDateRangeFilteredTasks();\n    const unscheduledTasks = tasks.filter(task => {\n      // First apply base filters\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      \n      if (!memberMatch || !projectMatch || !categoryMatch) return false;\n      \n      // Task is unscheduled only if it has BOTH no assigned member AND no due date\n      return !task.assignedMemberId && !task.dueDate;\n    });\n\n    // Calculate stats for the date range\n    const totalTasks = filteredTasks.length;\n    const completedTasks = filteredTasks.filter(task => task.status === 'completed');\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Date Range Navigation Header */}\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div \n            className=\"text-center cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors\"\n            onClick={openDatePicker}\n          >\n            <h2 className=\"text-2xl font-bold text-gray-900 flex items-center justify-center\">\n              <CalendarDays className=\"h-5 w-5 mr-2\" />\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Team Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Team Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Team Members Grid - 4 per row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {members.map((member, index) => {\n            const memberTasks = filteredTasks.filter(task => task.assignedMemberId === member.id);\n            const completedTasks = memberTasks.filter(task => task.status === 'completed');\n            const progressPercentage = memberTasks.length > 0 ? Math.round((completedTasks.length / memberTasks.length) * 100) : 0;\n            \n            const colors = [\n              \"bg-blue-50 border-blue-200\",\n              \"bg-green-50 border-green-200\",\n              \"bg-yellow-50 border-yellow-200\",\n              \"bg-purple-50 border-purple-200\",\n              \"bg-orange-50 border-orange-200\",\n              \"bg-indigo-50 border-indigo-200\",\n              \"bg-pink-50 border-pink-200\",\n              \"bg-gray-50 border-gray-200\"\n            ];\n            const memberColor = colors[index % colors.length];\n            \n            const memberName = member.user?.firstName \n              ? `${member.user.firstName} ${member.user.lastName || ''}`.trim()\n              : member.user?.email?.split('@')[0] || member.name || 'Unknown Member';\n            \n            return (\n              <Card \n                key={member.id}\n                className={`relative transition-all duration-200 ${memberColor} ${\n                  progressPercentage === 100\n                    ? 'ring-2 ring-green-500 shadow-lg scale-[1.02]' \n                    : 'hover:shadow-md'\n                }`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), member.userId);\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {progressPercentage === 100 && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Complete\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white\">\n                        {member.memberType === 'agent' ? (\n                          <Bot className=\"h-5 w-5\" />\n                        ) : (\n                          <span className=\"text-sm font-semibold\">\n                            {member.user?.firstName?.charAt(0) || member.user?.email?.charAt(0)?.toUpperCase() || 'U'}\n                          </span>\n                        )}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                          {memberName}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          {member.memberType === 'agent' ? 'AI Agent' : member.role || 'Team Member'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={memberTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {memberTasks.length} task{memberTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-semibold text-gray-700\">\n                          {progressPercentage}%\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {completedTasks.length}/{memberTasks.length}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {memberTasks.slice(0, getVisibleTaskCount(`member-${member.id}`, memberTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      workspaceId={workspaceId}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {memberTasks.length > getVisibleTaskCount(`member-${member.id}`, memberTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`member-${member.id}`)}\n                    >\n                      {expandedSections.has(`member-${member.id}`) \n                        ? 'Show less' \n                        : `See more (${memberTasks.length - getVisibleTaskCount(`member-${member.id}`, memberTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      memberTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      memberTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {memberTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to assign to {memberName}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Assign task to {memberName}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Unassigned Tasks Section */}\n        {unscheduledTasks.length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                Unassigned Tasks ({unscheduledTasks.length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a team member to assign them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {unscheduledTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    workspaceId={workspaceId}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Date Range Picker Modal */}\n        <Dialog open={showDatePicker} onOpenChange={setShowDatePicker}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Select Custom Date Range</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={tempStartDate}\n                  onChange={(e) => setTempStartDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={tempEndDate}\n                  onChange={(e) => setTempEndDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowDatePicker(false)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={applyDateRange}>\n                  Apply Range\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  // Kanban View\n  if (viewMode === 'kanban') {\n    const filteredTasks = getDateRangeFilteredTasks();\n    \n    // Calculate stats for the date range\n    const totalTasks = filteredTasks.length;\n    const completedTasks = filteredTasks.filter(task => task.status === 'completed');\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n    const statusColumns = [\n      { \n        id: 'todo', \n        title: 'Backlog', \n        color: 'bg-gray-50 border-gray-200',\n        description: 'Tasks waiting to be started'\n      },\n      { \n        id: 'in_progress', \n        title: 'Doing', \n        color: 'bg-blue-50 border-blue-200',\n        description: 'Tasks currently in progress'\n      },\n      { \n        id: 'review', \n        title: 'Review', \n        color: 'bg-yellow-50 border-yellow-200',\n        description: 'Tasks waiting for review'\n      },\n      { \n        id: 'completed', \n        title: 'Done', \n        color: 'bg-green-50 border-green-200',\n        description: 'Completed tasks'\n      }\n    ];\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Kanban Board</h2>\n            <p className=\"text-gray-500 mt-1\">\n              Organize tasks by status and workflow\n            </p>\n          </div>\n          <Button onClick={onCreateTask} className=\"bg-primary hover:bg-primary/90\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Task\n          </Button>\n        </div>\n\n        {/* Date Range Navigation */}\n        <div className=\"flex items-center justify-between bg-white border border-gray-200 rounded-lg p-3 shadow-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const newStart = new Date(dateRangeStart);\n              const newEnd = new Date(dateRangeEnd);\n              const diffDays = Math.ceil((newEnd - newStart) / (1000 * 60 * 60 * 24));\n              newStart.setDate(newStart.getDate() - diffDays - 1);\n              newEnd.setDate(newEnd.getDate() - diffDays - 1);\n              updateDateRange(newStart, newEnd);\n            }}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={openDatePicker}\n              className=\"font-medium\"\n            >\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </Button>\n            <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const newStart = new Date(dateRangeStart);\n              const newEnd = new Date(dateRangeEnd);\n              const diffDays = Math.ceil((newEnd - newStart) / (1000 * 60 * 60 * 24));\n              newStart.setDate(newStart.getDate() + diffDays + 1);\n              newEnd.setDate(newEnd.getDate() + diffDays + 1);\n              updateDateRange(newStart, newEnd);\n            }}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Kanban Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Kanban Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Kanban Columns - 4 per row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {statusColumns.map((column) => {\n            const columnTasks = filteredTasks.filter(task => {\n              // Map task status to column status\n              if (column.id === 'todo') return task.status === 'todo' || !task.status;\n              if (column.id === 'in_progress') return task.status === 'in_progress';\n              if (column.id === 'review') return task.status === 'review';\n              if (column.id === 'completed') return task.status === 'completed';\n              return false;\n            });\n            \n            const completedTasks = columnTasks.filter(task => task.status === 'completed');\n            const progressPercentage = column.id === 'completed' ? 100 : \n              columnTasks.length > 0 ? Math.round((completedTasks.length / columnTasks.length) * 100) : 0;\n            \n            return (\n              <Card \n                key={column.id}\n                className={`relative transition-all duration-200 ${column.color} hover:shadow-md min-h-[500px]`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    // Update task status based on column\n                    updateTaskMutation.mutate({\n                      taskId: parseInt(taskId),\n                      updates: { status: column.id }\n                    });\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {column.id === 'completed' && columnTasks.length > 0 && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Complete\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                        <LayoutGrid className=\"h-5 w-5 mr-2\" />\n                        {column.title}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600\">{column.description}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={columnTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {columnTasks.length} task{columnTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 flex-1\">\n                  {columnTasks.slice(0, getVisibleTaskCount(`kanban-${column.id}`, columnTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      workspaceId={workspaceId}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {columnTasks.length > getVisibleTaskCount(`kanban-${column.id}`, columnTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`kanban-${column.id}`)}\n                    >\n                      {expandedSections.has(`kanban-${column.id}`) \n                        ? 'Show less' \n                        : `See more (${columnTasks.length - getVisibleTaskCount(`kanban-${column.id}`, columnTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      columnTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      columnTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {columnTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add to {column.title}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Add task to {column.title}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  // Project View\n  if (viewMode === 'project') {\n    const filteredTasks = getDateRangeFilteredTasks();\n    const unscheduledTasks = tasks.filter(task => {\n      // First apply base filters\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      \n      if (!memberMatch || !projectMatch || !categoryMatch) return false;\n      \n      // Task is unscheduled only if it has BOTH no assigned member AND no due date\n      return !task.assignedMemberId && !task.dueDate;\n    });\n\n    // Calculate stats for the date range\n    const totalTasks = filteredTasks.length;\n    const completedTasks = filteredTasks.filter(task => task.status === 'completed');\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Date Range Navigation Header */}\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div \n            className=\"text-center cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors\"\n            onClick={openDatePicker}\n          >\n            <h2 className=\"text-2xl font-bold text-gray-900 flex items-center justify-center\">\n              <CalendarDays className=\"h-5 w-5 mr-2\" />\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Project Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Project Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Projects Grid - 4 per row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {projects.map((project, index) => {\n            const projectTasks = filteredTasks.filter(task => task.projectId === project.id);\n            const completedTasks = projectTasks.filter(task => task.status === 'completed');\n            const progressPercentage = projectTasks.length > 0 ? Math.round((completedTasks.length / projectTasks.length) * 100) : 0;\n            \n            const colors = [\n              \"bg-blue-50 border-blue-200\",\n              \"bg-green-50 border-green-200\",\n              \"bg-yellow-50 border-yellow-200\",\n              \"bg-purple-50 border-purple-200\",\n              \"bg-orange-50 border-orange-200\",\n              \"bg-indigo-50 border-indigo-200\",\n              \"bg-pink-50 border-pink-200\",\n              \"bg-gray-50 border-gray-200\"\n            ];\n            const projectColor = colors[index % colors.length];\n            \n            return (\n              <Card \n                key={project.id}\n                className={`relative transition-all duration-200 ${projectColor} ${\n                  progressPercentage === 100\n                    ? 'ring-2 ring-green-500 shadow-lg scale-[1.02]' \n                    : 'hover:shadow-md'\n                }`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), project.id.toString());\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {progressPercentage === 100 && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Complete\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                        {project.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600\">{project.description}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={projectTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {projectTasks.length} task{projectTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-semibold text-gray-700\">\n                          {progressPercentage}%\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {completedTasks.length}/{projectTasks.length}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {projectTasks.slice(0, getVisibleTaskCount(`project-${project.id}`, projectTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      workspaceId={workspaceId}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {projectTasks.length > getVisibleTaskCount(`project-${project.id}`, projectTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`project-${project.id}`)}\n                    >\n                      {expandedSections.has(`project-${project.id}`) \n                        ? 'Show less' \n                        : `See more (${projectTasks.length - getVisibleTaskCount(`project-${project.id}`, projectTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      projectTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      projectTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {projectTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add to {project.name}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Add task to {project.name}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Unscheduled Tasks Section */}\n        {unscheduledTasks.length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Unscheduled Tasks ({unscheduledTasks.length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a week to schedule them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {unscheduledTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    workspaceId={workspaceId}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Project View\n  if (viewMode === 'project') {\n    const filteredTasks = getDateRangeFilteredTasks();\n    const unscheduledTasks = tasks.filter(task => {\n      // First apply base filters\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      \n      if (!memberMatch || !projectMatch || !categoryMatch) return false;\n      \n      // Task is unscheduled only if it has BOTH no assigned member AND no due date\n      return !task.assignedMemberId && !task.dueDate;\n    });\n\n    // Calculate stats for the date range\n    const totalTasks = filteredTasks.length;\n    const completedTasks = filteredTasks.filter(task => task.status === 'completed');\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Project View</h2>\n            <p className=\"text-gray-500 mt-1\">\n              Organize tasks by project\n            </p>\n          </div>\n          <Button onClick={onCreateTask} className=\"bg-primary hover:bg-primary/90\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Task\n          </Button>\n        </div>\n\n        {/* Date Range Navigation */}\n        <div className=\"flex items-center justify-between bg-white border border-gray-200 rounded-lg p-3 shadow-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const newStart = new Date(dateRangeStart);\n              const newEnd = new Date(dateRangeEnd);\n              const diffDays = Math.ceil((newEnd - newStart) / (1000 * 60 * 60 * 24));\n              newStart.setDate(newStart.getDate() - diffDays - 1);\n              newEnd.setDate(newEnd.getDate() - diffDays - 1);\n              updateDateRange(newStart, newEnd);\n            }}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={openDatePicker}\n              className=\"font-medium\"\n            >\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </Button>\n            <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const newStart = new Date(dateRangeStart);\n              const newEnd = new Date(dateRangeEnd);\n              const diffDays = Math.ceil((newEnd - newStart) / (1000 * 60 * 60 * 24));\n              newStart.setDate(newStart.getDate() + diffDays + 1);\n              newEnd.setDate(newEnd.getDate() + diffDays + 1);\n              updateDateRange(newStart, newEnd);\n            }}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Project Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Project Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Projects Grid - 4 per row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {projects.map((project, index) => {\n            const projectTasks = filteredTasks.filter(task => task.projectId === project.id);\n            const completedTasks = projectTasks.filter(task => task.status === 'completed');\n            const progressPercentage = projectTasks.length > 0 ? Math.round((completedTasks.length / projectTasks.length) * 100) : 0;\n            \n            const colors = [\n              \"bg-blue-50 border-blue-200\",\n              \"bg-green-50 border-green-200\",\n              \"bg-yellow-50 border-yellow-200\",\n              \"bg-purple-50 border-purple-200\",\n              \"bg-orange-50 border-orange-200\",\n              \"bg-indigo-50 border-indigo-200\",\n              \"bg-pink-50 border-pink-200\",\n              \"bg-gray-50 border-gray-200\"\n            ];\n            const projectColor = colors[index % colors.length];\n            \n            return (\n              <Card \n                key={project.id}\n                className={`relative transition-all duration-200 ${projectColor} hover:shadow-md`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), `project-${project.id}`);\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                {progressPercentage === 100 && (\n                  <div className=\"absolute -top-1 -right-1\">\n                    <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                      Complete\n                    </div>\n                  </div>\n                )}\n                \n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                        {project.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 font-medium\">\n                        {progressPercentage}% Complete ({completedTasks.length}/{projectTasks.length})\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={projectTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {projectTasks.length} task{projectTasks.length !== 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                  </div>\n                  {/* Progress Bar */}\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${progressPercentage}%` }}\n                    ></div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {projectTasks.slice(0, getVisibleTaskCount(`project-${project.id}`, projectTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      workspaceId={workspaceId}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {projectTasks.length > getVisibleTaskCount(`project-${project.id}`, projectTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`project-${project.id}`)}\n                    >\n                      {expandedSections.has(`project-${project.id}`) \n                        ? 'Show less' \n                        : `See more (${projectTasks.length - getVisibleTaskCount(`project-${project.id}`, projectTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {projectTasks.length === 0 && (\n                    <div \n                      className=\"flex flex-col items-center justify-center h-32 border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group\"\n                      onClick={onCreateTask}\n                    >\n                      <Plus className=\"h-6 w-6 text-gray-400 group-hover:text-primary transition-colors mb-2\" />\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Empty State for No Projects */}\n        {projects.length === 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardContent className=\"text-center py-12\">\n              <FolderOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Projects Found</h3>\n              <p className=\"text-gray-500 mb-4\">Create your first project to get started</p>\n              <Button onClick={() => window.location.reload()}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Project\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Unscheduled Tasks Section */}\n        {unscheduledTasks.length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Unassigned Tasks ({unscheduledTasks.length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a project to assign them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {unscheduledTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    workspaceId={workspaceId}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Date Range Picker Modal */}\n        <Dialog open={showDatePicker} onOpenChange={setShowDatePicker}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Select Custom Date Range</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={tempStartDate}\n                  onChange={(e) => setTempStartDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={tempEndDate}\n                  onChange={(e) => setTempEndDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowDatePicker(false)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={applyDateRange}>\n                  Apply Range\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  // Category View with same grid structure as Day View\n  if (viewMode === 'category') {\n    const categoryIcons = {\n      'Innovation Management': '💡',\n      'Backend Development': '⚙️',\n      'Frontend Development': '🎨',\n      'Marketing': '📢',\n      'Business Development': '💼'\n    };\n    \n    const categoryColors = [\n      'bg-blue-50 border-blue-200',\n      'bg-green-50 border-green-200', \n      'bg-purple-50 border-purple-200',\n      'bg-orange-50 border-orange-200',\n      'bg-pink-50 border-pink-200'\n    ];\n\n    const workspaceCategories = categories.map((category, index) => ({\n      id: category.id,\n      label: category.name,\n      value: category.id.toString(),\n      color: categoryColors[index % categoryColors.length],\n      icon: categoryIcons[category.name] || '📋'\n    }));\n\n    const filteredTasks = getDateRangeFilteredTasks();\n    const uncategorizedTasks = tasks.filter(task => {\n      // First apply base filters\n      const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n      const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n      const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n      \n      if (!memberMatch || !projectMatch || !categoryMatch) return false;\n      \n      // Then check if task is uncategorized or outside date range\n      if (!task.categoryId) return true;\n      \n      if (!task.dueDate) return true;\n      const taskDate = new Date(task.dueDate);\n      return taskDate < dateRangeStart || taskDate > dateRangeEnd;\n    });\n\n    // Calculate stats for the date range\n    const totalTasks = filteredTasks.length;\n    const completedTasks = filteredTasks.filter(task => task.status === 'completed');\n    const pendingTasks = totalTasks - completedTasks.length;\n    const progressPercentage = totalTasks > 0 ? Math.round((completedTasks.length / totalTasks) * 100) : 0;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Date Range Navigation Header */}\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div \n            className=\"text-center cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors\"\n            onClick={openDatePicker}\n          >\n            <h2 className=\"text-2xl font-bold text-gray-900 flex items-center justify-center\">\n              <CalendarDays className=\"h-5 w-5 mr-2\" />\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDateRange('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n\n        {/* Category Summary Section */}\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Category Summary</h3>\n            <p className=\"text-sm text-gray-500\">\n              {dateRangeStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - {dateRangeEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalTasks}</div>\n              <div className=\"text-sm text-gray-600\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{completedTasks.length}</div>\n              <div className=\"text-sm text-gray-600\">Completed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{pendingTasks}</div>\n              <div className=\"text-sm text-gray-600\">Pending</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{progressPercentage}%</div>\n              <div className=\"text-sm text-gray-600\">Progress</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Categories Grid - 4 per row but responsive */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {workspaceCategories.map((category) => {\n            const categoryTasks = filteredTasks.filter(task => task.categoryId === category.id);\n            \n            return (\n              <Card \n                key={category.value}\n                className={`relative transition-all duration-200 ${category.color} hover:shadow-md`}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const taskId = e.dataTransfer.getData(\"taskId\");\n                  if (taskId) {\n                    handleTaskTimeSlotChange(parseInt(taskId), category.value);\n                  }\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n                }}\n                onDragLeave={(e) => {\n                  e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n                }}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                        <span className=\"text-xl mr-2\">{category.icon}</span>\n                        {category.label}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 font-medium\">\n                        {categoryTasks.length} task{categoryTasks.length !== 1 ? 's' : ''}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant={categoryTasks.length > 0 ? \"default\" : \"outline\"} \n                        className=\"text-xs\"\n                      >\n                        {categoryTasks.length}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-3 min-h-[200px]\">\n                  {categoryTasks.slice(0, getVisibleTaskCount(`category-${category.id}`, categoryTasks.length)).map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      workspaceId={workspaceId}\n                      onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                      onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                      draggable\n                      onDragStart={(e) => {\n                        e.dataTransfer.setData(\"taskId\", task.id.toString());\n                      }}\n                    />\n                  ))}\n                  \n                  {categoryTasks.length > getVisibleTaskCount(`category-${category.id}`, categoryTasks.length) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full text-center text-sm text-gray-500 py-2 bg-white/50 rounded hover:bg-white/80\"\n                      onClick={() => toggleSection(`category-${category.id}`)}\n                    >\n                      {expandedSections.has(`category-${category.id}`) \n                        ? 'Show less' \n                        : `See more (${categoryTasks.length - getVisibleTaskCount(`category-${category.id}`, categoryTasks.length)} more tasks)`\n                      }\n                    </Button>\n                  )}\n                  \n                  {/* Always show add task prompt */}\n                  <div \n                    className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                      categoryTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                    }`}\n                    onClick={onCreateTask}\n                  >\n                    <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                      categoryTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                    }`} />\n                    {categoryTasks.length === 0 ? (\n                      <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                        Drop tasks here or click to add to {category.label}\n                      </p>\n                    ) : (\n                      <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                        Add task to {category.label}\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Uncategorized Tasks Section */}\n        {uncategorizedTasks.length > 0 && (\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2\" />\n                Uncategorized Tasks ({uncategorizedTasks.length})\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Drag these tasks to a category to organize them\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {uncategorizedTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    workspaceId={workspaceId}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Date Range Picker Modal */}\n        <Dialog open={showDatePicker} onOpenChange={setShowDatePicker}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Select Custom Date Range</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={tempStartDate}\n                  onChange={(e) => setTempStartDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={tempEndDate}\n                  onChange={(e) => setTempEndDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowDatePicker(false)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={applyDateRange}>\n                  Apply Range\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n\n\n  const getCurrentTime = () => {\n    const now = new Date();\n    const hour = now.getHours();\n    \n    if (hour >= 6 && hour < 9) return \"6:00-9:00\";\n    if (hour >= 9 && hour < 12) return \"9:00-12:00\";\n    if (hour >= 12 && hour < 15) return \"12:00-15:00\";\n    if (hour >= 15 && hour < 18) return \"15:00-18:00\";\n    if (hour >= 18 && hour < 21) return \"18:00-21:00\";\n    if (hour >= 21 && hour < 23) return \"21:00-23:00\";\n    return null;\n  };\n\n  const currentTimeSlot = getCurrentTime();\n  const filteredTasks = getFilteredTasks();\n  const unscheduledTasks = filteredTasks.filter(task => !task.assignedMemberId && !task.dueDate);\n\n  // Define time slots for Day view - matching the actual task time slots in database\n  const timeSlots = [\n    { label: \"6:00 - 9:00 AM\", value: \"6:00-9:00\", time: \"6:00-9:00\", period: \"Morning\", color: \"bg-yellow-50 border-yellow-200\" },\n    { label: \"9:00 - 12:00 PM\", value: \"9:00-12:00\", time: \"9:00-12:00\", period: \"Late Morning\", color: \"bg-orange-50 border-orange-200\" },\n    { label: \"1:00 - 4:00 PM\", value: \"13:00-16:00\", time: \"13:00-16:00\", period: \"Afternoon\", color: \"bg-blue-50 border-blue-200\" },\n    { label: \"2:00 - 5:00 PM\", value: \"14:00-17:00\", time: \"14:00-17:00\", period: \"Late Afternoon\", color: \"bg-purple-50 border-purple-200\" },\n    { label: \"6:00 - 9:00 PM\", value: \"18:00-21:00\", time: \"18:00-21:00\", period: \"Evening\", color: \"bg-indigo-50 border-indigo-200\" },\n    { label: \"9:00 - 11:00 PM\", value: \"21:00-23:00\", time: \"21:00-23:00\", period: \"Late Evening\", color: \"bg-gray-50 border-gray-200\" },\n  ];\n\n  // Date navigation functions - passed from parent\n  const navigateDate = (direction: 'prev' | 'next') => {\n    if (onNavigateDate) {\n      onNavigateDate(direction);\n    }\n  };\n\n  // Format date display based on view mode\n  const getDateDisplayText = () => {\n    switch (viewMode) {\n      case 'day':\n        return currentDate.toLocaleDateString('en-US', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n      case 'week':\n        const weekStart = new Date(currentDate);\n        weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        return `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;\n      case 'month':\n        return currentDate.toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'long' \n        });\n      default:\n        return currentDate.toLocaleDateString('en-US', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Date Navigation Header for Day/Week/Month views */}\n      {['day', 'week', 'month'].includes(viewMode) && (\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto mb-6 bg-white border border-gray-200 px-8 py-4 rounded-lg shadow-sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('prev')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              {getDateDisplayText()}\n            </h2>\n            <div className=\"flex items-center justify-center space-x-1 mt-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-500\">\n                {new Date().toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit',\n                  hour12: true \n                })}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"lg\"\n            onClick={() => navigateDate('next')}\n            className=\"rounded-full w-12 h-12 p-0 text-gray-600 hover:text-gray-900 hover:bg-gray-100\"\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n        </div>\n      )}\n\n      {/* Daily Stats for Day view */}\n      {viewMode === 'day' && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-4 mb-6 shadow-sm\">\n          <div className=\"grid grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {(() => {\n                  // Count only tasks that are scheduled for time slots in Day view\n                  const visibleTasks = timeSlots.reduce((total, slot) => {\n                    return total + filteredTasks.filter(task => task.timeSlot === slot.value).length;\n                  }, 0);\n                  return visibleTasks;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Total Tasks\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {(() => {\n                  const visibleTasks = timeSlots.reduce((tasks, slot) => {\n                    return [...tasks, ...filteredTasks.filter(task => task.timeSlot === slot.value)];\n                  }, []);\n                  return visibleTasks.filter(task => task.status === 'completed').length;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Completed\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {(() => {\n                  const visibleTasks = timeSlots.reduce((tasks, slot) => {\n                    return [...tasks, ...filteredTasks.filter(task => task.timeSlot === slot.value)];\n                  }, []);\n                  return visibleTasks.filter(task => task.status !== 'completed').length;\n                })()}\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Pending\n              </div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-cyan-600\">\n                {(() => {\n                  const visibleTasks = timeSlots.reduce((tasks, slot) => {\n                    return [...tasks, ...filteredTasks.filter(task => task.timeSlot === slot.value)];\n                  }, []);\n                  const completedTasks = visibleTasks.filter(task => task.status === 'completed').length;\n                  return visibleTasks.length > 0 \n                    ? Math.round((completedTasks / visibleTasks.length) * 100)\n                    : 0;\n                })()}%\n              </div>\n              <div className=\"text-sm text-gray-500 uppercase tracking-wide\">\n                Progress\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Weekly Stats moved to Week view section above */}\n\n      {/* Week View Grid */}\n      {viewMode === 'week' ? (\n        <div className=\"space-y-6\">\n          {/* Week Days Grid */}\n          <div className=\"grid grid-cols-7 gap-4\">\n            {(() => {\n              const weekStart = new Date(currentDate);\n              // Ensure we start from Sunday (getDay() returns 0 for Sunday)\n              const dayOfWeek = weekStart.getDay();\n              weekStart.setDate(weekStart.getDate() - dayOfWeek);\n              \n              const days = [];\n              for (let i = 0; i < 7; i++) {\n                const day = new Date(weekStart);\n                day.setDate(weekStart.getDate() + i);\n                days.push(day);\n              }\n              \n              return days.map((day, index) => {\n                const dayTasks = filteredTasks.filter(task => {\n                  if (!task.dueDate) return false;\n                  const taskDate = new Date(task.dueDate);\n                  const taskDateStr = taskDate.toISOString().split('T')[0];\n                  const dayStr = day.toISOString().split('T')[0];\n                  return taskDateStr === dayStr;\n                });\n                \n                const isToday = day.toDateString() === new Date().toDateString();\n                const dayName = day.toLocaleDateString('en-US', { weekday: 'short' });\n                const dayNumber = day.getDate();\n                \n                return (\n                  <Card key={index} className={`${isToday ? 'ring-2 ring-primary bg-primary/5' : 'bg-white'}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"text-center\">\n                        <div className=\"text-sm font-medium text-gray-600\">{dayName}</div>\n                        <div className={`text-lg font-bold ${isToday ? 'text-primary' : 'text-gray-900'}`}>\n                          {dayNumber}\n                        </div>\n                        <Badge variant={dayTasks.length > 0 ? \"default\" : \"outline\"} className=\"text-xs mt-1\">\n                          {dayTasks.length} task{dayTasks.length !== 1 ? 's' : ''}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2 min-h-[200px]\">\n                      {dayTasks.slice(0, getVisibleTaskCount(`day-${dayNumber}`, dayTasks.length)).map((task) => (\n                        <TaskCard\n                          key={task.id}\n                          workspaceId={workspaceId}\n                          task={task}\n                          onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                          onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                        />\n                      ))}\n                      {dayTasks.length > getVisibleTaskCount(`day-${dayNumber}`, dayTasks.length) && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-full text-xs text-gray-500 text-center py-2 hover:bg-gray-100\"\n                          onClick={() => toggleSection(`day-${dayNumber}`)}\n                        >\n                          {expandedSections.has(`day-${dayNumber}`) \n                            ? 'Show less' \n                            : `See more (${dayTasks.length - getVisibleTaskCount(`day-${dayNumber}`, dayTasks.length)} more tasks)`\n                          }\n                        </Button>\n                      )}\n                      {/* Always show add task prompt */}\n                      <div \n                        className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 transition-colors cursor-pointer group ${\n                          dayTasks.length === 0 ? 'h-24' : 'h-12 mt-2'\n                        }`}\n                        onClick={onCreateTask}\n                      >\n                        <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                          dayTasks.length === 0 ? 'h-4 w-4' : 'h-3 w-3'\n                        }`} />\n                        {dayTasks.length === 0 ? (\n                          <p className=\"text-xs text-gray-500 group-hover:text-gray-700 mt-1\">\n                            Add task to {dayName}\n                          </p>\n                        ) : (\n                          <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                            Add to {dayName}\n                          </p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              });\n            })()}\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {timeSlots.map((slot) => {\n          const slotTasks = filteredTasks.filter(task => task.timeSlot === slot.value);\n          const isCurrentSlot = currentTimeSlot === slot.value;\n          \n          return (\n            <Card \n              key={slot.value}\n              className={`relative transition-all duration-200 ${slot.color} ${\n                isCurrentSlot \n                  ? 'ring-2 ring-primary shadow-lg scale-[1.02]' \n                  : 'hover:shadow-md'\n              }`}\n              onDrop={(e) => {\n                e.preventDefault();\n                const taskId = e.dataTransfer.getData(\"taskId\");\n                if (taskId) {\n                  handleTaskTimeSlotChange(parseInt(taskId), slot.value);\n                }\n                e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n              }}\n              onDragOver={(e) => {\n                e.preventDefault();\n                e.currentTarget.classList.add('ring-2', 'ring-primary/50');\n              }}\n              onDragLeave={(e) => {\n                e.currentTarget.classList.remove('ring-2', 'ring-primary/50');\n              }}\n            >\n              {isCurrentSlot && (\n                <div className=\"absolute -top-1 -right-1\">\n                  <div className=\"bg-primary text-white text-xs px-2 py-1 rounded-full shadow-sm\">\n                    Current\n                  </div>\n                </div>\n              )}\n              \n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                      {slot.label}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 font-medium\">{slot.period}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge \n                      variant={slotTasks.length > 0 ? \"default\" : \"outline\"} \n                      className=\"text-xs\"\n                    >\n                      {slotTasks.length} task{slotTasks.length !== 1 ? 's' : ''}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3 min-h-[200px]\">\n                {slotTasks.map((task) => (\n                  <TaskCard\n                    workspaceId={workspaceId}\n                    key={task.id}\n                    task={task}\n                    onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                    onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData(\"taskId\", task.id.toString());\n                    }}\n                  />\n                ))}\n                \n                {/* Always show add task prompt */}\n                <div \n                  className={`flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg hover:border-primary/50 hover:bg-white/50 transition-colors cursor-pointer group ${\n                    slotTasks.length === 0 ? 'h-32' : 'h-16 mt-3'\n                  }`}\n                  onClick={onCreateTask}\n                >\n                  <Plus className={`text-gray-400 group-hover:text-primary transition-colors ${\n                    slotTasks.length === 0 ? 'h-6 w-6 mb-2' : 'h-4 w-4'\n                  }`} />\n                  {slotTasks.length === 0 ? (\n                    <p className=\"text-sm text-gray-500 group-hover:text-gray-700\">\n                      Drop tasks here or click to add to {slot.time}\n                    </p>\n                  ) : (\n                    <p className=\"text-xs text-gray-500 group-hover:text-gray-700\">\n                      Add task to {slot.time}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n          })}\n        </div>\n      )}\n\n      {/* Unscheduled Tasks Section */}\n      {unscheduledTasks.length > 0 && (\n        <Card className=\"bg-gray-50 border-gray-200\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-gray-800 flex items-center\">\n              <Calendar className=\"h-5 w-5 mr-2\" />\n              Unscheduled Tasks ({unscheduledTasks.length})\n            </CardTitle>\n            <p className=\"text-sm text-gray-600\">\n              Drag these tasks to a time slot to schedule them\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {unscheduledTasks.map((task) => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onStatusChange={(completed) => handleTaskStatusChange(task.id, completed)}\n                  onEdit={onEditTask ? () => onEditTask(task) : undefined}\n                      onDelete={() => {/* Task deletion handled automatically by component */}}\n                  workspaceId={workspaceId}\n                  draggable\n                  onDragStart={(e) => {\n                    e.dataTransfer.setData(\"taskId\", task.id.toString());\n                  }}\n                />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Date Range Picker Modal */}\n      <Dialog open={showDatePicker} onOpenChange={setShowDatePicker}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Select Custom Date Range</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"start-date\">Start Date</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={tempStartDate}\n                onChange={(e) => setTempStartDate(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"end-date\">End Date</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={tempEndDate}\n                onChange={(e) => setTempEndDate(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowDatePicker(false)}\n              >\n                Cancel\n              </Button>\n              <Button onClick={applyDateRange}>\n                Apply Range\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":127023},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retryOnMount: false,\n  });\n\n  // User is authenticated if we have user data\n  const isAuthenticated = !!user;\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n  };\n}\n","size_bytes":490},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1381},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accept-invitation.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, XCircle, Loader2, Users } from \"lucide-react\";\n\nexport default function AcceptInvitation() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [invitationId, setInvitationId] = useState<string | null>(null);\n  const [workspaceName, setWorkspaceName] = useState<string>(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Get token from URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('token');\n    if (token) {\n      setInvitationId(token);\n    }\n  }, []);\n\n  const acceptMutation = useMutation({\n    mutationFn: async (token: string) => {\n      setIsProcessing(true);\n      try {\n        const response = await apiRequest(`/api/invitations/${token}/accept`, {\n          method: 'POST'\n        });\n        return response;\n      } catch (error) {\n        setIsProcessing(false);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      setWorkspaceName(data.workspaceName || \"workspace\");\n      toast({\n        title: \"Welcome to the team!\",\n        description: `You've successfully joined the ${data.workspaceName} workspace.`,\n      });\n      \n      // Redirect to dashboard after 2 seconds\n      setTimeout(() => {\n        setLocation('/');\n      }, 2000);\n    },\n    onError: (error: any) => {\n      setIsProcessing(false);\n      if (error.message?.includes(\"401\") || error.message?.includes(\"Unauthorized\")) {\n        toast({\n          title: \"Login Required\",\n          description: \"Please log in to accept this invitation.\",\n          variant: \"destructive\",\n        });\n        // Redirect to login\n        setTimeout(() => {\n          window.location.href = '/api/login';\n        }, 1500);\n      } else {\n        toast({\n          title: \"Invitation Failed\",\n          description: error.message || \"Failed to accept invitation. The link may be expired or invalid.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleAcceptInvitation = () => {\n    if (invitationId) {\n      acceptMutation.mutate(invitationId);\n    }\n  };\n\n  if (!invitationId) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <XCircle className=\"h-5 w-5 text-red-500\" />\n              Invalid Invitation Link\n            </CardTitle>\n            <CardDescription>\n              The invitation link appears to be invalid or incomplete. Please check the URL and try again.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => setLocation('/')} className=\"w-full\">\n              Go to Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (acceptMutation.isSuccess || isProcessing) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              {isProcessing ? \"Processing...\" : `Welcome to ${workspaceName}!`}\n            </CardTitle>\n            <CardDescription>\n              {isProcessing \n                ? \"Processing your invitation...\" \n                : \"You've successfully joined the workspace. Redirecting to dashboard...\"\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center py-4\">\n              <Loader2 className=\"h-6 w-6 animate-spin\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900\">\n            <Users className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <CardTitle>Join Workspace</CardTitle>\n          <CardDescription>\n            You've been invited to collaborate on a workspace. Accept the invitation to get started.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button \n            onClick={handleAcceptInvitation}\n            disabled={acceptMutation.isPending}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {acceptMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Joining Workspace...\n              </>\n            ) : (\n              \"Accept Invitation\"\n            )}\n          </Button>\n          \n          {acceptMutation.isError && (\n            <div className=\"rounded-md bg-red-50 dark:bg-red-900/20 p-3 text-sm text-red-700 dark:text-red-400\">\n              {acceptMutation.error?.message || \"Failed to accept invitation\"}\n            </div>\n          )}\n          \n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation('/')} \n            className=\"w-full\"\n          >\n            Cancel\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5995},"client/src/pages/chat.tsx":{"content":"import React, { useState } from 'react';\nimport { useParams, Link } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport Sidebar from '@/components/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  Bot, \n  MessageCircle, \n  Hash, \n  User, \n  ArrowLeft,\n  Send,\n  Users,\n  Clock,\n  Building,\n  UserCircle,\n  LogOut,\n  Settings\n} from 'lucide-react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport NotificationsDropdown from '@/components/notifications-dropdown';\n\n\ninterface ChatContentProps {\n  selectedChannel: string | null;\n  channelType: 'bot' | 'recent' | 'project' | 'dm' | null;\n  projects: any[];\n  members: any[];\n}\n\nfunction ChatContent({ selectedChannel, channelType, projects, members }: ChatContentProps) {\n  const [message, setMessage] = useState('');\n\n  const getChannelTitle = () => {\n    if (!selectedChannel) return 'Select a chat';\n    \n    switch (channelType) {\n      case 'bot':\n        return 'AI Assistant';\n      case 'recent':\n        return selectedChannel === 'recent-1' ? 'Project Planning' : 'Task Updates';\n      case 'project':\n        const projectId = selectedChannel.replace('project-', '');\n        const project = projects.find(p => p.id.toString() === projectId);\n        return project ? `# ${project.name}` : 'Project Channel';\n      case 'dm':\n        const userId = selectedChannel.replace('dm-', '');\n        const member = members.find(m => m.userId === userId);\n        return member ? `Direct Message with ${member.name}` : 'Direct Message';\n      default:\n        return 'Chat';\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    // TODO: Implement message sending logic\n    setMessage('');\n  };\n\n  if (!selectedChannel) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <MessageCircle className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Welcome to Chat</h3>\n          <p className=\"text-gray-500\">Select a channel or start a conversation to begin chatting</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col bg-white\">\n      {/* Chat Header */}\n      <div className=\"border-b border-gray-200 p-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">{getChannelTitle()}</h2>\n        {channelType === 'project' && (\n          <p className=\"text-sm text-gray-500\">Project team discussion</p>\n        )}\n        {channelType === 'bot' && (\n          <p className=\"text-sm text-gray-500\">Your AI-powered productivity assistant</p>\n        )}\n      </div>\n\n      {/* Messages Area */}\n      <ScrollArea className=\"flex-1 p-4\">\n        <div className=\"space-y-4\">\n          {/* Sample messages based on channel type */}\n          {channelType === 'bot' && (\n            <>\n              <div className=\"flex gap-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Bot className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <p className=\"text-sm\">Hello! I'm your AI assistant. I can help you with task management, project insights, and productivity tips. What would you like to work on today?</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">AI Assistant • just now</p>\n                </div>\n              </div>\n            </>\n          )}\n          \n          {channelType === 'recent' && selectedChannel === 'recent-1' && (\n            <>\n              <div className=\"flex gap-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                  <User className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <p className=\"text-sm\">We need to finalize the project timeline for Q2. Can we schedule a meeting?</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">Team Member • 2 hours ago</p>\n                </div>\n              </div>\n              <div className=\"flex gap-3 justify-end\">\n                <div className=\"flex-1 max-w-md\">\n                  <div className=\"bg-blue-500 text-white rounded-lg p-3\">\n                    <p className=\"text-sm\">Sure! How about tomorrow at 2 PM?</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1 text-right\">You • 1 hour ago</p>\n                </div>\n              </div>\n            </>\n          )}\n\n          {channelType === 'project' && (\n            <>\n              <div className=\"flex gap-3\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <Hash className=\"h-4 w-4 text-purple-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <p className=\"text-sm\">Project channel discussion will appear here. Team members can collaborate on project-specific topics.</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">System • now</p>\n                </div>\n              </div>\n            </>\n          )}\n\n          {channelType === 'dm' && (\n            <>\n              <div className=\"flex gap-3\">\n                <div className=\"w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center\">\n                  <User className=\"h-4 w-4 text-indigo-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <p className=\"text-sm\">Direct message conversation will appear here.</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">Team Member • now</p>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Message Input */}\n      <div className=\"border-t border-gray-200 p-4\">\n        <div className=\"flex gap-2\">\n          <Input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder={`Message ${getChannelTitle().toLowerCase()}...`}\n            className=\"flex-1\"\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <Button onClick={handleSendMessage} disabled={!message.trim()}>\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ChatPage() {\n  const { workspaceId } = useParams();\n  const { user } = useAuth();\n  const currentWorkspaceId = parseInt(workspaceId || \"1\");\n  \n  // Chat state\n  const [selectedChannel, setSelectedChannel] = useState<string | null>('ai-assistant');\n  const [channelType, setChannelType] = useState<'bot' | 'recent' | 'project' | 'dm' | null>('bot');\n\n  // Check URL parameters for project-specific chat\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const projectId = urlParams.get('project');\n    if (projectId) {\n      setSelectedChannel(`project-${projectId}`);\n      setChannelType('project');\n    }\n  }, []);\n\n\n\n  // Data queries\n  const { data: workspaces } = useQuery({\n    queryKey: [\"/api/workspaces\"],\n  });\n\n  const { data: workspace } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}`],\n  });\n\n  const { data: projects = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/projects`],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/categories`],\n  });\n\n  const { data: members = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/members`],\n  });\n\n  const handleWorkspaceChange = (workspaceId: number) => {\n    window.location.href = `/workspace/${workspaceId}/chat`;\n  };\n\n  const handleChannelSelect = (channel: string, type: 'bot' | 'recent' | 'project' | 'dm') => {\n    setSelectedChannel(channel);\n    setChannelType(type);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar\n        workspaces={Array.isArray(workspaces) ? workspaces : []}\n        currentWorkspaceId={currentWorkspaceId}\n        onWorkspaceChange={handleWorkspaceChange}\n        projects={Array.isArray(projects) ? projects : []}\n        categories={Array.isArray(categories) ? categories : []}\n        viewMode=\"home\"\n        onViewModeChange={(mode) => {\n          if (mode === \"kanban\") {\n            window.location.href = `/workspace/${currentWorkspaceId}`;\n          }\n        }}\n        onProjectFilterChange={(projectId) => {\n          window.location.href = `/workspace/${currentWorkspaceId}?projectFilter=${projectId}`;\n        }}\n        onCreateWorkspace={() => {}}\n        onCreateProject={() => {}}\n        onCreateCategory={() => {}}\n        onCreateMember={() => {}}\n        onEditProject={() => {}}\n        onEditCategory={() => {}}\n        currentPage=\"chat\"\n      />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">\n                  {(workspace as any)?.name || 'Workspace'} - Chat\n                </h1>\n                <p className=\"text-sm text-gray-500\">\n                  Team communication and AI assistance\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              <NotificationsDropdown workspaceId={currentWorkspaceId} />\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                    <UserCircle className=\"h-6 w-6\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium text-sm\">\n                        {(user as any)?.firstName && (user as any)?.lastName \n                          ? `${(user as any).firstName} ${(user as any).lastName}` \n                          : (user as any)?.firstName || (user as any)?.email || 'User'}\n                      </p>\n                      <p className=\"w-[200px] truncate text-xs text-muted-foreground\">\n                        {(user as any)?.email}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <Building className=\"mr-2 h-4 w-4\" />\n                    <span>Workspace Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Account Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Chat Sidebar */}\n          <div className=\"w-80 bg-gray-50 border-r border-gray-200 flex flex-col\">\n            {/* Chat with Bot Button */}\n            <div className=\"p-4\">\n              <Button\n                onClick={() => handleChannelSelect('ai-assistant', 'bot')}\n                className={`w-full justify-start gap-3 h-12 ${\n                  selectedChannel === 'ai-assistant' \n                    ? 'bg-blue-100 text-blue-700 border-blue-200' \n                    : 'bg-white hover:bg-gray-100'\n                }`}\n                variant={selectedChannel === 'ai-assistant' ? 'default' : 'outline'}\n              >\n                <Bot className=\"h-5 w-5\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Chat With Bot</div>\n                  <div className=\"text-xs opacity-75\">AI Assistant</div>\n                </div>\n              </Button>\n            </div>\n\n            <Separator />\n\n            <ScrollArea className=\"flex-1\">\n              {/* Recent Chats */}\n              <div className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Clock className=\"h-4 w-4 text-gray-500\" />\n                  <h3 className=\"font-medium text-sm text-gray-700\">Recent Chats</h3>\n                </div>\n                <div className=\"space-y-1\">\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-start gap-3 h-10 text-left ${\n                      selectedChannel === 'recent-1' ? 'bg-gray-200' : ''\n                    }`}\n                    onClick={() => handleChannelSelect('recent-1', 'recent')}\n                  >\n                    <MessageCircle className=\"h-4 w-4\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium truncate\">Project Planning</div>\n                      <div className=\"text-xs text-gray-500 truncate\">Last message 2 hours ago</div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs\">3</Badge>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-start gap-3 h-10 text-left ${\n                      selectedChannel === 'recent-2' ? 'bg-gray-200' : ''\n                    }`}\n                    onClick={() => handleChannelSelect('recent-2', 'recent')}\n                  >\n                    <MessageCircle className=\"h-4 w-4\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium truncate\">Task Updates</div>\n                      <div className=\"text-xs text-gray-500 truncate\">Last message yesterday</div>\n                    </div>\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Project Channels */}\n              <div className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Hash className=\"h-4 w-4 text-gray-500\" />\n                  <h3 className=\"font-medium text-sm text-gray-700\">Project Channels</h3>\n                </div>\n                <div className=\"space-y-1\">\n                  {Array.isArray(projects) && projects.map((project: any) => (\n                    <Button\n                      key={project.id}\n                      variant=\"ghost\"\n                      className={`w-full justify-start gap-3 h-10 text-left ${\n                        selectedChannel === `project-${project.id}` ? 'bg-gray-200' : ''\n                      }`}\n                      onClick={() => handleChannelSelect(`project-${project.id}`, 'project')}\n                    >\n                      <Hash className=\"h-4 w-4\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-sm font-medium truncate\">{project.name}</div>\n                        <div className=\"text-xs text-gray-500 truncate\">{project.description}</div>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Direct Messages */}\n              <div className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Users className=\"h-4 w-4 text-gray-500\" />\n                  <h3 className=\"font-medium text-sm text-gray-700\">Direct Messages</h3>\n                </div>\n                <div className=\"space-y-1\">\n                  {Array.isArray(members) && members.filter((member: any) => member.userId !== user?.id).map((member: any) => (\n                    <Button\n                      key={member.id}\n                      variant=\"ghost\"\n                      className={`w-full justify-start gap-3 h-10 text-left ${\n                        selectedChannel === `dm-${member.userId}` ? 'bg-gray-200' : ''\n                      }`}\n                      onClick={() => handleChannelSelect(`dm-${member.userId}`, 'dm')}\n                    >\n                      <User className=\"h-4 w-4\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-sm font-medium truncate\">\n                          {member.name || member.email || `Member ${member.id}`}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"text-xs text-gray-500\">Online</span>\n                        </div>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n\n          {/* Chat Content */}\n          <ChatContent \n            selectedChannel={selectedChannel}\n            channelType={channelType}\n            projects={Array.isArray(projects) ? projects : []}\n            members={Array.isArray(members) ? members : []}\n          />\n        </div>\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":18422},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport AiChat from \"@/components/ai-chat\";\nimport TimeSlotGrid from \"@/components/time-slot-grid\";\nimport RightPanel from \"@/components/right-panel\";\nimport NotificationsDropdown from \"@/components/notifications-dropdown\";\nimport { AIAssistantWidget } from \"@/components/ai-assistant-widget\";\nimport { PersonalizedInsightsCard } from \"@/components/personalized-insights-card\";\nimport GlobalSearch from \"@/components/global-search\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Calendar,\n  CalendarDays,\n  CalendarRange,\n  FolderOpen,\n  FolderPlus,\n  Tags,\n  Search,\n  Bell,\n  User,\n  Users,\n  Plus,\n  BarChart3,\n  LayoutGrid,\n  Settings,\n  Archive,\n  Clock,\n  CheckCircle,\n  Zap,\n  Target,\n  Briefcase,\n  Home,\n  ChevronLeft,\n  ChevronRight,\n  ChevronDown,\n  UserCircle,\n  Building,\n  HelpCircle,\n  LogOut,\n  Brain,\n  Award,\n  TrendingUp\n} from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport CreateTaskModal from \"@/components/modals/create-task-modal\";\nimport EditTaskModal from \"@/components/modals/edit-task-modal\";\nimport CreateProjectModal from \"@/components/modals/create-project-modal\";\nimport EditProjectModal from \"@/components/modals/edit-project-modal\";\nimport CreateWorkspaceModal from \"@/components/modals/create-workspace-modal\";\nimport CreateCategoryModal from \"@/components/modals/create-category-modal\";\nimport EditCategoryModal from \"@/components/modals/edit-category-modal\";\nimport AddMemberModal from \"@/components/modals/add-member-modal\";\nimport TaskCard from \"@/components/task-card\";\n\ntype ViewMode = 'home' | 'day' | 'week' | 'month' | 'project' | 'category' | 'team' | 'kanban';\n\nexport default function Dashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [currentWorkspaceId, setCurrentWorkspaceId] = useState<number | null>(null);\n  // Get default view mode from localStorage or use 'home' as fallback\n  const getDefaultViewMode = (): ViewMode => {\n    const saved = localStorage.getItem('defaultViewMode');\n    return (saved as ViewMode) || 'home';\n  };\n\n  const [viewMode, setViewMode] = useState<ViewMode>(getDefaultViewMode());\n  const [currentDate, setCurrentDate] = useState(() => {\n    // Default to current date\n    const defaultDate = new Date();\n    return defaultDate;\n  });\n\n  // Check URL parameters for view mode and project filter (priority over localStorage)\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlViewMode = urlParams.get('viewMode');\n    const urlProject = urlParams.get('project');\n    \n    // Set URL parameters first (these take priority)\n    if (urlViewMode && ['home', 'day', 'week', 'month', 'project', 'category', 'team', 'kanban'].includes(urlViewMode)) {\n      setViewMode(urlViewMode as ViewMode);\n    }\n    \n    if (urlProject) {\n      setSelectedProjectId(urlProject);\n      // Update localStorage with URL project filter\n      localStorage.setItem('selectedProjectId', urlProject);\n    } else {\n      // Only restore from localStorage if no URL parameter\n      const savedProjectId = localStorage.getItem('selectedProjectId');\n      if (savedProjectId) {\n        setSelectedProjectId(savedProjectId);\n      }\n    }\n    \n    // Clean up URL parameters after processing\n    if (urlViewMode || urlProject) {\n      const newUrl = window.location.pathname;\n      window.history.replaceState({}, '', newUrl);\n    }\n  }, []);\n  const [showCreateTask, setShowCreateTask] = useState(false);\n  const [showEditTask, setShowEditTask] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<any>(null);\n  const [showCreateProject, setShowCreateProject] = useState(false);\n  const [showEditProject, setShowEditProject] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<any>(null);\n  const [showCreateCategory, setShowCreateCategory] = useState(false);\n  const [showEditCategory, setShowEditCategory] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<any>(null);\n  const [showCreateWorkspace, setShowCreateWorkspace] = useState(false);\n  const [showAddMember, setShowAddMember] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<string>('all');\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('all');\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('all');\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch workspaces\n  const { data: workspaces = [], isLoading: workspacesLoading, error: workspacesError } = useQuery<any[]>({\n    queryKey: [\"/api/workspaces\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Handle workspace query errors\n  useEffect(() => {\n    if (workspacesError && isUnauthorizedError(workspacesError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [workspacesError, toast]);\n\n  // This effect is handled by the workspace persistence effect below\n\n  // Fetch current workspace projects\n  const { data: projects = [] } = useQuery<any[]>({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/projects`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Fetch current workspace tasks\n  const { data: tasks = [], isLoading: tasksLoading, error: tasksError } = useQuery<any[]>({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/tasks`],\n    enabled: !!currentWorkspaceId,\n  });\n\n\n\n  // Fetch due today tasks\n  const { data: dueTodayTasks = [] } = useQuery<any[]>({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/tasks/due-today`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Fetch categories for current workspace\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/categories`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Fetch members for current workspace\n  const { data: members = [] } = useQuery<any[]>({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/members`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Initialize selected member to \"all\" by default and restore from localStorage\n  useEffect(() => {\n    if (user?.id) {\n      // Clear any problematic cached filter values and reset to show all tasks\n      localStorage.removeItem('selectedUserId');\n      setSelectedUserId('all');\n    }\n  }, [user, members]);\n\n  // Get current user's member ID in the workspace\n  const currentUserMember = members.find((m: any) => m.user?.id === user?.id);\n  const currentUserMemberId = currentUserMember?.id;\n\n  // Calculate task sets for progress rings\n  const allTasks = tasks || []; // All workspace tasks\n  const userTasks = allTasks.filter((task: any) => task.assignedMemberId === currentUserMemberId); // User's assigned tasks\n  const userDueTodayTasks = dueTodayTasks.filter(task => task.assignedMemberId === currentUserMemberId); // User's due today tasks\n\n  // Save selected filters to localStorage\n  useEffect(() => {\n    if (selectedUserId) {\n      localStorage.setItem('selectedUserId', selectedUserId);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    localStorage.setItem('selectedProjectId', selectedProjectId);\n  }, [selectedProjectId]);\n\n  useEffect(() => {\n    localStorage.setItem('selectedCategoryId', selectedCategoryId);\n  }, [selectedCategoryId]);\n\n  // Restore category filter from localStorage (project filter handled in URL params effect)\n  useEffect(() => {\n    const savedCategoryId = localStorage.getItem('selectedCategoryId');\n    \n    if (savedCategoryId) {\n      setSelectedCategoryId(savedCategoryId);\n    }\n  }, []);\n\n  // Filter tasks by all three filters: member, project, and category\n  const filteredTasks = tasks?.filter(task => {\n    // Filter by workspace member (compare with assignedMemberId, not assignedTo)\n    const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n    \n    // Filter by project\n    const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n    \n    // Filter by category\n    const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n    \n    return memberMatch && projectMatch && categoryMatch;\n  }) || [];\n\n\n\n\n\n  const handleEditTask = (task: any) => {\n    setSelectedTask(task);\n    setShowEditTask(true);\n  };\n\n\n\n  const handleEditProject = (project: any) => {\n    setSelectedProject(project);\n    setShowEditProject(true);\n  };\n\n  const handleEditCategory = (category: any) => {\n    setSelectedCategory(category);\n    setShowEditCategory(true);\n  };\n\n  // Handle workspace persistence, invitation completion, and default selection\n  useEffect(() => {\n    if (workspaces.length > 0) {\n      // Check if user came from invitation first (highest priority)\n      const urlParams = new URLSearchParams(window.location.search);\n      const invitedWorkspaceId = urlParams.get('workspace');\n      const wasInvited = urlParams.get('invited') === 'true';\n      \n      if (invitedWorkspaceId && wasInvited) {\n        const workspaceId = parseInt(invitedWorkspaceId);\n        const workspace = workspaces.find(w => w.id === workspaceId);\n        if (workspace) {\n          setCurrentWorkspaceId(workspaceId);\n          localStorage.setItem('selectedWorkspaceId', workspaceId.toString());\n          \n          // Get workspace name from URL params or workspace object\n          const urlParams = new URLSearchParams(window.location.search);\n          const workspaceName = urlParams.get('workspaceName') || workspace.name;\n          \n          // Show welcome message with workspace name\n          toast({\n            title: `Welcome to ${workspaceName}!`,\n            description: \"You've successfully joined the workspace and it's now your active workspace.\",\n          });\n          \n          // Clean up URL parameters\n          window.history.replaceState({}, document.title, '/');\n          return;\n        }\n      }\n      \n      // Only set workspace if not already set\n      if (!currentWorkspaceId) {\n        // Try to restore from localStorage\n        const savedWorkspaceId = localStorage.getItem('selectedWorkspaceId');\n        if (savedWorkspaceId) {\n          const parsedId = parseInt(savedWorkspaceId);\n          // Check if saved workspace still exists\n          const workspaceExists = workspaces.some(ws => ws.id === parsedId);\n          if (workspaceExists) {\n            setCurrentWorkspaceId(parsedId);\n            return;\n          }\n        }\n        \n        // Fall back to personal workspace first, then first workspace\n        const personalWorkspace = workspaces.find((w: any) => w.type === 'personal');\n        setCurrentWorkspaceId(personalWorkspace?.id || workspaces[0].id);\n      }\n    }\n  }, [workspaces, toast]);\n\n  // Save workspace selection to localStorage\n  const handleWorkspaceChange = (workspaceId: number) => {\n    setCurrentWorkspaceId(workspaceId);\n    localStorage.setItem('selectedWorkspaceId', workspaceId.toString());\n  };\n\n  // Date navigation functions\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    \n    switch (viewMode) {\n      case 'day':\n        newDate.setDate(newDate.getDate() + (direction === 'next' ? 1 : -1));\n        break;\n      case 'week':\n        // Navigate by full weeks (Sunday to Saturday)\n        // First, get current week's Sunday\n        const currentSunday = new Date(newDate);\n        currentSunday.setDate(newDate.getDate() - newDate.getDay());\n        \n        // Then move by 7 days to get to next/previous Sunday\n        currentSunday.setDate(currentSunday.getDate() + (direction === 'next' ? 7 : -7));\n        \n        // Set the new date to the middle of that week (Wednesday) for consistent display\n        newDate.setTime(currentSunday.getTime());\n        newDate.setDate(currentSunday.getDate() + 3);\n        break;\n      case 'month':\n        newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));\n        break;\n      default:\n        return;\n    }\n    \n    setCurrentDate(newDate);\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  // Format date display based on view mode\n  const getDateDisplayText = () => {\n    const options: Intl.DateTimeFormatOptions = {};\n    \n    switch (viewMode) {\n      case 'day':\n        return currentDate.toLocaleDateString('en-US', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n      case 'week':\n        const weekStart = new Date(currentDate);\n        weekStart.setDate(currentDate.getDate() - currentDate.getDay());\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        return `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;\n      case 'month':\n        return currentDate.toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'long' \n        });\n      default:\n        return '';\n    }\n  };\n\n  if (isLoading || workspacesLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  const currentWorkspace = workspaces.find((w: any) => w.id === currentWorkspaceId);\n  const recentProjects = projects.slice(0, 3);\n  const upcomingTasks = filteredTasks.filter((t: any) => t.status === 'todo').slice(0, 5);\n\n  const viewModeIcons = {\n    kanban: LayoutGrid,\n    day: Calendar,\n    week: CalendarDays,\n    month: CalendarRange,\n    project: FolderOpen,\n    category: Tags,\n    team: Users,\n  };\n\n  const viewModeLabels = {\n    kanban: 'Kanban',\n    day: 'Day',\n    week: 'Week', \n    month: 'Month',\n    project: 'Project',\n    category: 'Category',\n    team: 'Team',\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar */}\n      <Sidebar\n        workspaces={workspaces}\n        currentWorkspaceId={currentWorkspaceId}\n        onWorkspaceChange={handleWorkspaceChange}\n        projects={projects}\n        categories={categories}\n        viewMode={viewMode}\n        onViewModeChange={setViewMode}\n        onProjectFilterChange={setSelectedProjectId}\n        onCreateWorkspace={() => setShowCreateWorkspace(true)}\n        onCreateProject={() => setShowCreateProject(true)}\n        onCreateCategory={() => setShowCreateCategory(true)}\n        onCreateMember={() => setShowAddMember(true)}\n        onEditProject={handleEditProject}\n        onEditCategory={handleEditCategory}\n      />\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col\">\n        {/* Top Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex space-x-1\">\n                {(Object.keys(viewModeLabels) as ViewMode[]).map((mode) => {\n                  const Icon = viewModeIcons[mode];\n                  return (\n                    <div key={mode} className=\"relative group\">\n                      <Button\n                        variant={viewMode === mode ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        onClick={() => setViewMode(mode)}\n                        onDoubleClick={() => {\n                          localStorage.setItem('defaultViewMode', mode);\n                          toast({\n                            title: \"Default view updated\",\n                            description: `${viewModeLabels[mode]} is now your default view`,\n                          });\n                        }}\n                        className={viewMode === mode ? \"bg-primary text-white\" : \"\"}\n                      >\n                        <Icon className=\"h-4 w-4 mr-2\" />\n                        {viewModeLabels[mode]}\n                        {localStorage.getItem('defaultViewMode') === mode && (\n                          <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full\"></div>\n                        )}\n                      </Button>\n                      {localStorage.getItem('defaultViewMode') !== mode && (\n                        <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                          Double-click to set as default\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n              \n              {/* Global Search */}\n              <div className=\"ml-6\">\n                <GlobalSearch\n                  workspaceId={currentWorkspaceId}\n                  onTaskSelect={(taskId) => {\n                    // Find and edit the task\n                    const task = filteredTasks.find((t: any) => t.id === taskId);\n                    if (task) {\n                      handleEditTask(task);\n                    }\n                  }}\n                  onProjectSelect={(projectId) => {\n                    // Switch to project view and filter by selected project\n                    setViewMode('project');\n                    setSelectedProjectId(projectId.toString());\n                  }}\n                  onMemberSelect={(memberId) => {\n                    // Switch to team view and filter by selected member\n                    setViewMode('team');\n                    setSelectedUserId(memberId.toString());\n                  }}\n                  onCategorySelect={(categoryId) => {\n                    // Switch to category view and filter by selected category\n                    setViewMode('category');\n                    setSelectedCategoryId(categoryId.toString());\n                  }}\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {/* Project Filter */}\n              <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n                <SelectTrigger className=\"w-40\">\n                  <FolderOpen className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder=\"By Project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Projects</SelectItem>\n                  {projects?.map(project => (\n                    <SelectItem key={project.id} value={project.id.toString()}>\n                      {project.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Category Filter */}\n              <Select value={selectedCategoryId} onValueChange={setSelectedCategoryId}>\n                <SelectTrigger className=\"w-40\">\n                  <Tags className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder=\"By Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories?.map(category => (\n                    <SelectItem key={category.id} value={category.id.toString()}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Workspace Members Filter */}\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger className=\"w-48\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder=\"By Member\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {members?.map(member => (\n                    <SelectItem key={member.id} value={member.id.toString()}>\n                      {member.user?.firstName && member.user?.lastName \n                        ? `${member.user.firstName} ${member.user.lastName}`\n                        : member.user?.firstName || member.user?.email?.split('@')[0] || member.name || 'Unknown Member'}\n                    </SelectItem>\n                  ))}\n                  <SelectItem value=\"all\">All Members</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Add Task Button */}\n              <Button \n                onClick={() => setShowCreateTask(true)} \n                className=\"bg-primary hover:bg-primary/90\"\n                size=\"sm\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Task\n              </Button>\n              \n              <Button variant=\"ghost\" size=\"sm\">\n                <Search className=\"h-4 w-4\" />\n              </Button>\n              <NotificationsDropdown workspaceId={currentWorkspaceId} />\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2 hover:bg-gray-100\">\n                    <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm\">\n                      {user?.profileImageUrl ? (\n                        <img \n                          src={user.profileImageUrl} \n                          alt=\"Profile\" \n                          className=\"w-8 h-8 rounded-full object-cover\"\n                        />\n                      ) : (\n                        <User className=\"h-4 w-4\" />\n                      )}\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {user?.firstName && user?.lastName \n                        ? `${user.firstName} ${user.lastName}`\n                        : user?.email || 'User'\n                      }\n                    </span>\n                    <ChevronDown className=\"h-4 w-4 text-gray-500\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuItem className=\"flex items-center\">\n                    <UserCircle className=\"mr-2 h-4 w-4\" />\n                    <span>My Profile</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem className=\"flex items-center\">\n                    <Building className=\"mr-2 h-4 w-4\" />\n                    <span>Workspaces</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"flex items-center\">\n                    <HelpCircle className=\"mr-2 h-4 w-4\" />\n                    <span>Support</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    className=\"flex items-center text-red-600 focus:text-red-600\"\n                    onClick={() => window.location.href = '/api/logout'}\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Logout</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"flex-1 flex\">\n          {/* Main Content Area */}\n          <div className=\"flex-1 p-6\">\n            {viewMode === 'kanban' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                selectedProjectId={selectedProjectId}\n                selectedCategoryId={selectedCategoryId}\n                selectedUserId={selectedUserId}\n              />\n            ) : viewMode === 'day' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                projects={projects}\n                categories={categories}\n                currentDate={currentDate}\n                onNavigateDate={navigateDate}\n              />\n            ) : viewMode === 'week' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                projects={projects}\n                categories={categories}\n                currentDate={currentDate}\n                onNavigateDate={navigateDate}\n              />\n            ) : viewMode === 'month' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                projects={projects}\n                categories={categories}\n                currentDate={currentDate}\n                onNavigateDate={navigateDate}\n              />\n            ) : viewMode === 'project' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                projects={projects}\n              />\n            ) : viewMode === 'category' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                categories={categories}\n              />\n            ) : viewMode === 'team' ? (\n              <TimeSlotGrid\n                viewMode={viewMode}\n                tasks={filteredTasks}\n                workspaceId={currentWorkspaceId}\n                onCreateTask={() => setShowCreateTask(true)}\n                onEditTask={handleEditTask}\n                members={members}\n              />\n            ) : (\n              /* Professional Home Dashboard */\n              <div className=\"flex-1 bg-gradient-to-br from-background via-background to-muted/20\">\n                <div className=\"max-w-full mx-auto p-4 space-y-6\">\n                  {/* Personalized Welcome Header - Compact */}\n                  <div className=\"flex items-center justify-between py-4 px-2\">\n                    <div className=\"flex-1\">\n                      <h1 className=\"text-2xl font-light text-foreground\">\n                        Good {new Date().getHours() < 12 ? 'Morning' : new Date().getHours() < 17 ? 'Afternoon' : 'Evening'}, {user?.firstName || user?.email?.split('@')[0] || 'there'}\n                      </h1>\n                      <p className=\"text-muted-foreground text-sm\">\n                        {workspaces.find((w: any) => w.id === currentWorkspaceId)?.name || 'Your Workspace'} • {new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}\n                      </p>\n                    </div>\n                    \n                    {/* Progress Rings - Workspace & User */}\n                    <div className=\"flex items-center space-x-6\">\n                      {/* Workspace Progress */}\n                      <div className=\"text-center\">\n                        <div className=\"relative w-20 h-20\">\n                          <svg className=\"w-20 h-20 transform -rotate-90\" viewBox=\"0 0 120 120\">\n                            <circle\n                              cx=\"60\"\n                              cy=\"60\"\n                              r=\"50\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                              className=\"text-muted/20\"\n                            />\n                            <circle\n                              cx=\"60\"\n                              cy=\"60\"\n                              r=\"50\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                              strokeDasharray={`${2 * Math.PI * 50 * (allTasks.filter((t: any) => t.status === 'completed').length / Math.max(allTasks.length, 1))}, ${2 * Math.PI * 50}`}\n                              className=\"text-blue-500 transition-all duration-1000 ease-out\"\n                              strokeLinecap=\"round\"\n                            />\n                          </svg>\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-medium text-foreground\">\n                                {Math.round((allTasks.filter((t: any) => t.status === 'completed').length / Math.max(allTasks.length, 1)) * 100)}%\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mt-1\">Workspace</div>\n                      </div>\n\n                      {/* User Progress */}\n                      <div className=\"text-center\">\n                        <div className=\"relative w-20 h-20\">\n                          <svg className=\"w-20 h-20 transform -rotate-90\" viewBox=\"0 0 120 120\">\n                            <circle\n                              cx=\"60\"\n                              cy=\"60\"\n                              r=\"50\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                              className=\"text-muted/20\"\n                            />\n                            <circle\n                              cx=\"60\"\n                              cy=\"60\"\n                              r=\"50\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                              strokeDasharray={`${2 * Math.PI * 50 * (userTasks.filter((t: any) => t.status === 'completed').length / Math.max(userTasks.length, 1))}, ${2 * Math.PI * 50}`}\n                              className=\"text-green-500 transition-all duration-1000 ease-out\"\n                              strokeLinecap=\"round\"\n                            />\n                          </svg>\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-medium text-foreground\">\n                                {Math.round((userTasks.filter((t: any) => t.status === 'completed').length / Math.max(userTasks.length, 1)) * 100)}%\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mt-1\">Your Tasks</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Analytics Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <Card className=\"p-4 hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-2xl font-bold text-blue-700 dark:text-blue-400\">\n                            {projects.length}\n                          </div>\n                          <div className=\"text-sm text-blue-600/80 dark:text-blue-400/80 font-medium\">\n                            Active Projects\n                          </div>\n                        </div>\n                        <FolderOpen className=\"h-8 w-8 text-blue-500/60\" />\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-6 hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/20 dark:to-orange-900/20\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-2xl font-bold text-orange-700 dark:text-orange-400\">\n                            {filteredTasks.filter((t: any) => t.status !== 'completed').length}\n                          </div>\n                          <div className=\"text-sm text-orange-600/80 dark:text-orange-400/80 font-medium\">\n                            Pending Tasks\n                          </div>\n                        </div>\n                        <Clock className=\"h-8 w-8 text-orange-500/60\" />\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4 hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-2xl font-bold text-green-700 dark:text-green-400\">\n                            {filteredTasks.filter((t: any) => t.status === 'completed').length}\n                          </div>\n                          <div className=\"text-sm text-green-600/80 dark:text-green-400/80 font-medium\">\n                            Completed\n                          </div>\n                        </div>\n                        <CheckCircle className=\"h-8 w-8 text-green-500/60\" />\n                      </div>\n                    </Card>\n\n                    <Card className=\"p-4 hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"text-2xl font-bold text-purple-700 dark:text-purple-400\">\n                            {members.length}\n                          </div>\n                          <div className=\"text-sm text-purple-600/80 dark:text-purple-400/80 font-medium\">\n                            Team Members\n                          </div>\n                        </div>\n                        <Users className=\"h-8 w-8 text-purple-500/60\" />\n                      </div>\n                    </Card>\n                  </div>\n\n                  {/* Main Content Grid - Three Columns */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                    {/* Personalized AI Insights */}\n                    <PersonalizedInsightsCard workspaceId={currentWorkspaceId || 0} />\n\n                    {/* Today's Focus */}\n                    <Card className=\"p-6 border-0 shadow-lg\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <h2 className=\"text-xl font-light text-foreground\">Today's Focus</h2>\n                        <Calendar className=\"h-5 w-5 text-primary/60\" />\n                      </div>\n                      {userDueTodayTasks.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {userDueTodayTasks.slice(0, 4).map((task: any) => (\n                            <div key={task.id} className=\"group p-3 bg-muted/30 rounded-lg hover:bg-muted/50 transition-all duration-200 cursor-pointer\" onClick={() => handleEditTask(task)}>\n                              <div className=\"flex items-start space-x-3\">\n                                <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${\n                                  task.priority === 'high' ? 'bg-red-400' :\n                                  task.priority === 'medium' ? 'bg-yellow-400' : 'bg-green-400'\n                                }`}></div>\n                                <div className=\"flex-1 space-y-1\">\n                                  <p className=\"font-medium text-sm group-hover:text-primary transition-colors\">\n                                    {task.title}\n                                  </p>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5\">\n                                      {projects.find((p: any) => p.id === task.projectId)?.name || 'Personal'}\n                                    </Badge>\n                                    {task.timeSlot && (\n                                      <span className=\"text-xs text-muted-foreground\">\n                                        {task.timeSlot}\n                                      </span>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          {userDueTodayTasks.length > 4 && (\n                            <Button variant=\"ghost\" size=\"sm\" className=\"w-full text-primary hover:text-primary\" onClick={() => setViewMode('day')}>\n                              View all {userDueTodayTasks.length} tasks →\n                            </Button>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Calendar className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-3\" />\n                          <p className=\"text-muted-foreground text-sm\">No tasks due today</p>\n                          <p className=\"text-xs text-muted-foreground/70 mt-1\">Great job staying on top of things!</p>\n                        </div>\n                      )}\n                    </Card>\n\n                    {/* Quick Actions */}\n                    <Card className=\"p-6 border-0 shadow-lg\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <h2 className=\"text-xl font-light text-foreground\">Quick Actions</h2>\n                        <Zap className=\"h-5 w-5 text-primary/60\" />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <Button \n                          variant=\"outline\" \n                          className=\"h-20 flex-col space-y-2 hover:scale-105 transition-all duration-200 border-2 hover:border-primary/40\"\n                          onClick={() => setShowCreateTask(true)}\n                        >\n                          <Plus className=\"h-6 w-6 text-primary\" />\n                          <span className=\"text-xs font-medium\">New Task</span>\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          className=\"h-20 flex-col space-y-2 hover:scale-105 transition-all duration-200 border-2 hover:border-primary/40\"\n                          onClick={() => setShowCreateProject(true)}\n                        >\n                          <FolderOpen className=\"h-6 w-6 text-blue-600\" />\n                          <span className=\"text-xs font-medium\">New Project</span>\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          className=\"h-20 flex-col space-y-2 hover:scale-105 transition-all duration-200 border-2 hover:border-primary/40\"\n                          onClick={() => setViewMode('kanban')}\n                        >\n                          <LayoutGrid className=\"h-6 w-6 text-purple-600\" />\n                          <span className=\"text-xs font-medium\">Kanban</span>\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          className=\"h-20 flex-col space-y-2 hover:scale-105 transition-all duration-200 border-2 hover:border-primary/40\"\n                          onClick={() => setViewMode('team')}\n                        >\n                          <Users className=\"h-6 w-6 text-green-600\" />\n                          <span className=\"text-xs font-medium\">Team View</span>\n                        </Button>\n                      </div>\n                    </Card>\n                  </div>\n\n                  {/* Recent Activity & Project Highlights */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                    {/* Active Projects */}\n                    <Card className=\"p-8 border-0 shadow-lg\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <h2 className=\"text-xl font-light text-foreground\">Active Projects</h2>\n                        <Briefcase className=\"h-5 w-5 text-primary/60\" />\n                      </div>\n                      <div className=\"space-y-4\">\n                        {projects.slice(0, 3).map((project: any) => {\n                          const projectTasks = filteredTasks.filter((t: any) => t.projectId === project.id);\n                          const completedTasks = projectTasks.filter((t: any) => t.status === 'completed');\n                          const progress = projectTasks.length > 0 ? (completedTasks.length / projectTasks.length) * 100 : 0;\n                          \n                          return (\n                            <div key={project.id} className=\"space-y-3\">\n                              <div className=\"flex items-center justify-between\">\n                                <h3 className=\"font-medium text-sm\">{project.name}</h3>\n                                <span className=\"text-xs text-muted-foreground\">{Math.round(progress)}%</span>\n                              </div>\n                              <div className=\"w-full bg-muted/50 rounded-full h-2\">\n                                <div \n                                  className=\"bg-primary h-2 rounded-full transition-all duration-500 ease-out\" \n                                  style={{ width: `${progress}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                                <span>{projectTasks.length} tasks</span>\n                                <span>{completedTasks.length} completed</span>\n                              </div>\n                            </div>\n                          );\n                        })}\n                        {projects.length > 3 && (\n                          <Button variant=\"ghost\" size=\"sm\" className=\"w-full text-primary hover:text-primary mt-4\" onClick={() => setViewMode('project')}>\n                            View all projects →\n                          </Button>\n                        )}\n                      </div>\n                    </Card>\n\n                    {/* Team Overview */}\n                    <Card className=\"p-8 border-0 shadow-lg\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <h2 className=\"text-xl font-light text-foreground\">Team Overview</h2>\n                        <Users className=\"h-5 w-5 text-primary/60\" />\n                      </div>\n                      <div className=\"space-y-4\">\n                        {members.slice(0, 4).map((member: any) => {\n                          const memberTasks = filteredTasks.filter((t: any) => t.assignedMemberId === member.id);\n                          const pendingTasks = memberTasks.filter((t: any) => t.status !== 'completed');\n                          \n                          return (\n                            <div key={member.id} className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarFallback className=\"text-xs\">\n                                    {member.user?.firstName?.charAt(0) || member.user?.email?.charAt(0)?.toUpperCase() || 'U'}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <p className=\"text-sm font-medium\">\n                                    {member.user?.firstName && member.user?.lastName \n                                      ? `${member.user.firstName} ${member.user.lastName}`\n                                      : member.user?.email?.split('@')[0] || 'Team Member'\n                                    }\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    {pendingTasks.length} pending task{pendingTasks.length !== 1 ? 's' : ''}\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-sm font-medium\">{memberTasks.length}</div>\n                                <div className=\"text-xs text-muted-foreground\">total</div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Panel - Show on all views */}\n          <RightPanel \n            workspaceId={currentWorkspaceId}\n            dueTodayTasks={dueTodayTasks.filter(task => {\n              const memberMatch = selectedUserId === 'all' || task.assignedMemberId?.toString() === selectedUserId;\n              const projectMatch = selectedProjectId === 'all' || task.projectId?.toString() === selectedProjectId;\n              const categoryMatch = selectedCategoryId === 'all' || task.categoryId?.toString() === selectedCategoryId;\n              return memberMatch && projectMatch && categoryMatch;\n            })}\n            tasks={filteredTasks}\n          />\n        </div>\n      </main>\n\n      {/* Modals */}\n      <CreateTaskModal\n        open={showCreateTask}\n        onClose={() => setShowCreateTask(false)}\n        workspaceId={currentWorkspaceId}\n        projects={projects}\n      />\n      \n      <EditTaskModal\n        open={showEditTask}\n        onClose={() => {\n          setShowEditTask(false);\n          setSelectedTask(null);\n        }}\n        task={selectedTask}\n        workspaceId={currentWorkspaceId}\n        projects={projects}\n        categories={categories}\n        members={members}\n      />\n      \n      <CreateProjectModal\n        open={showCreateProject}\n        onClose={() => setShowCreateProject(false)}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <EditProjectModal\n        open={showEditProject}\n        onClose={() => {\n          setShowEditProject(false);\n          setSelectedProject(null);\n        }}\n        project={selectedProject}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <CreateCategoryModal\n        open={showCreateCategory}\n        onClose={() => setShowCreateCategory(false)}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <EditCategoryModal\n        open={showEditCategory}\n        onClose={() => {\n          setShowEditCategory(false);\n          setSelectedCategory(null);\n        }}\n        category={selectedCategory}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <CreateWorkspaceModal\n        open={showCreateWorkspace}\n        onClose={() => setShowCreateWorkspace(false)}\n      />\n\n      <AddMemberModal\n        open={showAddMember}\n        onClose={() => setShowAddMember(false)}\n        workspaceId={currentWorkspaceId}\n      />\n\n      {/* AI Assistant Widget - Available on all pages */}\n      {currentWorkspaceId && <AIAssistantWidget workspaceId={currentWorkspaceId} />}\n    </div>\n  );\n}\n","size_bytes":50028},"client/src/pages/financials.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport NotificationsDropdown from \"@/components/notifications-dropdown\";\nimport { AIAssistantWidget } from \"@/components/ai-assistant-widget\";\nimport CreateWorkspaceModal from \"@/components/modals/create-workspace-modal\";\nimport CreateProjectModal from \"@/components/modals/create-project-modal\";\nimport CreateCategoryModal from \"@/components/modals/create-category-modal\";\nimport AddMemberModal from \"@/components/modals/add-member-modal\";\nimport EditProjectModal from \"@/components/modals/edit-project-modal\";\nimport EditCategoryModal from \"@/components/modals/edit-category-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { PieChart as RechartsPieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  DollarSign,\n  TrendingUp,\n  TrendingDown,\n  Plus,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  BarChart3,\n  PieChart,\n  Calculator,\n  Package,\n  AlertCircle,\n  Receipt,\n  CreditCard,\n  User,\n  Settings,\n  LogOut,\n  UserCircle,\n  Building,\n  HelpCircle\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\n// Form schemas\nconst componentSchema = z.object({\n  name: z.string().min(1, \"Component name is required\"),\n  description: z.string().optional(),\n  type: z.enum([\"milestone\", \"phase\", \"section\"]),\n  status: z.enum([\"active\", \"completed\", \"cancelled\"]),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n  workspaceId: z.number()\n});\n\nconst budgetSchema = z.object({\n  componentId: z.number().optional(),\n  budgetAmount: z.string().min(1, \"Budget amount is required\").transform(val => val),\n  period: z.enum([\"monthly\", \"quarterly\", \"yearly\"]),\n  budgetType: z.enum([\"project\", \"component\"]).default(\"component\"),\n  workspaceId: z.number()\n}).refine((data) => {\n  if (data.budgetType === \"component\" && !data.componentId) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Component is required for component budgets\",\n  path: [\"componentId\"]\n});\n\nconst outflowSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\").transform(val => val),\n  componentId: z.number().optional(),\n  outflowTypeId: z.number().min(1, \"Outflow type is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  status: z.enum([\"pending\", \"approved\", \"paid\"]),\n  workspaceId: z.number()\n});\n\nconst inflowSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\").transform(val => val),\n  inflowTypeId: z.number().min(1, \"Inflow type is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  status: z.enum([\"pending\", \"received\"]),\n  invoiceNumber: z.string().optional(),\n  workspaceId: z.number()\n});\n\nconst inflowTypeSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  workspaceId: z.number()\n});\n\nconst outflowTypeSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  workspaceId: z.number()\n});\n\n// Use proper inflow/outflow schemas with type IDs\nconst expenseSchema = outflowSchema;\nconst revenueSchema = inflowSchema;\n\nexport default function Financials() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [currentWorkspaceId, setCurrentWorkspaceId] = useState<number | null>(null);\n  const [selectedProject, setSelectedProject] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Modal states\n  const [showCreateWorkspace, setShowCreateWorkspace] = useState(false);\n  const [showCreateProject, setShowCreateProject] = useState(false);\n  const [showCreateCategory, setShowCreateCategory] = useState(false);\n  const [showAddMember, setShowAddMember] = useState(false);\n  const [editingProject, setEditingProject] = useState<any>(null);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n\n  // Financial modal states\n  const [showCreateComponent, setShowCreateComponent] = useState(false);\n  const [showCreateBudget, setShowCreateBudget] = useState(false);\n  const [showEditBudget, setShowEditBudget] = useState(false);\n  const [editingBudget, setEditingBudget] = useState<any>(null);\n  const [showCreateExpense, setShowCreateExpense] = useState(false);\n  const [showCreateRevenue, setShowCreateRevenue] = useState(false);\n  const [showCreateOutflowType, setShowCreateOutflowType] = useState(false);\n  const [showCreateInflowType, setShowCreateInflowType] = useState(false);\n\n  // Fetch data\n  const { data: workspaces } = useQuery({\n    queryKey: [\"/api/workspaces\"],\n  });\n\n  const { data: projects } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/projects`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/categories`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Fetch project components\n  const { data: components = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/components`],\n    enabled: !!selectedProject?.id,\n  });\n\n  const { data: budgets = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/budgets`],\n    enabled: !!selectedProject?.id,\n  });\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/expenses`],\n    enabled: !!selectedProject?.id,\n  });\n\n  const { data: revenue = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/revenue`],\n    enabled: !!selectedProject?.id,\n  });\n\n  // Fetch outflow and inflow types\n  const { data: outflowTypes = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/outflow-types`],\n    enabled: !!selectedProject?.id,\n  });\n\n  const { data: inflowTypes = [] } = useQuery({\n    queryKey: [`/api/projects/${selectedProject?.id}/inflow-types`],\n    enabled: !!selectedProject?.id,\n  });\n\n  // Check URL parameters for project selection\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const projectId = urlParams.get('project');\n    \n    // Get current workspace from localStorage or default to first workspace\n    const savedWorkspaceId = localStorage.getItem('currentWorkspaceId');\n    const workspaceId = savedWorkspaceId ? parseInt(savedWorkspaceId) : \n      (Array.isArray(workspaces) && workspaces.length > 0 ? workspaces[0].id : null);\n    \n    if (workspaceId) {\n      setCurrentWorkspaceId(workspaceId);\n    }\n\n    if (projectId && projects) {\n      const project = Array.isArray(projects) ? projects.find((p: any) => p.id === parseInt(projectId)) : null;\n      if (project) {\n        setSelectedProject(project);\n      }\n    }\n  }, [projects, workspaces]);\n\n  // Update form workspace IDs when currentWorkspaceId changes\n  useEffect(() => {\n    if (currentWorkspaceId) {\n      componentForm.setValue('workspaceId', currentWorkspaceId);\n      budgetForm.setValue('workspaceId', currentWorkspaceId);\n      expenseForm.setValue('workspaceId', currentWorkspaceId);\n      revenueForm.setValue('workspaceId', currentWorkspaceId);\n      editBudgetForm.setValue('workspaceId', currentWorkspaceId);\n      outflowTypeForm.setValue('workspaceId', currentWorkspaceId);\n      inflowTypeForm.setValue('workspaceId', currentWorkspaceId);\n    }\n  }, [currentWorkspaceId]);\n\n  // Workspace change handler\n  const handleWorkspaceChange = (workspaceId: number) => {\n    setCurrentWorkspaceId(workspaceId);\n    localStorage.setItem('currentWorkspaceId', workspaceId.toString());\n    setSelectedProject(null);\n  };\n\n  // Financial calculations\n  const totalBudget = Array.isArray(budgets) ? budgets.reduce((sum: number, budget: any) => sum + parseFloat(budget.budgetAmount || 0), 0) : 0;\n  const totalExpenses = Array.isArray(expenses) ? expenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount || 0), 0) : 0;\n  const totalRevenue = Array.isArray(revenue) ? revenue.reduce((sum: number, rev: any) => sum + parseFloat(rev.amount || 0), 0) : 0;\n  const netProfit = totalRevenue - totalExpenses;\n  const budgetUtilization = totalBudget > 0 ? (totalExpenses / totalBudget) * 100 : 0;\n\n  // Component mutations\n  const createComponentMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/components`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/components`] });\n      }\n      setShowCreateComponent(false);\n      toast({ title: \"Component created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Component creation error:\", error);\n      toast({ \n        title: \"Could not create component\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Form mutations\n  const createBudgetMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/budgets`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/budgets`] });\n      }\n      setShowCreateBudget(false);\n      toast({ title: \"Budget created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Budget creation error:\", error);\n      toast({ \n        title: \"Could not add budget\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/expenses`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/expenses`] });\n      }\n      setShowCreateExpense(false);\n      toast({ title: \"Expense created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Expense creation error:\", error);\n      toast({ \n        title: \"Could not add expense\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createRevenueMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/revenue`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/revenue`] });\n      }\n      setShowCreateRevenue(false);\n      toast({ title: \"Revenue created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Revenue creation error:\", error);\n      toast({ \n        title: \"Could not add revenue\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createOutflowTypeMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/outflow-types`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/outflow-types`] });\n      }\n      setShowCreateOutflowType(false);\n      outflowTypeForm.reset();\n      toast({ title: \"Outflow type created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Outflow type creation error:\", error);\n      toast({ \n        title: \"Could not create outflow type\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const createInflowTypeMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (!selectedProject?.id) {\n        throw new Error(\"No project selected\");\n      }\n      return apiRequest(\"POST\", `/api/projects/${selectedProject.id}/inflow-types`, data);\n    },\n    onSuccess: () => {\n      if (selectedProject?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject.id}/inflow-types`] });\n      }\n      setShowCreateInflowType(false);\n      inflowTypeForm.reset();\n      toast({ title: \"Inflow type created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Inflow type creation error:\", error);\n      toast({ \n        title: \"Could not create inflow type\", \n        description: error?.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Forms\n  const componentForm = useForm({\n    resolver: zodResolver(componentSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      type: \"milestone\" as const,\n      status: \"active\" as const,\n      startDate: \"\",\n      endDate: \"\",\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const budgetForm = useForm({\n    resolver: zodResolver(budgetSchema),\n    defaultValues: {\n      componentId: undefined,\n      budgetAmount: \"\",\n      period: \"monthly\" as const,\n      budgetType: \"project\" as const,\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const expenseForm = useForm({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      amount: \"\",\n      componentId: 0,\n      outflowTypeId: 0,\n      date: new Date().toISOString().split('T')[0],\n      status: \"pending\" as const,\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const revenueForm = useForm({\n    resolver: zodResolver(revenueSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      amount: \"\",\n      source: \"\",\n      inflowTypeId: 0,\n      date: new Date().toISOString().split('T')[0],\n      status: \"pending\" as const,\n      invoiceNumber: \"\",\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const editBudgetForm = useForm({\n    resolver: zodResolver(budgetSchema),\n    defaultValues: {\n      budgetAmount: \"\",\n      period: \"yearly\" as const,\n      budgetType: \"project\" as const,\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const outflowTypeForm = useForm({\n    resolver: zodResolver(outflowTypeSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  const inflowTypeForm = useForm({\n    resolver: zodResolver(inflowTypeSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      workspaceId: currentWorkspaceId || 0\n    }\n  });\n\n  // Budget allocation validation\n  const calculateBudgetAllocation = () => {\n    if (!Array.isArray(budgets) || !Array.isArray(components)) return { \n      totalAllocated: 0, \n      remainingBudget: 0, \n      overAllocated: false,\n      totalProjectBudget: 0,\n      componentAllocations: [],\n      projectBudget: null\n    };\n    \n    // Separate project-level and component-level budgets\n    const projectBudgets = budgets.filter((budget: any) => !budget.componentId);\n    const componentBudgets = budgets.filter((budget: any) => budget.componentId);\n    \n    const totalProjectBudget = projectBudgets.reduce((sum, budget) => sum + parseFloat(budget.budgetAmount || 0), 0);\n    const componentAllocations = components.map((component: any) => {\n      const compBudgets = componentBudgets.filter((budget: any) => budget.componentId === component.id);\n      const allocated = compBudgets.reduce((sum, budget) => sum + parseFloat(budget.budgetAmount || 0), 0);\n      return { componentId: component.id, componentName: component.name, allocated };\n    });\n    \n    const totalAllocated = componentAllocations.reduce((sum, comp) => sum + comp.allocated, 0);\n    const remainingBudget = Math.max(0, totalProjectBudget - totalAllocated);\n    const overAllocated = totalAllocated > totalProjectBudget;\n    \n    return { \n      totalAllocated, \n      remainingBudget, \n      overAllocated, \n      totalProjectBudget, \n      componentAllocations,\n      projectBudget: projectBudgets[0] || null\n    };\n  };\n\n  const budgetAllocation = calculateBudgetAllocation();\n\n  // Effect to populate edit form with existing budget data\n  useEffect(() => {\n    if (editingBudget && showEditBudget) {\n      editBudgetForm.reset({\n        budgetAmount: editingBudget.budgetAmount?.toString() || \"\",\n        period: editingBudget.period || \"yearly\",\n        budgetType: \"project\",\n        workspaceId: currentWorkspaceId || 0\n      });\n    }\n  }, [editingBudget, showEditBudget, editBudgetForm, currentWorkspaceId]);\n\n  // Prepare chart data\n  const prepareBudgetChartData = () => {\n    if (!Array.isArray(budgets) || !Array.isArray(components)) return [];\n    return budgetAllocation.componentAllocations.map((allocation, index) => ({\n      name: allocation.componentName,\n      value: allocation.allocated,\n      fill: `hsl(${(index * 137.5) % 360}, 70%, 50%)`\n    })).filter(item => item.value > 0);\n  };\n\n  const prepareExpenseChartData = () => {\n    if (!Array.isArray(expenses) || !Array.isArray(components)) return [];\n    const componentExpenses = components.map((component: any) => {\n      const componentTotal = expenses\n        .filter((expense: any) => expense.componentId === component.id)\n        .reduce((sum, expense) => sum + parseFloat(expense.amount || 0), 0);\n      return { name: component.name, value: componentTotal };\n    }).filter(item => item.value > 0);\n    \n    return componentExpenses.map((item, index) => ({\n      ...item,\n      fill: `hsl(${(index * 137.5 + 60) % 360}, 70%, 50%)`\n    }));\n  };\n\n  const prepareRevenueChartData = () => {\n    if (!Array.isArray(revenue) || !Array.isArray(components)) return [];\n    const componentRevenues = components.map((component: any) => {\n      const componentTotal = revenue\n        .filter((rev: any) => rev.componentId === component.id)\n        .reduce((sum, rev) => sum + parseFloat(rev.amount || 0), 0);\n      return { name: component.name, value: componentTotal };\n    }).filter(item => item.value > 0);\n    \n    return componentRevenues.map((item, index) => ({\n      ...item,\n      fill: `hsl(${(index * 137.5 + 120) % 360}, 70%, 50%)`\n    }));\n  };\n\n  const budgetChartData = prepareBudgetChartData();\n  const expenseChartData = prepareExpenseChartData();\n  const revenueChartData = prepareRevenueChartData();\n\n  // Form submit handlers\n  const onCreateComponent = (data: any) => {\n    createComponentMutation.mutate({\n      ...data,\n      workspaceId: currentWorkspaceId\n    });\n  };\n\n  const onCreateBudget = (data: any) => {\n    const budgetAmount = parseFloat(data.budgetAmount);\n    \n    // Validation for component budgets\n    if (data.budgetType === \"component\") {\n      if (budgetAllocation.totalProjectBudget === 0) {\n        toast({\n          title: \"Project Budget Required\",\n          description: \"Please create a project budget first before allocating to components.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      if (budgetAllocation.remainingBudget < budgetAmount) {\n        toast({\n          title: \"Budget Allocation Error\",\n          description: `This allocation ($${budgetAmount.toFixed(2)}) exceeds the remaining budget ($${budgetAllocation.remainingBudget.toFixed(2)}). Please adjust the amount or increase the project budget.`,\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n\n    // Validation for project budgets - allow creation if no project budget exists\n    if (data.budgetType === \"project\" && budgetAllocation.projectBudget) {\n      toast({\n        title: \"Project Budget Exists\",\n        description: \"A project budget already exists. Please edit the existing budget instead.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const budgetData: any = {\n      ...data,\n      budgetAmount: data.budgetAmount,\n      workspaceId: currentWorkspaceId\n    };\n\n    // For project budgets, remove componentId\n    if (data.budgetType === \"project\") {\n      delete budgetData.componentId;\n    }\n\n    createBudgetMutation.mutate(budgetData);\n  };\n\n  const onCreateExpense = (data: any) => {\n    createExpenseMutation.mutate({\n      ...data,\n      amount: data.amount,  // Keep as string\n      workspaceId: currentWorkspaceId\n    });\n  };\n\n  const onCreateRevenue = (data: any) => {\n    createRevenueMutation.mutate({\n      ...data,\n      amount: data.amount,  // Keep as string\n      workspaceId: currentWorkspaceId\n    });\n  };\n\n  if (!selectedProject) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex\">\n        <Sidebar\n          workspaces={Array.isArray(workspaces) ? workspaces : []}\n          currentWorkspaceId={currentWorkspaceId}\n          onWorkspaceChange={handleWorkspaceChange}\n          projects={Array.isArray(projects) ? projects : []}\n          categories={Array.isArray(categories) ? categories : []}\n          viewMode=\"home\"\n          onViewModeChange={(mode) => {\n            if (mode === 'home') {\n              setLocation(`/workspace/${currentWorkspaceId}`);\n            }\n          }}\n          onProjectFilterChange={() => {}}\n          onCreateWorkspace={() => setShowCreateWorkspace(true)}\n          onCreateProject={() => setShowCreateProject(true)}\n          onCreateCategory={() => setShowCreateCategory(true)}\n          onCreateMember={() => setShowAddMember(true)}\n          onEditProject={(project) => setEditingProject(project)}\n          onEditCategory={(category) => setEditingCategory(category)}\n          currentPage=\"financials\"\n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <DollarSign className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-600 mb-2\">Select a Project</h2>\n            <p className=\"text-gray-500\">Choose a project from the sidebar to view its financial data</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar\n        workspaces={Array.isArray(workspaces) ? workspaces : []}\n        currentWorkspaceId={currentWorkspaceId}\n        onWorkspaceChange={handleWorkspaceChange}\n        projects={Array.isArray(projects) ? projects : []}\n        categories={Array.isArray(categories) ? categories : []}\n        viewMode=\"home\"\n        onViewModeChange={(mode) => {\n          if (mode === 'home') {\n            setLocation(`/workspace/${currentWorkspaceId}`);\n          }\n        }}\n        onProjectFilterChange={() => {}}\n        onCreateWorkspace={() => setShowCreateWorkspace(true)}\n        onCreateProject={() => setShowCreateProject(true)}\n        onCreateCategory={() => setShowCreateCategory(true)}\n        onCreateMember={() => setShowAddMember(true)}\n        onEditProject={(project) => setEditingProject(project)}\n        onEditCategory={(category) => setEditingCategory(category)}\n        currentPage=\"financials\"\n      />\n\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => window.history.back()}\n                className=\"text-gray-600 hover:text-gray-800\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Project Financials</h1>\n                <p className=\"text-sm text-gray-600\">{selectedProject.name}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <NotificationsDropdown workspaceId={currentWorkspaceId || 0} />\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 rounded-full\">\n                    <UserCircle className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => window.location.href = '/api/logout'}>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 p-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"budgets\">Budget Setup</TabsTrigger>\n              <TabsTrigger value=\"outflows\">Outflow Management</TabsTrigger>\n              <TabsTrigger value=\"inflows\">Inflow Tracking</TabsTrigger>\n              <TabsTrigger value=\"setup\">Setup</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Budget</CardTitle>\n                    <Calculator className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">${totalBudget.toFixed(2)}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {budgets.length} budget categories\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n                    <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">${totalExpenses.toFixed(2)}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {expenses.length} expense entries\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">${totalRevenue.toFixed(2)}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {revenue.length} revenue streams\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Net Profit</CardTitle>\n                    {netProfit >= 0 ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                    )}\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      ${netProfit.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {netProfit >= 0 ? 'Profit' : 'Loss'}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Budget Utilization</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Budget Usage</span>\n                      <span>{budgetUtilization.toFixed(1)}%</span>\n                    </div>\n                    <Progress \n                      value={budgetUtilization} \n                      className={`w-full ${budgetUtilization > 100 ? 'bg-red-100' : budgetUtilization > 80 ? 'bg-yellow-100' : 'bg-green-100'}`}\n                    />\n                    <div className=\"text-sm text-muted-foreground\">\n                      {budgetUtilization > 100 ? 'Over budget' : \n                       budgetUtilization > 80 ? 'Approaching budget limit' : \n                       'Within budget'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Pie Chart Summaries */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Budget Distribution by Component */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Calculator className=\"h-4 w-4\" />\n                      <span>Budget by Component</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {budgetChartData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <RechartsPieChart>\n                          <Pie\n                            data={budgetChartData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={40}\n                            outerRadius={80}\n                            paddingAngle={5}\n                            dataKey=\"value\"\n                          >\n                            {budgetChartData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.fill} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [`$${parseFloat(value as string).toFixed(2)}`, 'Budget']} />\n                          <Legend />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <PieChart className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n                          <p>No budget data</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Expenses Distribution by Component */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TrendingDown className=\"h-4 w-4\" />\n                      <span>Expenses by Component</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {expenseChartData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <RechartsPieChart>\n                          <Pie\n                            data={expenseChartData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={40}\n                            outerRadius={80}\n                            paddingAngle={5}\n                            dataKey=\"value\"\n                          >\n                            {expenseChartData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.fill} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [`$${parseFloat(value as string).toFixed(2)}`, 'Expenses']} />\n                          <Legend />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <PieChart className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n                          <p>No expense data</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Revenue Distribution by Component */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                      <span>Revenue by Component</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {revenueChartData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <RechartsPieChart>\n                          <Pie\n                            data={revenueChartData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={40}\n                            outerRadius={80}\n                            paddingAngle={5}\n                            dataKey=\"value\"\n                          >\n                            {revenueChartData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.fill} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [`$${parseFloat(value as string).toFixed(2)}`, 'Revenue']} />\n                          <Legend />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <PieChart className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n                          <p>No revenue data</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Setup Tab */}\n            <TabsContent value=\"setup\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold\">Setup & Configuration</h2>\n              </div>\n\n              {/* Sub-tabs for different management sections */}\n              <Tabs defaultValue=\"components\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"components\">Components</TabsTrigger>\n                  <TabsTrigger value=\"outflow-types\">Outflow Types</TabsTrigger>\n                  <TabsTrigger value=\"inflow-types\">Inflow Types</TabsTrigger>\n                </TabsList>\n\n                {/* Components Management Sub-tab */}\n                <TabsContent value=\"components\" className=\"space-y-4\">\n\n              {/* Budget Allocation Alert */}\n              {budgetAllocation.overAllocated && (\n                <Card className=\"border-red-200 bg-red-50\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                      <div>\n                        <h3 className=\"font-semibold text-red-800\">Budget Over-Allocation Warning</h3>\n                        <p className=\"text-sm text-red-700\">\n                          Component allocations (${budgetAllocation.totalAllocated.toFixed(2)}) exceed total project budget (${budgetAllocation.totalProjectBudget.toFixed(2)}).\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Budget Allocation Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Budget Allocation Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">${budgetAllocation.totalProjectBudget.toFixed(2)}</div>\n                      <div className=\"text-sm text-gray-600\">Total Budget</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">${budgetAllocation.totalAllocated.toFixed(2)}</div>\n                      <div className=\"text-sm text-gray-600\">Allocated</div>\n                    </div>\n                    <div>\n                      <div className={`text-2xl font-bold ${budgetAllocation.remainingBudget > 0 ? 'text-emerald-600' : 'text-red-600'}`}>\n                        ${budgetAllocation.remainingBudget.toFixed(2)}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Remaining</div>\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <Progress \n                      value={budgetAllocation.totalProjectBudget > 0 ? (budgetAllocation.totalAllocated / budgetAllocation.totalProjectBudget) * 100 : 0} \n                      className={`w-full ${budgetAllocation.overAllocated ? 'bg-red-100' : 'bg-green-100'}`}\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {budgetAllocation.totalProjectBudget > 0 ? \n                        `${((budgetAllocation.totalAllocated / budgetAllocation.totalProjectBudget) * 100).toFixed(1)}% allocated` : \n                        'No budget set'\n                      }\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"flex justify-between items-center\">\n                <div></div>\n                <Dialog open={showCreateComponent} onOpenChange={setShowCreateComponent}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Component\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create Component</DialogTitle>\n                    </DialogHeader>\n                    <Form {...componentForm}>\n                      <form onSubmit={componentForm.handleSubmit(onCreateComponent)} className=\"space-y-4\">\n                        <FormField\n                          control={componentForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Component Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., User Authentication, Payment System\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={componentForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Brief description of this component...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={componentForm.control}\n                            name=\"type\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Type</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select type\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"milestone\">Milestone</SelectItem>\n                                    <SelectItem value=\"phase\">Phase</SelectItem>\n                                    <SelectItem value=\"section\">Section</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={componentForm.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Status</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select status\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"active\">Active</SelectItem>\n                                    <SelectItem value=\"completed\">Completed</SelectItem>\n                                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <FormField\n                          control={componentForm.control}\n                          name=\"budgetAllocation\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Budget Allocation</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={componentForm.control}\n                            name=\"startDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Start Date</FormLabel>\n                                <FormControl>\n                                  <Input type=\"date\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={componentForm.control}\n                            name=\"endDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>End Date</FormLabel>\n                                <FormControl>\n                                  <Input type=\"date\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateComponent(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createComponentMutation.isPending}>\n                            {createComponentMutation.isPending ? \"Creating...\" : \"Create Component\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"grid gap-4\">\n                {components.map((component: any) => (\n                  <Card key={component.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-center\">\n                        <CardTitle className=\"text-lg\">{component.name}</CardTitle>\n                        <div className=\"flex space-x-2\">\n                          <Badge variant={component.type === 'milestone' ? 'default' : component.type === 'phase' ? 'secondary' : 'outline'}>\n                            {component.type}\n                          </Badge>\n                          <Badge variant={component.status === 'active' ? 'default' : component.status === 'completed' ? 'secondary' : 'destructive'}>\n                            {component.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {component.description && (\n                        <p className=\"text-sm text-gray-600 mb-3\">{component.description}</p>\n                      )}\n                      {component.budgetAllocation && (\n                        <div className=\"mb-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm font-medium\">Budget Allocation:</span>\n                            <span className=\"text-sm font-semibold text-green-600\">${parseFloat(component.budgetAllocation).toFixed(2)}</span>\n                          </div>\n                        </div>\n                      )}\n                      {(component.startDate || component.endDate) && (\n                        <div className=\"flex space-x-4 text-sm text-gray-500\">\n                          {component.startDate && (\n                            <span>Start: {new Date(component.startDate).toLocaleDateString()}</span>\n                          )}\n                          {component.endDate && (\n                            <span>End: {new Date(component.endDate).toLocaleDateString()}</span>\n                          )}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n                {components.length === 0 && (\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"text-center text-gray-500\">\n                        <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                        <p>No components created yet.</p>\n                        <p className=\"text-sm\">Create components to organize your project finances by milestones or phases.</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n                </TabsContent>\n\n                {/* Outflow Types Management Sub-tab */}\n                <TabsContent value=\"outflow-types\" className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-md font-medium\">Outflow Type Categories</h3>\n                    <Dialog open={showCreateOutflowType} onOpenChange={setShowCreateOutflowType}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Outflow Type\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Create Outflow Type</DialogTitle>\n                        </DialogHeader>\n                        <Form {...outflowTypeForm}>\n                          <form onSubmit={outflowTypeForm.handleSubmit((data) => createOutflowTypeMutation.mutate(data))} className=\"space-y-4\">\n                            <FormField\n                              control={outflowTypeForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Name</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., Fuel, Office Supplies\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={outflowTypeForm.control}\n                              name=\"description\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Description (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Textarea placeholder=\"Brief description of this outflow type\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <Button type=\"submit\" disabled={createOutflowTypeMutation.isPending}>\n                              {createOutflowTypeMutation.isPending ? \"Creating...\" : \"Create Outflow Type\"}\n                            </Button>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  \n                  <div className=\"grid gap-3\">\n                    {Array.isArray(outflowTypes) && outflowTypes.map((type: any) => (\n                      <Card key={type.id}>\n                        <CardContent className=\"pt-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h4 className=\"font-medium\">{type.name}</h4>\n                              {type.description && (\n                                <p className=\"text-sm text-gray-600 mt-1\">{type.description}</p>\n                              )}\n                            </div>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                    {(!Array.isArray(outflowTypes) || outflowTypes.length === 0) && (\n                      <Card>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"text-center text-gray-500\">\n                            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                            <p>No outflow types configured yet.</p>\n                            <p className=\"text-sm\">Add categories like Fuel, Office Supplies, etc.</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </TabsContent>\n\n                {/* Inflow Types Management Sub-tab */}\n                <TabsContent value=\"inflow-types\" className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-md font-medium\">Inflow Type Categories</h3>\n                    <Dialog open={showCreateInflowType} onOpenChange={setShowCreateInflowType}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Inflow Type\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Create Inflow Type</DialogTitle>\n                        </DialogHeader>\n                        <Form {...inflowTypeForm}>\n                          <form onSubmit={inflowTypeForm.handleSubmit((data) => createInflowTypeMutation.mutate(data))} className=\"space-y-4\">\n                            <FormField\n                              control={inflowTypeForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Name</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., Funding, Sale Income\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={inflowTypeForm.control}\n                              name=\"description\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Description (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Textarea placeholder=\"Brief description of this inflow type\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <Button type=\"submit\" disabled={createInflowTypeMutation.isPending}>\n                              {createInflowTypeMutation.isPending ? \"Creating...\" : \"Create Inflow Type\"}\n                            </Button>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  \n                  <div className=\"grid gap-3\">\n                    {Array.isArray(inflowTypes) && inflowTypes.map((type: any) => (\n                      <Card key={type.id}>\n                        <CardContent className=\"pt-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h4 className=\"font-medium\">{type.name}</h4>\n                              {type.description && (\n                                <p className=\"text-sm text-gray-600 mt-1\">{type.description}</p>\n                              )}\n                            </div>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                    {(!Array.isArray(inflowTypes) || inflowTypes.length === 0) && (\n                      <Card>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"text-center text-gray-500\">\n                            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                            <p>No inflow types configured yet.</p>\n                            <p className=\"text-sm\">Add categories like Funding, Sale Income, etc.</p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </TabsContent>\n\n            {/* Budgets Tab */}\n            <TabsContent value=\"budgets\" className=\"space-y-6\">\n              {/* Budget Allocation Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Budget Allocation Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">${budgetAllocation.totalProjectBudget.toFixed(2)}</div>\n                      <div className=\"text-sm text-gray-600\">Total Budget</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">${budgetAllocation.totalAllocated.toFixed(2)}</div>\n                      <div className=\"text-sm text-gray-600\">Allocated</div>\n                    </div>\n                    <div>\n                      <div className={`text-2xl font-bold ${budgetAllocation.remainingBudget > 0 ? 'text-emerald-600' : 'text-red-600'}`}>\n                        ${budgetAllocation.remainingBudget.toFixed(2)}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Remaining</div>\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <Progress \n                      value={budgetAllocation.totalProjectBudget > 0 ? (budgetAllocation.totalAllocated / budgetAllocation.totalProjectBudget) * 100 : 0}\n                      className={`w-full ${budgetAllocation.overAllocated ? 'bg-red-100' : 'bg-green-100'}`}\n                    />\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {budgetAllocation.totalProjectBudget > 0 ? \n                        `${((budgetAllocation.totalAllocated / budgetAllocation.totalProjectBudget) * 100).toFixed(1)}% allocated` : \n                        'No budget set'\n                      }\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold\">Project Budget Setup</h2>\n                <Dialog open={showCreateBudget} onOpenChange={setShowCreateBudget}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Set Project Budget\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Set Project Budget</DialogTitle>\n                    </DialogHeader>\n                    <Form {...budgetForm}>\n                      <form onSubmit={budgetForm.handleSubmit(onCreateBudget)} className=\"space-y-4\">\n                        <FormField\n                          control={budgetForm.control}\n                          name=\"budgetType\"\n                          render={({ field }) => (\n                            <FormItem className=\"hidden\">\n                              <FormControl>\n                                <Input {...field} value=\"project\" />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        {budgetForm.watch(\"budgetType\") === \"component\" && budgetAllocation.totalProjectBudget === 0 && (\n                          <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                            <div className=\"flex items-center space-x-2\">\n                              <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                              <p className=\"text-sm text-yellow-800\">\n                                Set a project budget first to allocate funds to components.\n                              </p>\n                            </div>\n                          </div>\n                        )}\n                        {budgetForm.watch(\"budgetType\") === \"component\" && budgetAllocation.remainingBudget > 0 && (\n                          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-md\">\n                            <p className=\"text-sm text-blue-800\">\n                              Available for allocation: ${budgetAllocation.remainingBudget.toFixed(2)}\n                            </p>\n                          </div>\n                        )}\n                        <FormField\n                          control={budgetForm.control}\n                          name=\"budgetAmount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Budget Amount</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={budgetForm.control}\n                          name=\"period\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Period</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select period\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                                  <SelectItem value=\"yearly\">Yearly</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateBudget(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createBudgetMutation.isPending}>\n                            Create Budget\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"grid gap-4\">\n                {Array.isArray(budgets) && budgets.filter((budget: any) => !budget.componentId).map((budget: any) => (\n                  <Card key={budget.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-center\">\n                        <CardTitle className=\"text-lg\">{budget.category}</CardTitle>\n                        <div className=\"flex space-x-2\">\n                          <Badge variant=\"outline\">{budget.period}</Badge>\n                          <Badge variant=\"secondary\">Project Budget</Badge>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingBudget(budget);\n                              setShowEditBudget(true);\n                            }}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span>Budget: ${parseFloat(budget.budgetAmount).toFixed(2)}</span>\n                        <span>Spent: ${parseFloat(budget.spentAmount || 0).toFixed(2)}</span>\n                      </div>\n                      <Progress \n                        value={budget.budgetAmount > 0 ? (parseFloat(budget.spentAmount || 0) / parseFloat(budget.budgetAmount)) * 100 : 0} \n                        className=\"w-full\"\n                      />\n                    </CardContent>\n                  </Card>\n                ))}\n                {(!Array.isArray(budgets) || budgets.filter((b: any) => !b.componentId).length === 0) && (\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"text-center text-gray-500\">\n                        <Calculator className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                        <p>No project budgets set yet.</p>\n                        <p className=\"text-sm\">Set up project-level budgets to track overall spending.</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Outflows Tab */}\n            <TabsContent value=\"outflows\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold\">Outflow Management</h2>\n                <Dialog open={showCreateExpense} onOpenChange={setShowCreateExpense}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Outflow\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create Outflow</DialogTitle>\n                    </DialogHeader>\n                    <Form {...expenseForm}>\n                      <form onSubmit={expenseForm.handleSubmit(onCreateExpense)} className=\"space-y-4\">\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Title</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Expense title\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Amount</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"componentId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Component</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : \"\")} value={field.value?.toString()}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select component\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {components.map((component: any) => (\n                                    <SelectItem key={component.id} value={component.id.toString()}>\n                                      {component.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"outflowTypeId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Outflow Type</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : 0)} value={field.value ? field.value.toString() : \"\"}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select outflow type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {Array.isArray(outflowTypes) && outflowTypes.map((type: any) => (\n                                    <SelectItem key={type.id} value={type.id.toString()}>\n                                      {type.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"date\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={expenseForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Optional description\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateExpense(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createExpenseMutation.isPending}>\n                            Create Outflow\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"grid gap-4\">\n                {expenses.map((expense: any) => (\n                  <Card key={expense.id}>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h3 className=\"font-semibold\">{expense.title}</h3>\n                          <p className=\"text-sm text-gray-600\">{expense.category}</p>\n                          <p className=\"text-xs text-gray-500\">{new Date(expense.date).toLocaleDateString()}</p>\n                          {expense.description && (\n                            <p className=\"text-sm text-gray-700 mt-2\">{expense.description}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-semibold\">${parseFloat(expense.amount).toFixed(2)}</div>\n                          <Badge variant={expense.status === 'approved' ? 'default' : expense.status === 'pending' ? 'secondary' : 'destructive'}>\n                            {expense.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            {/* Inflows Tab */}\n            <TabsContent value=\"inflows\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-semibold\">Inflow Tracking</h2>\n                <Dialog open={showCreateRevenue} onOpenChange={setShowCreateRevenue}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Inflow\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create Inflow</DialogTitle>\n                    </DialogHeader>\n                    <Form {...revenueForm}>\n                      <form onSubmit={revenueForm.handleSubmit(onCreateRevenue)} className=\"space-y-4\">\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Title</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Revenue title\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Amount</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"source\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Source</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Revenue source\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"inflowTypeId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Inflow Type</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : 0)} value={field.value ? field.value.toString() : \"\"}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select inflow type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {Array.isArray(inflowTypes) && inflowTypes.map((type: any) => (\n                                    <SelectItem key={type.id} value={type.id.toString()}>\n                                      {type.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"date\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"invoiceNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Invoice Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Optional invoice number\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={revenueForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Optional description\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateRevenue(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createRevenueMutation.isPending}>\n                            Create Inflow\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"grid gap-4\">\n                {revenue.map((rev: any) => (\n                  <Card key={rev.id}>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h3 className=\"font-semibold\">{rev.title}</h3>\n                          <p className=\"text-sm text-gray-600\">{rev.source}</p>\n                          <p className=\"text-xs text-gray-500\">{new Date(rev.date).toLocaleDateString()}</p>\n                          {rev.invoiceNumber && (\n                            <p className=\"text-xs text-gray-500\">Invoice: {rev.invoiceNumber}</p>\n                          )}\n                          {rev.description && (\n                            <p className=\"text-sm text-gray-700 mt-2\">{rev.description}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-semibold text-green-600\">${parseFloat(rev.amount).toFixed(2)}</div>\n                          <Badge variant={rev.status === 'received' ? 'default' : 'secondary'}>\n                            {rev.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showCreateWorkspace && (\n        <CreateWorkspaceModal\n          open={showCreateWorkspace}\n          onClose={() => setShowCreateWorkspace(false)}\n        />\n      )}\n      {showCreateProject && (\n        <CreateProjectModal\n          open={showCreateProject}\n          onClose={() => setShowCreateProject(false)}\n          workspaceId={currentWorkspaceId || 0}\n        />\n      )}\n      {showCreateCategory && (\n        <CreateCategoryModal\n          open={showCreateCategory}\n          onClose={() => setShowCreateCategory(false)}\n          workspaceId={currentWorkspaceId || 0}\n        />\n      )}\n      {showAddMember && (\n        <AddMemberModal\n          open={showAddMember}\n          onClose={() => setShowAddMember(false)}\n          workspaceId={currentWorkspaceId || 0}\n        />\n      )}\n      {editingProject && (\n        <EditProjectModal\n          open={!!editingProject}\n          onClose={() => setEditingProject(null)}\n          project={editingProject}\n        />\n      )}\n      {editingCategory && (\n        <EditCategoryModal\n          open={!!editingCategory}\n          onClose={() => setEditingCategory(null)}\n          category={editingCategory}\n        />\n      )}\n\n      {/* Edit Budget Modal */}\n      <Dialog open={showEditBudget} onOpenChange={setShowEditBudget}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Project Budget</DialogTitle>\n          </DialogHeader>\n          <Form {...editBudgetForm}>\n            <form onSubmit={editBudgetForm.handleSubmit(async (data) => {\n              try {\n                await apiRequest(\"PATCH\", `/api/projects/${selectedProject?.id}/budgets/${editingBudget?.id}`, {\n                  ...data,\n                  budgetType: \"project\",\n                  workspaceId: currentWorkspaceId\n                });\n                queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProject?.id}/budgets`] });\n                toast({ title: \"Budget updated successfully!\" });\n                setShowEditBudget(false);\n                setEditingBudget(null);\n                editBudgetForm.reset();\n              } catch (error) {\n                toast({ title: \"Failed to update budget\", variant: \"destructive\" });\n              }\n            })} className=\"space-y-4\">\n              <FormField\n                control={editBudgetForm.control}\n                name=\"budgetAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Budget Amount</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"Enter budget amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editBudgetForm.control}\n                name=\"period\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Period</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select period\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                        <SelectItem value=\"yearly\">Yearly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setShowEditBudget(false);\n                  setEditingBudget(null);\n                  editBudgetForm.reset();\n                }}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Update Budget</Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* AI Assistant Widget - Available on all pages */}\n      {currentWorkspaceId && <AIAssistantWidget workspaceId={currentWorkspaceId} />}\n    </div>\n  );\n}","size_bytes":89230},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Brain, \n  CheckSquare, \n  DollarSign, \n  FileText, \n  Users, \n  Zap,\n  Calendar,\n  MessageSquare,\n  FolderOpen,\n  Target\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const { isLoading } = useAuth();\n\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-white\">\n      {/* Header */}\n      <header className=\"border-b border-gray-200 bg-white/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Brain className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-gray-900\">TasksAI</span>\n            </div>\n            <Button onClick={handleLogin} size=\"lg\" className=\"bg-primary hover:bg-primary/90\">\n              Get Started\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"text-center max-w-4xl mx-auto\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            AI-First Project Management\n          </Badge>\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-6 leading-tight\">\n            The All-in-One{\" \"}\n            <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary\">\n              AI-Powered\n            </span>{\" \"}\n            Workspace\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 leading-relaxed\">\n            Combine project execution, financial monitoring, and knowledge management \n            in workspace-isolated environments with intelligent AI assistance.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button onClick={handleLogin} size=\"lg\" className=\"bg-primary hover:bg-primary/90\">\n              Start Your Free Workspace\n            </Button>\n            <Button variant=\"outline\" size=\"lg\">\n              Watch Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Three Management Layers, One Platform\n          </h2>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Revolutionary workspace-based solution that reimagines project management \n            through intelligent integration and AI-native design.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"text-center hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <CheckSquare className=\"h-6 w-6 text-primary\" />\n              </div>\n              <CardTitle>Execute</CardTitle>\n              <CardDescription>Tasks Management</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Plan and track all project deliverables</li>\n                <li>• Monitor progress and deadlines</li>\n                <li>• Coordinate team efforts with intelligent automation</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <DollarSign className=\"h-6 w-6 text-secondary\" />\n              </div>\n              <CardTitle>Monitor</CardTitle>\n              <CardDescription>Financial Management</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Track project budgets with predictive analytics</li>\n                <li>• Monitor profitability and ROI in real-time</li>\n                <li>• Handle client billing and automated reporting</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"h-6 w-6 text-accent\" />\n              </div>\n              <CardTitle>Document</CardTitle>\n              <CardDescription>Knowledge Management</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Capture all project knowledge in living docs</li>\n                <li>• Build institutional memory with AI insights</li>\n                <li>• Create evolving best practices and optimization</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features List */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"flex items-center space-x-3\">\n            <Calendar className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Multiple View Modes</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">AI Chat Assistant</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Users className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Team Collaboration</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <FolderOpen className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">File Vault</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <MessageSquare className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Project Chat</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Target className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Brain Dump</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Zap className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Time Tracking</span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <CheckSquare className=\"h-5 w-5 text-primary\" />\n            <span className=\"text-sm font-medium\">Smart Automation</span>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"bg-gradient-to-r from-primary to-secondary py-20\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Transform Your Workflow?\n          </h2>\n          <p className=\"text-xl text-white/90 mb-8\">\n            Join thousands of teams using AI-powered project management to achieve more.\n          </p>\n          <Button \n            onClick={handleLogin} \n            size=\"lg\" \n            variant=\"secondary\"\n            className=\"bg-white text-primary hover:bg-gray-100\"\n          >\n            Start Your Free Workspace\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"w-6 h-6 bg-gradient-to-r from-primary to-secondary rounded flex items-center justify-center\">\n              <Brain className=\"h-4 w-4 text-white\" />\n            </div>\n            <span className=\"text-lg font-semibold text-gray-900\">TasksAI</span>\n          </div>\n          <p className=\"text-center text-gray-600 mt-4\">\n            © 2025 TasksAI. Built for the future of work.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9066},"client/src/pages/members.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Mail, User, Calendar, CheckCircle, Clock, AlertCircle, ArrowLeft, Bot, Settings, Building, UserCircle, LogOut, Trash2, UserMinus } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport NotificationsDropdown from \"@/components/notifications-dropdown\";\nimport CreateWorkspaceModal from \"@/components/modals/create-workspace-modal\";\nimport CreateProjectModal from \"@/components/modals/create-project-modal\";\nimport CreateCategoryModal from \"@/components/modals/create-category-modal\";\nimport EditProjectModal from \"@/components/modals/edit-project-modal\";\nimport EditCategoryModal from \"@/components/modals/edit-category-modal\";\nimport AddMemberModal from \"@/components/modals/add-member-modal\";\n\ninterface Member {\n  id: number;\n  workspaceId: number;\n  userId: string;\n  name: string;\n  memberType: string;\n  role: string;\n  isActive: boolean;\n  email?: string;\n  user?: {\n    email: string;\n    firstName?: string;\n    lastName?: string;\n    profileImageUrl?: string;\n  };\n}\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: number;\n  dueDate: string;\n  projectId: number;\n  categoryId: number;\n  assignedMemberId: number;\n  project?: {\n    name: string;\n  };\n  category?: {\n    name: string;\n    color: string;\n  };\n}\n\ninterface Project {\n  id: number;\n  name: string;\n  description: string;\n  status: string;\n  budget: number;\n  spent: number;\n}\n\nexport default function MembersPage() {\n  const { workspaceId } = useParams();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const currentWorkspaceId = parseInt(workspaceId || \"1\");\n\n  // Modal states\n  const [showCreateWorkspace, setShowCreateWorkspace] = useState(false);\n  const [showCreateProject, setShowCreateProject] = useState(false);\n  const [showEditProject, setShowEditProject] = useState(false);\n  const [showCreateCategory, setShowCreateCategory] = useState(false);\n  const [showEditCategory, setShowEditCategory] = useState(false);\n  const [showAddMember, setShowAddMember] = useState(false);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n\n  // Data queries\n  const { data: workspaces } = useQuery({\n    queryKey: [\"/api/workspaces\"],\n  });\n\n  const { data: members = [], isLoading: membersLoading } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/members`],\n  });\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/tasks`],\n  });\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/projects`],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/categories`],\n  });\n\n  // Check if current user is workspace owner\n  const isWorkspaceOwner = workspaces?.find((ws: any) => ws.id === currentWorkspaceId)?.ownerId === user?.id;\n\n  // Remove member mutation\n  const removeMemberMutation = useMutation({\n    mutationFn: async (memberId: number) => {\n      return apiRequest(`/api/workspaces/${currentWorkspaceId}/members/${memberId}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/members`] });\n      toast({\n        title: \"Member removed\",\n        description: \"Member has been successfully removed from the workspace.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getMemberTasks = (memberId: number) => {\n    return tasks.filter((task: Task) => task.assignedMemberId === memberId);\n  };\n\n  const getMemberProjects = (memberId: number) => {\n    const memberTasks = getMemberTasks(memberId);\n    const projectIds = [...new Set(memberTasks.map((task: Task) => task.projectId))];\n    return projects.filter((project: Project) => projectIds.includes(project.id));\n  };\n\n  const getTaskStats = (memberId: number) => {\n    const memberTasks = getMemberTasks(memberId);\n    const total = memberTasks.length;\n    const completed = memberTasks.filter((task: Task) => task.status === \"completed\").length;\n    const inProgress = memberTasks.filter((task: Task) => task.status === \"in_progress\").length;\n    const todo = memberTasks.filter((task: Task) => task.status === \"todo\").length;\n    const overdue = memberTasks.filter((task: Task) => {\n      if (!task.dueDate) return false;\n      return new Date(task.dueDate) < new Date() && task.status !== \"completed\";\n    }).length;\n\n    return { total, completed, inProgress, todo, overdue };\n  };\n\n  const getPriorityColor = (priority: number) => {\n    switch (priority) {\n      case 3: return \"bg-red-500\";\n      case 2: return \"bg-orange-500\";\n      case 1: return \"bg-yellow-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"text-green-600 bg-green-100\";\n      case \"in_progress\": return \"text-blue-600 bg-blue-100\";\n      case \"todo\": return \"text-gray-600 bg-gray-100\";\n      default: return \"text-gray-600 bg-gray-100\";\n    }\n  };\n\n  if (membersLoading || tasksLoading || projectsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar */}\n      <Sidebar\n        workspaces={workspaces || []}\n        currentWorkspaceId={currentWorkspaceId}\n        onWorkspaceChange={() => {}}\n        projects={projects || []}\n        categories={categories || []}\n        viewMode=\"home\"\n        onViewModeChange={() => {}}\n        onProjectFilterChange={() => {}}\n        onCreateWorkspace={() => setShowCreateWorkspace(true)}\n        onCreateProject={() => setShowCreateProject(true)}\n        onCreateCategory={() => setShowCreateCategory(true)}\n        onCreateMember={() => setShowAddMember(true)}\n        onEditProject={(project) => {\n          setSelectedProject(project);\n          setShowEditProject(true);\n        }}\n        onEditCategory={(category) => {\n          setSelectedCategory(category);\n          setShowEditCategory(true);\n        }}\n        currentPage=\"members\"\n      />\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-gray-900\">Workspace Members</h1>\n                <p className=\"text-gray-600 text-sm\">Manage and view member details, tasks, and performance</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"text-sm px-2 py-1\">\n                {members.length} Member{members.length !== 1 ? 's' : ''}\n              </Badge>\n              \n              <NotificationsDropdown workspaceId={currentWorkspaceId} />\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                    <UserCircle className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <UserCircle className=\"h-4 w-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Building className=\"h-4 w-4 mr-2\" />\n                    Workspace Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-full\">\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {members.map((member: Member) => {\n          const stats = getTaskStats(member.id);\n          const memberProjects = getMemberProjects(member.id);\n          const completionRate = stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;\n          const memberEmail = member.user?.email || member.email;\n          const memberName = member.user?.firstName && member.user?.lastName \n            ? `${member.user.firstName} ${member.user.lastName}`\n            : member.name;\n\n          return (\n            <Card key={member.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={member.user?.profileImageUrl} />\n                    <AvatarFallback className=\"bg-primary text-white\">\n                      {memberName.split(' ').map(n => n[0]).join('').toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{memberName}</CardTitle>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge variant={member.memberType === 'user' ? 'default' : 'secondary'}>\n                        {member.memberType === 'user' ? 'User' : 'AI Agent'}\n                      </Badge>\n                      {member.role && (\n                        <Badge variant=\"outline\">{member.role}</Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                {/* Contact Information */}\n                {memberEmail && (\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span className=\"truncate\">{memberEmail}</span>\n                  </div>\n                )}\n\n                {/* Task Statistics */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Task Completion</span>\n                    <span className=\"text-sm text-gray-600\">{completionRate}%</span>\n                  </div>\n                  <Progress value={completionRate} className=\"h-2\" />\n                  \n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                      <span>Completed: {stats.completed}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"h-3 w-3 text-blue-500\" />\n                      <span>In Progress: {stats.inProgress}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar className=\"h-3 w-3 text-gray-500\" />\n                      <span>Todo: {stats.todo}</span>\n                    </div>\n                    {stats.overdue > 0 && (\n                      <div className=\"flex items-center space-x-1\">\n                        <AlertCircle className=\"h-3 w-3 text-red-500\" />\n                        <span className=\"text-red-600\">Overdue: {stats.overdue}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Projects */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-sm font-medium\">Active Projects ({memberProjects.length})</h4>\n                  <div className=\"space-y-1\">\n                    {memberProjects.slice(0, 3).map((project: Project) => (\n                      <div key={project.id} className=\"text-xs text-gray-600 bg-gray-50 px-2 py-1 rounded\">\n                        {project.name}\n                      </div>\n                    ))}\n                    {memberProjects.length > 3 && (\n                      <div className=\"text-xs text-gray-500\">\n                        +{memberProjects.length - 3} more projects\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Recent Tasks */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-sm font-medium\">Recent Tasks</h4>\n                  <div className=\"space-y-1\">\n                    {getMemberTasks(member.id).slice(0, 2).map((task: Task) => (\n                      <div key={task.id} className=\"text-xs bg-gray-50 p-2 rounded space-y-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium truncate\">{task.title}</span>\n                          <Badge className={`text-xs ${getStatusColor(task.status)}`}>\n                            {task.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`h-2 w-2 rounded-full ${getPriorityColor(task.priority)}`}></div>\n                          {task.category && (\n                            <span className=\"text-gray-500\">{task.category.name}</span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    {stats.total > 2 && (\n                      <div className=\"text-xs text-gray-500\">\n                        +{stats.total - 2} more tasks\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                    <User className=\"h-3 w-3 mr-1\" />\n                    View Profile\n                  </Button>\n                  {memberEmail && (\n                    <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                      <Mail className=\"h-3 w-3 mr-1\" />\n                      Contact\n                    </Button>\n                  )}\n                  \n                  {/* Remove member button - only for workspace owners */}\n                  {isWorkspaceOwner && member.userId !== user?.id && (\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700 hover:bg-red-50\">\n                          <UserMinus className=\"h-3 w-3\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Remove Member</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to remove {memberName} from this workspace? \n                            This action cannot be undone and they will lose access to all workspace data.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => removeMemberMutation.mutate(member.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                            disabled={removeMemberMutation.isPending}\n                          >\n                            {removeMemberMutation.isPending ? \"Removing...\" : \"Remove Member\"}\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {members.length === 0 && (\n        <div className=\"text-center py-12\">\n          <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No members found</h3>\n          <p className=\"text-gray-600\">This workspace doesn't have any members yet.</p>\n        </div>\n      )}\n        </div>\n      </main>\n\n      {/* Modals */}\n      <CreateWorkspaceModal\n        open={showCreateWorkspace}\n        onClose={() => setShowCreateWorkspace(false)}\n      />\n      \n      <CreateProjectModal\n        open={showCreateProject}\n        onClose={() => setShowCreateProject(false)}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <EditProjectModal\n        open={showEditProject}\n        onClose={() => {\n          setShowEditProject(false);\n          setSelectedProject(null);\n        }}\n        project={selectedProject}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <CreateCategoryModal\n        open={showCreateCategory}\n        onClose={() => setShowCreateCategory(false)}\n        workspaceId={currentWorkspaceId}\n      />\n      \n      <EditCategoryModal\n        open={showEditCategory}\n        onClose={() => {\n          setShowEditCategory(false);\n          setSelectedCategory(null);\n        }}\n        category={selectedCategory}\n        workspaceId={currentWorkspaceId}\n      />\n\n      <AddMemberModal\n        open={showAddMember}\n        onClose={() => setShowAddMember(false)}\n        workspaceId={currentWorkspaceId}\n      />\n    </div>\n  );\n}","size_bytes":19658},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/simple-accept.tsx":{"content":"import { useEffect, useState } from \"react\";\n\nexport default function SimpleAccept() {\n  const [token, setToken] = useState<string | null>(null);\n  const [status, setStatus] = useState<'loading' | 'ready' | 'processing' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    // Extract token from URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const tokenParam = urlParams.get('token');\n    \n    if (tokenParam) {\n      setToken(tokenParam);\n      setStatus('ready');\n    } else {\n      setStatus('error');\n      setMessage('No invitation token found');\n    }\n  }, []);\n\n  const handleAccept = async () => {\n    if (!token) return;\n    \n    setStatus('processing');\n    setMessage('Processing invitation...');\n    \n    try {\n      const response = await fetch(`/api/invitations/${token}/accept`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for auth\n      });\n      \n      if (response.status === 401) {\n        setMessage('Redirecting to login...');\n        // Pass invitation token to login for auto-acceptance\n        setTimeout(() => {\n          window.location.href = `/api/login?invitation=${token}`;\n        }, 1000);\n        return;\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to accept invitation');\n      }\n      \n      const data = await response.json();\n      setStatus('success');\n      \n      // Handle undefined workspaceName gracefully\n      const workspaceName = data.workspaceName || 'the workspace';\n      setMessage(`Welcome to ${workspaceName}!`);\n      \n      setTimeout(() => {\n        window.location.href = '/';\n      }, 2000);\n      \n    } catch (error) {\n      setStatus('error');\n      setMessage(error?.message || 'Failed to accept invitation');\n    }\n  };\n\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      display: 'flex', \n      alignItems: 'center', \n      justifyContent: 'center',\n      fontFamily: 'system-ui, sans-serif',\n      backgroundColor: '#f9fafb'\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        padding: '2rem',\n        borderRadius: '8px',\n        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n        maxWidth: '400px',\n        width: '100%',\n        textAlign: 'center'\n      }}>\n        <h1 style={{ marginBottom: '1rem', color: '#1f2937' }}>\n          Join Workspace\n        </h1>\n        \n        {status === 'loading' && (\n          <p>Loading invitation...</p>\n        )}\n        \n        {status === 'ready' && (\n          <>\n            <p style={{ marginBottom: '1.5rem', color: '#6b7280' }}>\n              You've been invited to join a workspace. Click below to accept.\n            </p>\n            <button\n              onClick={handleAccept}\n              style={{\n                backgroundColor: '#3b82f6',\n                color: 'white',\n                padding: '0.75rem 1.5rem',\n                border: 'none',\n                borderRadius: '6px',\n                cursor: 'pointer',\n                fontSize: '1rem',\n                width: '100%'\n              }}\n            >\n              Accept Invitation\n            </button>\n          </>\n        )}\n        \n        {status === 'processing' && (\n          <div>\n            <div style={{\n              width: '24px',\n              height: '24px',\n              border: '2px solid #e5e7eb',\n              borderTop: '2px solid #3b82f6',\n              borderRadius: '50%',\n              animation: 'spin 1s linear infinite',\n              margin: '0 auto 1rem'\n            }}></div>\n            <p>{message}</p>\n          </div>\n        )}\n        \n        {status === 'success' && (\n          <div>\n            <div style={{ color: '#10b981', marginBottom: '1rem' }}>✓</div>\n            <p>{message}</p>\n            <p style={{ fontSize: '0.875rem', color: '#6b7280' }}>\n              Redirecting to dashboard...\n            </p>\n          </div>\n        )}\n        \n        {status === 'error' && (\n          <div>\n            <div style={{ color: '#ef4444', marginBottom: '1rem' }}>✗</div>\n            <p style={{ color: '#ef4444' }}>{message}</p>\n          </div>\n        )}\n      </div>\n      \n      <style>{`\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":4530},"client/src/pages/vault.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { AIAssistantWidget } from '@/components/ai-assistant-widget';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Input } from '@/components/ui/input';\nimport { \n  ArrowLeft, \n  User, \n  Settings,\n  Upload,\n  FolderPlus,\n  File,\n  Folder,\n  Download,\n  Trash2,\n  Share,\n  Search,\n  FileText,\n  Image,\n  Video,\n  Archive,\n  MoreHorizontal,\n  Eye,\n  Edit\n} from 'lucide-react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Card, CardContent } from '@/components/ui/card';\nimport Sidebar from '@/components/sidebar';\nimport NotificationsDropdown from '@/components/notifications-dropdown';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface VaultFile {\n  id: number;\n  name: string;\n  type: 'file' | 'folder';\n  size?: number;\n  extension?: string;\n  path: string;\n  projectId?: number;\n  workspaceId: number;\n  createdAt: string;\n  updatedAt: string;\n  parentId?: number;\n  content?: string;\n  url?: string;\n}\n\ninterface FileExplorerProps {\n  selectedProject: any;\n  workspaceId: number;\n  files: VaultFile[];\n  onFileUpload: (file: File, projectId?: number, parentId?: number) => void;\n  onFolderCreate: (name: string, projectId?: number, parentId?: number) => void;\n  onFileDelete: (fileId: number) => void;\n  onFileRename: (fileId: number, newName: string) => void;\n}\n\nconst FileExplorer = ({ selectedProject, workspaceId, files, onFileUpload, onFolderCreate, onFileDelete, onFileRename }: FileExplorerProps) => {\n  const [currentPath, setCurrentPath] = useState<string>('/');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showCreateFolder, setShowCreateFolder] = useState(false);\n  const [newFolderName, setNewFolderName] = useState('');\n  const [selectedFiles, setSelectedFiles] = useState<number[]>([]);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n\n  const getFileIcon = (file: VaultFile) => {\n    if (file.type === 'folder') return Folder;\n    \n    const ext = file.extension?.toLowerCase();\n    if (['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(ext || '')) return Image;\n    if (['mp4', 'avi', 'mov', 'mkv'].includes(ext || '')) return Video;\n    if (['zip', 'rar', '7z', 'tar'].includes(ext || '')) return Archive;\n    if (['txt', 'md', 'doc', 'docx'].includes(ext || '')) return FileText;\n    return File;\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const filteredFiles = files.filter(file => {\n    const matchesSearch = file.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesProject = selectedProject ? file.projectId === selectedProject.id : !file.projectId;\n    return matchesSearch && matchesProject;\n  });\n\n  const handleFileUploadClick = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = true;\n    input.onchange = (e) => {\n      const files = (e.target as HTMLInputElement).files;\n      if (files) {\n        Array.from(files).forEach(file => {\n          onFileUpload(file, selectedProject?.id);\n        });\n      }\n    };\n    input.click();\n  };\n\n  const handleCreateFolder = () => {\n    if (newFolderName.trim()) {\n      onFolderCreate(newFolderName.trim(), selectedProject?.id);\n      setNewFolderName('');\n      setShowCreateFolder(false);\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col h-full\">\n      {/* File Explorer Header */}\n      <div className=\"p-4 border-b bg-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <h2 className=\"text-lg font-semibold\">\n              {selectedProject ? `${selectedProject.name} Files` : 'Workspace Files'}\n            </h2>\n            <span className=\"text-sm text-gray-500\">\n              ({filteredFiles.length} items)\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleFileUploadClick}\n            >\n              <Upload className=\"h-4 w-4 mr-1\" />\n              Upload\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowCreateFolder(true)}\n            >\n              <FolderPlus className=\"h-4 w-4 mr-1\" />\n              New Folder\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search files and folders...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* File Grid/List */}\n      <ScrollArea className=\"flex-1 p-4\">\n        {filteredFiles.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n            <Folder className=\"h-16 w-16 text-gray-300 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-500 mb-2\">No files yet</h3>\n            <p className=\"text-gray-400 mb-4\">\n              {selectedProject \n                ? `Upload files to ${selectedProject.name} project`\n                : 'Upload files to your workspace'\n              }\n            </p>\n            <Button onClick={handleFileUploadClick}>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload Files\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n            {filteredFiles.map((file) => {\n              const IconComponent = getFileIcon(file);\n              return (\n                <Card key={file.id} className=\"hover:shadow-md transition-shadow cursor-pointer group\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex flex-col items-center text-center\">\n                      <div className=\"relative mb-3\">\n                        <IconComponent className={`h-12 w-12 ${\n                          file.type === 'folder' ? 'text-blue-500' : 'text-gray-600'\n                        }`} />\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute -top-2 -right-2 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            >\n                              <MoreHorizontal className=\"h-3 w-3\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              Preview\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Download\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Rename\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Share className=\"h-4 w-4 mr-2\" />\n                              Share\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem \n                              className=\"text-red-600\"\n                              onClick={() => onFileDelete(file.id)}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                      \n                      <h4 className=\"font-medium text-sm truncate w-full mb-1\">\n                        {file.name}\n                      </h4>\n                      \n                      {file.type === 'file' && (\n                        <p className=\"text-xs text-gray-500\">\n                          {formatFileSize(file.size)}\n                        </p>\n                      )}\n                      \n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {new Date(file.updatedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </ScrollArea>\n\n      {/* Create Folder Dialog */}\n      <Dialog open={showCreateFolder} onOpenChange={setShowCreateFolder}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New Folder</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Folder name\"\n              value={newFolderName}\n              onChange={(e) => setNewFolderName(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateFolder()}\n            />\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowCreateFolder(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateFolder} disabled={!newFolderName.trim()}>\n                Create\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default function VaultPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Get workspace ID from URL or localStorage\n  const [currentWorkspaceId, setCurrentWorkspaceId] = useState<number>(() => {\n    const saved = localStorage.getItem('selectedWorkspaceId');\n    return saved ? parseInt(saved) : 2;\n  });\n\n  // Vault state\n  const [selectedProject, setSelectedProject] = useState<any>(null);\n\n  // Data queries\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const { data: workspaces } = useQuery({\n    queryKey: [\"/api/workspaces\"],\n  });\n\n  const { data: projects } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/projects`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Check URL parameters for project selection\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const projectId = urlParams.get('project');\n    if (projectId && projects) {\n      const project = Array.isArray(projects) ? projects.find((p: any) => p.id === parseInt(projectId)) : null;\n      if (project) {\n        setSelectedProject(project);\n      }\n    }\n  }, [projects]);\n\n  const { data: categories } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/categories`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  const { data: members } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/members`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  const { data: files = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/files`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  const { data: recentFiles = [] } = useQuery({\n    queryKey: [`/api/workspaces/${currentWorkspaceId}/files/recent`],\n    enabled: !!currentWorkspaceId,\n  });\n\n  // Get current workspace\n  const workspace = Array.isArray(workspaces) ? workspaces.find((w: any) => w.id === currentWorkspaceId) : null;\n\n  const handleWorkspaceChange = (workspaceId: number) => {\n    setCurrentWorkspaceId(workspaceId);\n    localStorage.setItem('selectedWorkspaceId', workspaceId.toString());\n  };\n\n  // File operations\n  const uploadFileMutation = useMutation({\n    mutationFn: async ({ file, projectId, parentId }: { file: File; projectId?: number; parentId?: number }) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      if (projectId) formData.append('projectId', projectId.toString());\n      if (parentId) formData.append('parentId', parentId.toString());\n      \n      const response = await fetch(`/api/workspaces/${currentWorkspaceId}/files/upload`, {\n        method: 'POST',\n        body: formData,\n      });\n      if (!response.ok) throw new Error('Upload failed');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/files`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/files/recent`] });\n      toast({ title: \"File uploaded successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to upload file\", variant: \"destructive\" });\n    },\n  });\n\n  const createFolderMutation = useMutation({\n    mutationFn: async ({ name, projectId, parentId }: { name: string; projectId?: number; parentId?: number }) => {\n      return apiRequest(`/api/workspaces/${currentWorkspaceId}/files/folder`, 'POST', {\n        name, projectId, parentId, workspaceId: currentWorkspaceId\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/files`] });\n      toast({ title: \"Folder created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create folder\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteFileMutation = useMutation({\n    mutationFn: async (fileId: number) => {\n      return apiRequest(`/api/workspaces/${currentWorkspaceId}/files/${fileId}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/files`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${currentWorkspaceId}/files/recent`] });\n      toast({ title: \"File deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete file\", variant: \"destructive\" });\n    },\n  });\n\n  const handleFileUpload = (file: File, projectId?: number, parentId?: number) => {\n    uploadFileMutation.mutate({ file, projectId, parentId });\n  };\n\n  const handleFolderCreate = (name: string, projectId?: number, parentId?: number) => {\n    createFolderMutation.mutate({ name, projectId, parentId });\n  };\n\n  const handleFileDelete = (fileId: number) => {\n    deleteFileMutation.mutate(fileId);\n  };\n\n  const handleFileRename = (fileId: number, newName: string) => {\n    // TODO: Implement rename functionality\n    toast({ title: \"Rename functionality coming soon\" });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar\n        workspaces={Array.isArray(workspaces) ? workspaces : []}\n        currentWorkspaceId={currentWorkspaceId}\n        onWorkspaceChange={handleWorkspaceChange}\n        projects={Array.isArray(projects) ? projects : []}\n        categories={Array.isArray(categories) ? categories : []}\n        viewMode=\"home\"\n        onViewModeChange={(mode) => {\n          if (mode === \"kanban\") {\n            window.location.href = `/workspace/${currentWorkspaceId}`;\n          }\n        }}\n        onProjectFilterChange={(projectId) => {\n          window.location.href = `/workspace/${currentWorkspaceId}?projectFilter=${projectId}`;\n        }}\n        onCreateWorkspace={() => {}}\n        onCreateProject={() => {}}\n        onCreateCategory={() => {}}\n        onCreateMember={() => {}}\n        onEditProject={() => {}}\n        onEditCategory={() => {}}\n        currentPage=\"vault\"\n      />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-white border-b border-gray-200 px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">\n                  {(workspace as any)?.name || 'Workspace'} - Vault\n                </h1>\n                <p className=\"text-sm text-gray-500\">\n                  File storage and project documents\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <NotificationsDropdown workspaceId={currentWorkspaceId} />\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <User className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium text-sm\">\n                        {(user as any)?.firstName && (user as any)?.lastName \n                          ? `${(user as any).firstName} ${(user as any).lastName}` \n                          : (user as any)?.firstName || (user as any)?.email || 'User'}\n                      </p>\n                      <p className=\"w-[200px] truncate text-xs text-muted-foreground\">\n                        {(user as any)?.email}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    <span>Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Vault Sidebar */}\n          <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n            <div className=\"p-4 border-b\">\n              <h2 className=\"font-semibold text-gray-900\">Vault</h2>\n            </div>\n\n            <ScrollArea className=\"flex-1\">\n              <div className=\"p-4 space-y-4\">\n                {/* Recent Documents */}\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Recent Documents</h3>\n                  <div className=\"space-y-1\">\n                    {Array.isArray(recentFiles) && recentFiles.slice(0, 5).map((file: any) => (\n                      <Button\n                        key={file.id}\n                        variant=\"ghost\"\n                        className=\"w-full justify-start gap-2 h-auto p-2 text-left\"\n                        onClick={() => setSelectedProject(null)}\n                      >\n                        <File className=\"h-4 w-4 flex-shrink-0\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"text-sm font-medium truncate\">{file.name}</div>\n                          <div className=\"text-xs text-gray-500\">\n                            {file.createdAt ? new Date(file.createdAt).toLocaleDateString() : 'Unknown date'}\n                          </div>\n                        </div>\n                      </Button>\n                    ))}\n                    {(!Array.isArray(recentFiles) || recentFiles.length === 0) && (\n                      <p className=\"text-sm text-gray-500 py-2\">No recent files</p>\n                    )}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Project Vaults */}\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Project Vaults</h3>\n                  <div className=\"space-y-1\">\n                    {/* All Files */}\n                    <Button\n                      variant=\"ghost\"\n                      className={`w-full justify-start gap-3 h-10 text-left ${\n                        !selectedProject ? 'bg-gray-100' : ''\n                      }`}\n                      onClick={() => setSelectedProject(null)}\n                    >\n                      <Folder className=\"h-4 w-4\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-sm font-medium\">All Files</div>\n                        <div className=\"text-xs text-gray-500\">Workspace files</div>\n                      </div>\n                    </Button>\n\n                    {/* Project Files */}\n                    {Array.isArray(projects) && projects.map((project: any) => (\n                      <Button\n                        key={project.id}\n                        variant=\"ghost\"\n                        className={`w-full justify-start gap-3 h-auto min-h-[2.5rem] py-2 text-left ${\n                          selectedProject?.id === project.id ? 'bg-gray-100' : ''\n                        }`}\n                        onClick={() => setSelectedProject(project)}\n                      >\n                        <Folder className=\"h-4 w-4 flex-shrink-0 mt-0.5\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"text-sm font-medium truncate\">{project.name}</div>\n                          <div className=\"text-xs text-gray-500 leading-relaxed break-words\">\n                            {project.description && project.description.length > 60 \n                              ? `${project.description.substring(0, 60)}...` \n                              : project.description || 'No description'}\n                          </div>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n\n          {/* Vault Explorer */}\n          <FileExplorer\n            selectedProject={selectedProject}\n            workspaceId={currentWorkspaceId}\n            files={Array.isArray(files) ? files : []}\n            onFileUpload={handleFileUpload}\n            onFolderCreate={handleFolderCreate}\n            onFileDelete={handleFileDelete}\n            onFileRename={handleFileRename}\n          />\n        </div>\n      </div>\n\n      {/* AI Assistant Widget - Available on all pages */}\n      {currentWorkspaceId && <AIAssistantWidget workspaceId={currentWorkspaceId} />}\n    </div>\n  );\n}","size_bytes":23355},"client/src/components/modals/add-member-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertWorkspaceMemberSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { User, Bot } from \"lucide-react\";\n\nconst addMemberSchema = z.object({\n  name: z.string().optional(),\n  memberType: z.enum(['user', 'agent']).default('user'),\n  email: z.string().email(\"Valid email required\").optional(),\n  alias: z.string().optional(),\n  systemPrompt: z.string().optional(),\n  workspaceId: z.number(),\n}).refine((data) => {\n  if (data.memberType === 'user') {\n    return !!data.email;\n  } else {\n    return !!data.name;\n  }\n}, {\n  message: \"Email is required for users, Name is required for agents\",\n  path: [\"email\"],\n});\n\ntype AddMemberForm = z.infer<typeof addMemberSchema>;\n\ninterface AddMemberModalProps {\n  open: boolean;\n  onClose: () => void;\n  workspaceId: number | null;\n}\n\nexport default function AddMemberModal({\n  open,\n  onClose,\n  workspaceId,\n}: AddMemberModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddMemberForm>({\n    resolver: zodResolver(addMemberSchema),\n    defaultValues: {\n      name: \"\",\n      memberType: \"user\",\n      email: \"\",\n      alias: \"\",\n      systemPrompt: \"\",\n      workspaceId: workspaceId || 0,\n    },\n  });\n\n  const addMemberMutation = useMutation({\n    mutationFn: async (data: AddMemberForm) => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/members`, data);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/invitations`] });\n      \n      const currentMemberType = form.getValues(\"memberType\");\n      toast({\n        title: currentMemberType === 'agent' ? \"Agent added\" : \"Invitation sent\",\n        description: currentMemberType === 'agent' \n          ? \"The AI agent has been added to the workspace successfully.\"\n          : \"An invitation has been sent to the user's email address.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddMemberForm) => {\n    addMemberMutation.mutate({\n      ...data,\n      workspaceId: workspaceId!,\n    });\n  };\n\n  const memberType = form.watch(\"memberType\");\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {memberType === 'agent' ? 'Add AI Agent' : 'Invite User to Workspace'}\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"memberType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Member Type</FormLabel>\n                  <Select \n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      // Reset fields when switching member type\n                      if (value === 'agent') {\n                        form.setValue('email', '');\n                      } else {\n                        form.setValue('name', '');\n                        form.setValue('alias', '');\n                        form.setValue('systemPrompt', '');\n                      }\n                    }}\n                    value={field.value}\n                    disabled={addMemberMutation.isPending}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select member type...\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"user\" className=\"flex items-center\">\n                        <div className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-2\" />\n                          User (Team Member)\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"agent\" className=\"flex items-center\">\n                        <div className=\"flex items-center\">\n                          <Bot className=\"h-4 w-4 mr-2\" />\n                          AI Agent\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {memberType === 'agent' && (\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Agent Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter agent name...\" \n                        {...field} \n                        disabled={addMemberMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {memberType === 'user' && (\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"Enter email address...\" \n                        {...field} \n                        disabled={addMemberMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {memberType === 'agent' && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"alias\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Agent Alias</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., ContentBot, CodeReviewer, ProjectAssistant...\" \n                          {...field} \n                          disabled={addMemberMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"systemPrompt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>System Prompt</FormLabel>\n                      <FormControl>\n                        <textarea \n                          className=\"min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                          placeholder=\"Define the agent's role, expertise, and how it should behave...\"\n                          {...field} \n                          disabled={addMemberMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                disabled={addMemberMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={addMemberMutation.isPending}\n              >\n                {addMemberMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Adding...\n                  </>\n                ) : (\n                  `${memberType === 'agent' ? 'Add Agent' : 'Send Invitation'}`\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9458},"client/src/components/modals/create-category-modal.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nconst createCategorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\").max(50, \"Category name too long\"),\n});\n\ntype CreateCategoryForm = z.infer<typeof createCategorySchema>;\n\ninterface CreateCategoryModalProps {\n  open: boolean;\n  onClose: () => void;\n  workspaceId: number | null;\n}\n\nexport default function CreateCategoryModal({\n  open,\n  onClose,\n  workspaceId,\n}: CreateCategoryModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateCategoryForm>({\n    resolver: zodResolver(createCategorySchema),\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: CreateCategoryForm) => {\n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/categories`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/categories`] });\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateCategoryForm) => {\n    createCategoryMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Category</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter category name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={createCategoryMutation.isPending}>\n                {createCategoryMutation.isPending ? \"Creating...\" : \"Create Category\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3601},"client/src/components/modals/create-project-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst createProjectSchema = insertProjectSchema.extend({\n  name: z.string().min(1, \"Project name is required\"),\n  description: z.string().optional(),\n  budget: z.string().optional(),\n});\n\ntype CreateProjectForm = z.infer<typeof createProjectSchema>;\n\ninterface CreateProjectModalProps {\n  open: boolean;\n  onClose: () => void;\n  workspaceId: number | null;\n}\n\nexport default function CreateProjectModal({\n  open,\n  onClose,\n  workspaceId,\n}: CreateProjectModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateProjectForm>({\n    resolver: zodResolver(createProjectSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      budget: \"\",\n      workspaceId: workspaceId || 0,\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: CreateProjectForm) => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      \n      const projectData = {\n        ...data,\n        workspaceId,\n        budget: data.budget ? parseFloat(data.budget) : undefined,\n      };\n      \n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/projects`, projectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/projects`] });\n      toast({\n        title: \"Project created\",\n        description: \"Your project has been created successfully.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateProjectForm) => {\n    createProjectMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Project</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Name *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter project name...\" \n                      {...field} \n                      disabled={createProjectMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter project description...\"\n                      rows={4}\n                      {...field}\n                      disabled={createProjectMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"budget\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Budget (optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      {...field}\n                      disabled={createProjectMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                disabled={createProjectMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createProjectMutation.isPending}\n              >\n                {createProjectMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Creating...\n                  </>\n                ) : (\n                  \"Create Project\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5463},"client/src/components/modals/create-task-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertTaskSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst createTaskSchema = insertTaskSchema.extend({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  projectId: z.number().optional(),\n  categoryId: z.number().optional(),\n  priority: z.number().min(0).max(3).default(0),\n  status: z.enum(['todo', 'in_progress', 'review', 'completed']).default('todo'),\n  dueDate: z.string().optional(),\n  timeSlot: z.string().optional(),\n  // Recurrence fields\n  hasRecurrence: z.boolean().default(false),\n  recurrenceType: z.enum(['daily', 'weekly', 'monthly', 'yearly', 'custom']).optional(),\n  recurrenceInterval: z.number().min(1).default(1),\n  recurrenceEndType: z.enum(['never', 'after_count', 'on_date']).default('never'),\n  recurrenceEndCount: z.number().min(1).optional(),\n  recurrenceEndDate: z.string().optional(),\n  weeklyDays: z.array(z.number()).optional(), // 0-6 for Sun-Sat\n  monthlyOption: z.enum(['date', 'day']).optional(), // specific date or relative day\n});\n\ntype CreateTaskForm = z.infer<typeof createTaskSchema>;\n\ninterface CreateTaskModalProps {\n  open: boolean;\n  onClose: () => void;\n  workspaceId: number | null;\n  projects: any[];\n  initialData?: {\n    title?: string;\n    description?: string;\n    timeSlot?: string;\n  };\n}\n\nexport default function CreateTaskModal({\n  open,\n  onClose,\n  workspaceId,\n  projects,\n  initialData,\n}: CreateTaskModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch categories for the workspace\n  const { data: categories = [] } = useQuery({\n    queryKey: [`/api/workspaces/${workspaceId}/categories`],\n    enabled: !!workspaceId && open,\n  });\n\n  // Fetch workspace members\n  const { data: members = [] } = useQuery({\n    queryKey: [`/api/workspaces/${workspaceId}/members`],\n    enabled: !!workspaceId && open,\n  });\n\n  const form = useForm<CreateTaskForm>({\n    resolver: zodResolver(createTaskSchema),\n    defaultValues: {\n      title: initialData?.title || \"\",\n      description: initialData?.description || \"\",\n      priority: 0,\n      status: \"todo\",\n      timeSlot: initialData?.timeSlot || \"\",\n      workspaceId: workspaceId || 0,\n      hasRecurrence: false,\n      recurrenceType: \"daily\",\n      recurrenceInterval: 1,\n      recurrenceEndType: \"never\",\n      weeklyDays: [],\n      monthlyOption: \"date\",\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: CreateTaskForm) => {\n      if (!workspaceId) throw new Error(\"No workspace selected\");\n      return await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/tasks`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks/due-today`] });\n      toast({\n        title: \"Task created\",\n        description: \"Your task has been created successfully.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateTaskForm) => {\n    createTaskMutation.mutate({\n      ...data,\n      workspaceId: workspaceId!,\n    });\n  };\n\n  const timeSlotOptions = [\n    { value: \"06:00\", label: \"06:00 - 07:00\" },\n    { value: \"07:00\", label: \"07:00 - 08:00\" },\n    { value: \"08:00\", label: \"08:00 - 09:00\" },\n    { value: \"09:00\", label: \"09:00 - 10:00\" },\n    { value: \"10:00\", label: \"10:00 - 11:00\" },\n    { value: \"11:00\", label: \"11:00 - 12:00\" },\n    { value: \"12:00\", label: \"12:00 - 13:00\" },\n    { value: \"13:00\", label: \"13:00 - 14:00\" },\n    { value: \"14:00\", label: \"14:00 - 15:00\" },\n    { value: \"15:00\", label: \"15:00 - 16:00\" },\n    { value: \"16:00\", label: \"16:00 - 17:00\" },\n    { value: \"17:00\", label: \"17:00 - 18:00\" },\n    { value: \"18:00\", label: \"18:00 - 19:00\" },\n    { value: \"19:00\", label: \"19:00 - 20:00\" },\n    { value: \"20:00\", label: \"20:00 - 21:00\" },\n    { value: \"21:00\", label: \"21:00 - 22:00\" },\n    { value: \"22:00\", label: \"22:00 - 23:00\" },\n  ];\n\n  const priorityOptions = [\n    { value: 0, label: \"No Priority\" },\n    { value: 1, label: \"Low Priority\" },\n    { value: 2, label: \"Medium Priority\" },\n    { value: 3, label: \"High Priority\" },\n  ];\n\n  const statusOptions = [\n    { value: \"todo\", label: \"Backlog\" },\n    { value: \"in_progress\", label: \"Doing\" },\n    { value: \"review\", label: \"Review\" },\n    { value: \"completed\", label: \"Done\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Task</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter task title...\" \n                      {...field} \n                      disabled={createTaskMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter task description...\"\n                      rows={3}\n                      {...field}\n                      disabled={createTaskMutation.isPending}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"projectId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))}\n                      value={field.value?.toString() || \"none\"}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select project...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No Project</SelectItem>\n                        {projects.map((project) => (\n                          <SelectItem key={project.id} value={project.id.toString()}>\n                            {project.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))}\n                      value={field.value?.toString() || \"none\"}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No Category</SelectItem>\n                        {categories.map((category: any) => (\n                          <SelectItem key={category.id} value={category.id.toString()}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(parseInt(value))}\n                      value={field.value?.toString()}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select priority...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {priorityOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value.toString()}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value)}\n                      value={field.value}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {statusOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"assignedMemberId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assign To</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))}\n                      value={field.value?.toString() || \"none\"}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select member...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">Unassigned</SelectItem>\n                        {members.map((member: any) => (\n                          <SelectItem key={member.id} value={member.id.toString()}>\n                            {member.name} {member.memberType === 'agent' ? '🤖' : '👤'}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div></div> {/* Empty grid cell for spacing */}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                        disabled={createTaskMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"timeSlot\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time Slot</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value === \"none\" ? \"\" : value)}\n                      value={field.value || \"none\"}\n                      disabled={createTaskMutation.isPending}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select time slot...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No Time Slot</SelectItem>\n                        {timeSlotOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Task Recurrence Section */}\n            <div className=\"space-y-4 border-t pt-4\">\n              <FormField\n                control={form.control}\n                name=\"hasRecurrence\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        disabled={createTaskMutation.isPending}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Task Repeats</FormLabel>\n                      <p className=\"text-[0.8rem] text-muted-foreground\">\n                        Create recurring task instances based on schedule\n                      </p>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              {form.watch(\"hasRecurrence\") && (\n                <div className=\"space-y-4 pl-6 border-l-2 border-muted\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"recurrenceType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Repeat Pattern</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            value={field.value || \"daily\"}\n                            disabled={createTaskMutation.isPending}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select pattern...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"daily\">Daily</SelectItem>\n                              <SelectItem value=\"weekly\">Weekly</SelectItem>\n                              <SelectItem value=\"monthly\">Monthly</SelectItem>\n                              <SelectItem value=\"yearly\">Yearly</SelectItem>\n                              <SelectItem value=\"custom\">Custom</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"recurrenceInterval\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Every</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              placeholder=\"1\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                              disabled={createTaskMutation.isPending}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {form.watch(\"recurrenceType\") === \"weekly\" && (\n                    <div className=\"space-y-2\">\n                      <Label>Repeat On</Label>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day, index) => (\n                          <div key={day} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={`day-${index}`}\n                              checked={form.watch(\"weeklyDays\")?.includes(index) || false}\n                              onCheckedChange={(checked) => {\n                                const currentDays = form.watch(\"weeklyDays\") || [];\n                                if (checked) {\n                                  form.setValue(\"weeklyDays\", [...currentDays, index]);\n                                } else {\n                                  form.setValue(\"weeklyDays\", currentDays.filter(d => d !== index));\n                                }\n                              }}\n                              disabled={createTaskMutation.isPending}\n                            />\n                            <Label htmlFor={`day-${index}`} className=\"text-sm\">{day}</Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"recurrenceEndType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Condition</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            value={field.value || \"never\"}\n                            disabled={createTaskMutation.isPending}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select end condition...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"never\">Never</SelectItem>\n                              <SelectItem value=\"after_count\">After X occurrences</SelectItem>\n                              <SelectItem value=\"on_date\">On specific date</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {form.watch(\"recurrenceEndType\") === \"after_count\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"recurrenceEndCount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Number of Occurrences</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                min=\"1\"\n                                placeholder=\"10\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                disabled={createTaskMutation.isPending}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    {form.watch(\"recurrenceEndType\") === \"on_date\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"recurrenceEndDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>End Date</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"date\"\n                                {...field}\n                                disabled={createTaskMutation.isPending}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                disabled={createTaskMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTaskMutation.isPending}\n              >\n                {createTaskMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Creating...\n                  </>\n                ) : (\n                  \"Create Task\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":24267},"client/src/components/modals/create-workspace-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Users, User } from \"lucide-react\";\n\ninterface CreateWorkspaceModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateWorkspaceModal({\n  open,\n  onClose,\n}: CreateWorkspaceModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [workspaceName, setWorkspaceName] = useState(\"\");\n  const [workspaceType, setWorkspaceType] = useState(\"personal\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!workspaceName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Workspace name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      console.log(\"Submitting workspace:\", { name: workspaceName, type: workspaceType });\n      \n      const response = await apiRequest(\"POST\", \"/api/workspaces\", {\n        name: workspaceName.trim(),\n        type: workspaceType,\n      });\n      \n      console.log(\"Workspace created successfully:\", response);\n      \n      await queryClient.invalidateQueries({ queryKey: [\"/api/workspaces\"] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Workspace created successfully!\",\n      });\n      \n      // Reset form and close modal\n      setWorkspaceName(\"\");\n      setWorkspaceType(\"personal\");\n      onClose();\n      \n    } catch (error: any) {\n      console.error(\"Failed to create workspace:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create workspace. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[450px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Workspace</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"workspace-name\">Workspace Name *</Label>\n            <Input\n              id=\"workspace-name\"\n              type=\"text\"\n              placeholder=\"Enter workspace name...\"\n              value={workspaceName}\n              onChange={(e) => setWorkspaceName(e.target.value)}\n              disabled={isSubmitting}\n              required\n            />\n          </div>\n\n          <div className=\"space-y-3\">\n            <Label>Workspace Type *</Label>\n            <RadioGroup\n              value={workspaceType}\n              onValueChange={setWorkspaceType}\n              disabled={isSubmitting}\n              className=\"space-y-3\"\n            >\n              <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n                <RadioGroupItem value=\"personal\" id=\"personal\" />\n                <div className=\"flex items-center space-x-3 flex-1\">\n                  <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-primary\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"personal\" className=\"font-medium cursor-pointer\">\n                      Personal Workspace\n                    </Label>\n                    <p className=\"text-xs text-gray-500\">\n                      Private workspace for individual tasks and projects\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n                <RadioGroupItem value=\"team\" id=\"team\" />\n                <div className=\"flex items-center space-x-3 flex-1\">\n                  <div className=\"w-8 h-8 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-4 w-4 text-secondary\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"team\" className=\"font-medium cursor-pointer\">\n                      Team Workspace\n                    </Label>\n                    <p className=\"text-xs text-gray-500\">\n                      Collaborative workspace for team projects and coordination\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Information box based on selected type */}\n          <div className={`p-3 rounded-lg border ${\n            workspaceType === 'personal' \n              ? 'bg-blue-50 border-blue-200' \n              : 'bg-green-50 border-green-200'\n          }`}>\n            <div className=\"text-sm\">\n              {workspaceType === 'personal' ? (\n                <>\n                  <strong className=\"text-blue-800\">Personal Workspace:</strong>\n                  <ul className=\"mt-1 text-blue-700 space-y-1\">\n                    <li>• Complete privacy with no sharing capabilities</li>\n                    <li>• Default workspace for individual task management</li>\n                    <li>• Perfect for personal organization and productivity</li>\n                  </ul>\n                </>\n              ) : (\n                <>\n                  <strong className=\"text-green-800\">Team Workspace:</strong>\n                  <ul className=\"mt-1 text-green-700 space-y-1\">\n                    <li>• Collaborative environment with team members</li>\n                    <li>• Shared projects and tasks coordination</li>\n                    <li>• Role-based permissions and access control</li>\n                  </ul>\n                </>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Creating...\n                </>\n              ) : (\n                \"Create Workspace\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7044},"client/src/components/modals/edit-category-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nconst editCategorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\").max(50, \"Category name too long\"),\n});\n\ntype EditCategoryForm = z.infer<typeof editCategorySchema>;\n\ninterface EditCategoryModalProps {\n  open: boolean;\n  onClose: () => void;\n  category: any;\n  workspaceId: number | null;\n}\n\nexport default function EditCategoryModal({\n  open,\n  onClose,\n  category,\n  workspaceId,\n}: EditCategoryModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditCategoryForm>({\n    resolver: zodResolver(editCategorySchema),\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  // Update form when category changes\n  useEffect(() => {\n    if (category && open) {\n      form.reset({\n        name: category.name || \"\",\n      });\n    }\n  }, [category, open, form]);\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async (data: EditCategoryForm) => {\n      return await apiRequest(\"PATCH\", `/api/categories/${category.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/categories`] });\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditCategoryForm) => {\n    updateCategoryMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Category</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter category name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateCategoryMutation.isPending}>\n                {updateCategoryMutation.isPending ? \"Updating...\" : \"Update Category\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3807},"client/src/components/modals/edit-project-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\n\nconst editProjectSchema = z.object({\n  name: z.string().min(1, \"Project name is required\").max(100, \"Project name too long\"),\n  description: z.string().optional(),\n});\n\ntype EditProjectForm = z.infer<typeof editProjectSchema>;\n\ninterface EditProjectModalProps {\n  open: boolean;\n  onClose: () => void;\n  project: any;\n  workspaceId: number | null;\n}\n\nexport default function EditProjectModal({\n  open,\n  onClose,\n  project,\n  workspaceId,\n}: EditProjectModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditProjectForm>({\n    resolver: zodResolver(editProjectSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  // Update form when project changes\n  useEffect(() => {\n    if (project && open) {\n      form.reset({\n        name: project.name || \"\",\n        description: project.description || \"\",\n      });\n    }\n  }, [project, open, form]);\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async (data: EditProjectForm) => {\n      return await apiRequest(\"PATCH\", `/api/projects/${project.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/projects`] });\n      toast({\n        title: \"Success\",\n        description: \"Project updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditProjectForm) => {\n    updateProjectMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Project</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter project name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter project description\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateProjectMutation.isPending}>\n                {updateProjectMutation.isPending ? \"Updating...\" : \"Update Project\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4516},"client/src/components/modals/edit-task-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\nconst editTaskSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  status: z.enum([\"todo\", \"in_progress\", \"completed\"]),\n  priority: z.number().min(1).max(3),\n  dueDate: z.string().optional(),\n  timeSlot: z.string().optional(),\n  projectId: z.number().optional(),\n  categoryId: z.number().optional(),\n  assignedMemberId: z.number().optional(),\n  // Recurrence fields\n  repeatTask: z.boolean().optional(),\n  recurrenceType: z.enum([\"daily\", \"weekly\", \"monthly\", \"yearly\", \"custom\"]).optional(),\n  interval: z.number().min(1).optional(),\n  endType: z.enum([\"never\", \"after_count\", \"on_date\"]).optional(),\n  endCount: z.number().min(1).optional(),\n  endDate: z.string().optional(),\n  weeklyDays: z.array(z.number()).optional(),\n  monthlyOption: z.enum([\"date\", \"day\"]).optional(),\n});\n\ntype EditTaskForm = z.infer<typeof editTaskSchema>;\n\ninterface EditTaskModalProps {\n  open: boolean;\n  onClose: () => void;\n  task: any;\n  workspaceId: number | null;\n  projects: any[];\n  categories: any[];\n  members: any[];\n}\n\nexport default function EditTaskModal({\n  open,\n  onClose,\n  task,\n  workspaceId,\n  projects,\n  categories,\n  members,\n}: EditTaskModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [repeatTask, setRepeatTask] = useState(false);\n\n  const form = useForm<EditTaskForm>({\n    resolver: zodResolver(editTaskSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      status: \"todo\",\n      priority: 2,\n      dueDate: \"\",\n      timeSlot: \"\",\n      projectId: undefined,\n      categoryId: undefined,\n      assignedMemberId: undefined,\n      repeatTask: false,\n      recurrenceType: \"daily\",\n      interval: 1,\n      endType: \"never\",\n      endCount: 1,\n      endDate: \"\",\n      weeklyDays: [],\n      monthlyOption: \"date\",\n    },\n  });\n\n  // Update form when task changes\n  useEffect(() => {\n    if (task && open) {\n      form.reset({\n        title: task.title || \"\",\n        description: task.description || \"\",\n        status: task.status || \"todo\",\n        priority: task.priority || 2,\n        dueDate: task.dueDate || \"\",\n        timeSlot: task.timeSlot || \"\",\n        projectId: task.projectId || undefined,\n        categoryId: task.categoryId || undefined,\n        assignedMemberId: task.assignedMemberId || undefined,\n      });\n    }\n  }, [task, open, form]);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async (data: EditTaskForm) => {\n      return await apiRequest(\"PATCH\", `/api/tasks/${task.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/workspaces/${workspaceId}/tasks`] });\n      toast({\n        title: \"Success\",\n        description: \"Task updated successfully\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditTaskForm) => {\n    updateTaskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Task</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter task title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter task description\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"todo\">To Do</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Priority\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"1\">Low</SelectItem>\n                        <SelectItem value=\"2\">Medium</SelectItem>\n                        <SelectItem value=\"3\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"timeSlot\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time Slot</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select time\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"06:00\">06:00 - 07:00</SelectItem>\n                        <SelectItem value=\"07:00\">07:00 - 08:00</SelectItem>\n                        <SelectItem value=\"08:00\">08:00 - 09:00</SelectItem>\n                        <SelectItem value=\"09:00\">09:00 - 10:00</SelectItem>\n                        <SelectItem value=\"10:00\">10:00 - 11:00</SelectItem>\n                        <SelectItem value=\"11:00\">11:00 - 12:00</SelectItem>\n                        <SelectItem value=\"12:00\">12:00 - 13:00</SelectItem>\n                        <SelectItem value=\"13:00\">13:00 - 14:00</SelectItem>\n                        <SelectItem value=\"14:00\">14:00 - 15:00</SelectItem>\n                        <SelectItem value=\"15:00\">15:00 - 16:00</SelectItem>\n                        <SelectItem value=\"16:00\">16:00 - 17:00</SelectItem>\n                        <SelectItem value=\"17:00\">17:00 - 18:00</SelectItem>\n                        <SelectItem value=\"18:00\">18:00 - 19:00</SelectItem>\n                        <SelectItem value=\"19:00\">19:00 - 20:00</SelectItem>\n                        <SelectItem value=\"20:00\">20:00 - 21:00</SelectItem>\n                        <SelectItem value=\"21:00\">21:00 - 22:00</SelectItem>\n                        <SelectItem value=\"22:00\">22:00 - 23:00</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"projectId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))} defaultValue={field.value?.toString() || \"none\"}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select project\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"none\">No Project</SelectItem>\n                      {projects.map((project) => (\n                        <SelectItem key={project.id} value={project.id.toString()}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"categoryId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))} defaultValue={field.value?.toString() || \"none\"}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"none\">No Category</SelectItem>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id.toString()}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"assignedMemberId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Assigned To</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(value === \"none\" ? undefined : parseInt(value))} defaultValue={field.value?.toString() || \"none\"}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select member\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"none\">Unassigned</SelectItem>\n                      {members.map((member) => (\n                        <SelectItem key={member.id} value={member.id.toString()}>\n                          {member.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateTaskMutation.isPending}>\n                {updateTaskMutation.isPending ? \"Updating...\" : \"Update Task\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14015},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}